Министерство науки и высшего образования Российской Федерации
ФГБОУ ВО «Нижневартовский государственный университет»
СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Материалы V Международной
научно-практической конференции
Нижневартовск,
7–8 декабря 2023 года
Под общей редакцией Т.Б. Казиахмедова
Нижневартовск
НВГУ
2024ББК 32.973я43 16+
С 56
Печатается по решению
Ученого совета ФГБОУ ВО «Нижневартовский государственный университет»
Нучные редакторы:
Туфик Багаутдинович Казиахмедов, канд. пед. наук, доцент, зав. кафедрой информатики и
методики преподавания информатики Нижневартовского государственного университета
Александр Александрович Русаков, канд. физ.-мат. наук, д-р пед. наук, президент Академии
информатизации образования
Георгий Юрьевич Яламов, канд. физ.-мат. наук, доцент, вед. научн. сотрудник Института
управления образованием РАО
Ответственный редактор:
Туфик Багаутдинович Казиахмедов, канд. пед. наук, доцент, зав. кафедрой информатики и
методики преподавания информатики Нижневартовского государственного университета
С 56 Современное программирование: материалы V Международной научно-
практической конференции (г. Нижневартовск, 7–8 декабря 2023 года) / отв. ред. Т.Б.
Казиахмедов. Нижневартовск: Изд-во Нижневартовского гос. ун-та, 2024. 377 с.
ISBN 978–5–00047–702-1
Авторами конференции рассмотрены вопросы эффективности алгоритмов, применяемых при
решении различных задач использования параллельных, генетических алгоритмов и нейронных сетей
в задачах распознавания, а также методы оптимизации в таких современных направлениях
информатики, как телемедицина, искусственный интеллект, большие данные (Big Data),
интеллектуальный анализ больших данных, интернет вещей, математические методы и компьютерные
технологии для решения экологических проблем современности, компьютерные технологии
прогнозирования природных катаклизмов и др. Освещены темы формирования профессиональных
компетенций бакалавров и магистров направлений 09.03.01 Информатика и вычислительная техника,
09.04.01 Информатика и вычислительная техника.
Издание адресовано специалистам-практикам, педагогическим работникам, научным
сотрудникам, аспирантам и студентам.
ББК 32.973я43
Тип лицензии CC, поддерживаемый журналом: Attribution 4.0 International (CC BY 4.0).
© НВГУ, 2024СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
РЕЗОЛЮЦИЯ
V Международной научно-практической конференции «Современное программирование»
г. Нижневартовск, 7–8 декабря 2023 года
V Международная научно-практическая конференция «Современное
программирование» состоялась 7–8 декабря 2023 года в ФГБОУ ВО «Нижневартовский
государственный университет» в очно-дистанционном формате. Конференция ставила своей
целью объединение сил международного научного сообщества в обсуждении современных
достижений в области программирования.
Участники конференции приняли участие в пленарном заседании и 6 секционных
заседаниях:
 Вопросы методологии формирования профессиональных компетенций выпускников
вузов. Обучение школьников программированию. Заседание форсайт-центра «Цифровая
трансформация образования»
 Интернет вещей. Робототехника и программирование
 Компьютерное моделирование в прикладных науках. Математическое моделирование
в сложных системах. Моделирование баз данных
 Нейронные сети. Интеллектуальные информационные системы
 Среды, инструменты, методы программирования. Управление разработкой
программных комплексов и вычислительными процессами
 Обучение прикладным решениям 1С в организациях СПО и вузах. Современные
отраслевые и прикладные решения фирмы 1С.
Довольно широкая география участников подтверждает актуальность темы
конференции и рассматриваемых в ее рамках вопросов. Всего было представлено 56 докладов.
В работе конференции приняли участие 105 исследователей, педагогических работников,
специалистов-практиков, молодых ученых из 16 регионов России (Амурская обл.,
Башкортостан, Карелия, Краснодарский край, Москва, Московская обл., Новосибирская обл.,
Омская обл., Пермский край, Санкт-Петербург, Саратовская обл., Свердловская обл., Томская
обл., Тюменская обл., Удмуртия, ХМАО-Югра), Республики Беларусь, Азербайджана,
Казахстана, Таджикистана. Представленные на конференции научно-исследовательские
разработки позволяют утверждать значимость современного программирования в социально-
экономическом развитии, совершенствовании образования и образовательного процесса,
развитии промышленности, нефтегазодобывающего комплекса, инфраструктуры и др.
По итогам работы конференции организационным комитетом и участниками приняты
следующие решения:
1) Активизировать использование современных инструментов и методов
программирования в реализации различных видов деятельности.
2) Считать необходимым продолжение апробации разработанных положений, а также
расширение спектра проектных разработок за счет включения новых, не охваченных на
данный момент аспектов информационных технологий.
4СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
3) Представленные разработки после доработок и апробации рекомендовать к
внедрению в научную и образовательную деятельность университетов.
4) Отметить очевидные потребности междисциплинарной интеграции инженерных и
специальных дисциплин в рамках подготовки бакалавров, магистров и аспирантов.
5) Рекомендовать участникам опубликовать результаты исследований, представленные
в докладах, в сборнике материалов конференции.
6) Поддержать необходимость проведения регулярных конференций по заявленной
тематике с периодичностью не реже 1 раза в год.
7) Отметить значимость участия в научной конференции молодых ученых. Продолжить
обеспечивающую преемственность в науке практику совместного обсуждения вопросов и
проблем.
8) Продолжить совершенствование системы информационного обмена и укрепления
научных связей по актуальным вопросам современного программирования.
Заместитель председателя организационного комитета:
канд. пед. наук, доцент,
заведующий кафедрой информатики
и методики преподавания информатики
ФГБОУ ВО «НВГУ» Т.Б. Казиахмедов
8 декабря 2023 г.
5СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
СРЕДЫ, ИНСТРУМЕНТЫ, МЕТОДЫ ПРОГРАММИРОВАНИЯ
УДК 004.422.81
Тарасов В.Г.
канд. техн. наук, профессор
Газизулин М.Р.
студент
Ижевский государственный технический университет им. М.Т. Калашникова
г. Ижевск, Россия
РАЗРАБОТКА ВЕБ-ПРИЛОЖЕНИЯ
ДЛЯ СОЗДАНИЯ И ПРОСМОТРА ВИРТУАЛЬНОГО МУЗЕЯ
Аннотация. На основе сравнительного анализа инструментов создания виртуальных
музеев и выставок рассматривается инновационный проект – веб-приложение для создания и
просмотра виртуального музея, разработанное в среде программирования Unity. Приложение
состоит из клиентской, в которой гость может просматривать музей в 3D, и административной
части, в которой редактор может создавать выставки музея с помощью no-code инструментов.
Ключевые слова: виртуальный музей; веб-приложение; дружественный интерфейс;
шаблоны проектирования; модульная архитектура.
На протяжении всего существования культуры была и есть необходимость ее сохранять
в том или ином виде. Одним из способов сохранения культуры является создание музеев и
проведение выставок. Помимо сохранения экспонатов, картин, иных исторических объектов,
они также нужны для презентации и выставки своего содержимого людям [5, с. 325]. Это
позволяет человеку узнать историю объекта, того времени или события, глубже погрузиться в
контекст, а также узнать для себя что-то новое [6, с. 55]. При этом надобность в музее или
выставке может быть не только у государства или богатого коллекционера. Созданием
экспозиции может воспользоваться любая организация или компания. У них есть потребность
сохранить и презентовать людям свою историю, достижения и результаты, продукты работы,
но компаниям и организациям нужна удобная возможность. Проблема заключается в том, что
организация как выставки, так и музея в натуральном формате сложно и дорого, для этого
нужно помещение, материалы и оборудование, организация мероприятия. При этом такое
событие не сможет охватить широкий круг людей, потому что будет проходить в оффлайн
формате [6, с. 56]. Некоторые организации и компании не пойдут на такие траты, чтобы
организовать мероприятие, которое принесет им мало пользы и выгоды. Если решить
приведенную выше проблему, создав простой, дешевой и легкий в сопровождении и
поддержке виртуальный музей, то для организаций откроется новая возможность в
сохранении и презентации информации.
Для решения данной проблемы можно перенести очные выставки в онлайн формат.
Иначе говоря, организовать виртуальные выставки и музеи. С приходом эры “Web 2.0” и
постепенным наступлением “Web 3.0” в интернете осуществляется постепенный переход из
2D пространств в интерактивные 3D пространства прямо в интернет-браузере [2, с. 1]. В
6СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
настоящее время уже были различные попытки создания инструментария, позволяющего
создавать интерактивные выставки и музеи, и на данный момент существует ряд готовых
решений. Они в той или иной степени решают проблему – позволяют создать виртуальный
музей или выставку, добавить туда содержание и дают возможность пользователю посетить
музей в цифровом виде. С другой стороны, они имеют недостатки: часть из них имеет
недостаточный функционал, часть имеет слишком высокую стоимость.
Таким образом, целью работы является сравнительный анализ инструментов создания
виртуальных музеев и выставок, создание на его основе собственного веб-приложения для
создания и просмотра виртуального музея. Это позволит повысить эффективность создания
выставок у любых организаций, повысить их доступность пользователями, а также понизить
стоимость экспозиции или музея.
Для сравнительного анализа взяты следующие инструменты: “Российская музейная
компания” (https://shorturl.at/gOQ28), “3D panorama” (https://shorturl.at/cdPRX), “Artsteps”
(https://shorturl.at/tyCT7), а также разработки, описанные в научных статьях: цифровой
олимпийский музей [7, с. 91-95], персональный виртуальный музей [4, с. 219-222]. Среди
критериев сравнения определены: онлайн – возможность посетителю музея зайти в него через
браузер по сети Интернет; стоимость – стоимость создания музея или панорамы; для VR –
возможность посетить музей в шлеме виртуальной реальности; без VR – возможность
посетить музей без шлема виртуальной реальности; 3D экспонаты – возможность добавления
и презентации 3D объектов; интерактивные экспонаты – возможность интерактивного
взаимодействия; изображения – поддержка демонстрации изображений; видео – поддержка
воспроизведения видеофайлов; текст – поддержка отображения текстовой информации; аудио
гид – возможность звукового сопровождения гостя по музею или выставке; открытый
исходный код. По этим инструментам и критериям составлена сравнительная таблица, где
знак '+' означает наличие критерия, а знак '-' его отсутствие:
Таблица 1
Сравнение инструментов создания виртуальных музеев и выставок
Российская Цифровой Персональный
3D
музейная Artsteps олимпийский виртуальный
panorama
компания музей музей
Онлайн + + + + -
От Условно
Стоимость От 200000 р. - -
1600 р. бесплатно
Для VR + + + + -
Без VR + + + - +
3D экспонаты + - + + +
Интерактивные
+ - - + +
экспонаты
Изображения + + + + +
Видео + - + + -
Текст + + + + +
Аудио гид + + + - +
Открытый
- - - - -
исходный код
7СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Критерий стоимости нуждается в дополнительном пояснении. Российская музейная
компания предлагает создание целого музея, цены на создание начинаются от 200000 рублей.
3D panorama предлагает съемку панорам по цене от 1600 рублей за одну панораму, для
оцифровки небольшого помещения нужно от 4 панорам. Artsteps имеет бесплатный доступ к
встроенному функционалу, а за отдельную плату разработчики могут изготовить на заказ
любой музей. Разработки из научных статей на данный момент не имеют публичных ссылок
для входа и использования, поэтому, никак не распространяясь, они являются недоступными
и не имеют информации о стоимости.
На основании сравнительной таблицы можно назвать недостатки каждого инструмента.
Российская музейная компания представляет широкий функционал, но имеет высокую
стоимость и закрытый исходный код. 3D panorama имеет стоимость ниже, но также
функционал инструмента значительно меньше – нет поддержки видео, 3D экспонатов,
интерактивности экспонатов, а также исходный код инструмента закрыт. Artsteps
предоставляет широкий набор функций в бесплатном варианте, но для любых изменений вне
бесплатной версии, нужно будет оплачивать создание музея под заказ, исходный код закрыт.
Цифровой олимпийский музей и персональный виртуальный музей не имеют публичных
ссылок для входа и использования, поэтому фактически их нельзя применять для создания
музеев или выставок, также они предоставляют не так много возможностей, как их аналоги.
На основании проведенного анализа, дешевого или бесплатного инструмента с полным
функционалом и открытым исходным кодом нет в свободном доступе. По этой причине в
работе предлагается разработка бесплатного веб-приложения с открытым исходным кодом,
которое позволяло бы создавать музеи и выставки.
Для разработки веб-приложения выбрана среда разработки Unity
(https://shorturl.at/lnsMT). Unity – игровой движок, предоставляющий большие возможности и
разнообразный функционал при разработке. В нем есть встроенная поддержка материалов и
шейдеров, рендеринга, освещения, физики, продвинутых анимаций, аудио и видео поддержки.
Также Unity поддерживает разработку на более чем двадцать крупных платформ (Windows,
Linux, Mac OS, мобильные устройства, а также поддержка WebGL – для разработки веб-
приложений). Разработка проекта на Unity быстрая, так как редактор Unity содержит в себе
множество сильных и удобных инструментов. Для программирования на Unity используется
язык программирования C# 9.0 [3, с. 50].
Диаграмму вариантов использования системы можно представить в виде рисунка 1.
На основе рисунка 1, который показывает круг пользователей и события в системе,
можно описать необходимый функционал. Так как приложение включает в себя две большие
системы, структуру разработанного решения можно представить в виде двух схем,
показанных на рисунках 2 и 3.
8СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Диаграмма вариантов использования
Рис. 2. Структурная схема административной панели
9СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 3. Структурная схема 3D клиентской части
Разработанный виртуальный музей включает в себя выставки (залы). Выставки
наполняются графическими изображениями с названием (картины), видеоматериалами,
декорациями (например, диваны или цветы), информационными стендами (набором
изображений и описаний), 3D объектами, которые можно рассмотреть и покрутить. Система
административной части включает в себя подсистемы аутентификации, листинга залов,
редактирования зала, создания зала, управления пользователями. Аутентификация включает
в себя авторизацию и регистрацию редакторов. Подсистема листинга зала предоставляет
возможность просмотра списка и миниатюр залов. Подсистема редактирования зала позволяет
изменять всю информацию и наполнять зал содержимым. Подсистема создания зала дает
создать зал с первоначальными настройками и предварительно посмотреть размер зала.
Подсистема управления пользователями включает в себя просмотр списка пользователей,
изменение их данных и ролей, а также просмотр административной информации. Система
клиентской части состоит из подсистем генерации зала, пользовательского управления,
взаимодействия с объектами зала. Подсистема генерации зала включает в себя полную
визуализацию зала и его наполнения с помощью набора 3D объектов. Подсистема
пользовательского управления отвечает за управление гостя в 3D-пространстве: перемещение,
ориентация камеры, взаимодействие с интерактивными объектами. Подсистема
взаимодействия с объектами зала отвечает за различное уникальное взаимодействие гостя с
объектами наполнения. В будущем планируется разработка подсистемы VR для просмотра
зала в виртуальной реальности и подсистемы аудио гида, который будет голосом
сопровождать гостя по залу.
10СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Реализованный пользовательский интерфейс административной части представлен на
рисунке 4.
Рис. 4. Интерфейс административной панели музея – редактирование зала
Благодаря дружественному интерфейсу административной панели музея и редактора, а
также написанной документации, любой человек может создать свою экспозицию музея.
Клиент затем берет информацию о зале из базы данных и генерирует 3D зал, пример которого
показан на рисунке 5.
Рис. 5. 3D клиент музея
Так, в администраторской панели редакторы создают залы, редактируют их, наполняя
содержимым – изображениями и видеоматериалами, интерактивными 3D объектами,
информационными стендами, декорациями, а также могут редактировать внешний вид зала,
выбирая один из заготовленных вариантов. Затем эти данные сохраняются с помощью сервера
в базе данных. Клиентская часть получает эти данные и генерирует интерактивное 3D
11СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
пространство, по которому может перемещаться гость. В дальнейшем предполагается
разработка подсистемы VR и подсистемы аудио гида.
Диаграмма взаимосвязи объектов системы представлена на рисунке 6.
Рис. 6. Диаграмма взаимосвязи объектов (ER-диаграмма)
Для гибкости системы при разработке учитывались некоторые методы
программирования и шаблоны проектирования. Так, в разработке используется модульный
подход, суть которого заключается в разбиении программного кода на наборы классов
(модули). Это позволяет снизить связанность модулей (зависимость и связь между модулями)
и повысить связность внутри модулей (классы внутри модулей объединяются по смыслу и
изолируются). То есть классы объединяются по смыслу (например, модуль аутентификации
или модуль управления пользователями), закрываются в черный ящик – сам модуль, тем
самым обеспечивая минимум связей между разными модулями, а затем модули, при
необходимости, связываются между собой, но уже на более высоком архитектурном слое.
Также для организации обмена данными между приложением и базой данных используется
шаблон Data Transfer Object (DTO). Так как отправлять много запросов к серверу и получать
множество ответов достаточно дорого и долго, данные объединяются в специальную
структуру – DTO, которой обменивается клиент и сервер. Это позволяет добиться
повышенной производительности и эффективности передачи. Также можно разделять DTO
структуру на две – для ответа и для запроса, – тогда мы еще обеспечим более низкую
связанность между сервером и клиентом (разными слоями приложения).
У разработанного решения на данный момент есть особенности. В качестве хостинга
веб-приложения был выбран сервис Netlify (https://shorturl.at/fgrF5), так как он является
бесплатным решением с небольшим количеством ограничений и частично бесплатным
доменным именем. Туда загружается собранный HTML5 WebGL проект музея. Для хостинга
12СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
базы данных и сервера веб-приложения был выбран сервис AwardSpace
(https://shorturl.at/chzJ6), так как он тоже является бесплатным решением с небольшим
количеством ограничений и большим количеством бесплатных настроек. Этот хостинг
поддерживает базу данных MySQL и сервер на PHP. При необходимости можно мигрировать
базу данных, например, на PostgreSQL, а хостинг сменить, например на собственный. Сервер
также можно написать, используя другие технологии.
Также есть дополнительная особенность – при создании зала администраторам нужно
загружать видео и фотоматериалы в зал. Для этого они прикладывают ссылки на видео и
изображения из интернета. Чтобы в дальнейшем веб-приложение смогло скачать материалы
по ссылкам и отобразить их, нужно чтобы хостинги материалов поддерживали CORS-запросы.
Таких хостингов достаточно мало, поэтому мы используем Postimages (https://shorturl.at/fsvzE)
для изображений и GitHub Pages (https://shorturl.at/bdvL6) для видео.
Предложенный программный продукт решает проблему в необходимости простого,
дешевого и поддерживаемого виртуального музея, которым может воспользоваться любая
желающая компания или организация и создать свой виртуальный музей и выставки.
Примененные методы обеспечивают гибкость при разработке программного обеспечения:
можно легко добавить новый модуль, использовать или переопределять существующий
функционал, не внося в него изменений и не получая новых ошибок [1, с. 91]. Таким же
образом облегчается поддержка программного продукта. Доступ к административной части
разработанного виртуального музея (https://shorturl.ac/7c3xf) и клиентской части
(https://shorturl.ac/7c3xg) открыт для пользователей.
Литература
1. Abdelmoamen A.A Modular Approach to Programming Multi-Modal Sensing Applications
// 2018 IEEE International Conference on Cognitive Computing (ICCC), (San Francisco, 02-07 July
2018). San Francisco, CA, USA, 2018. Pp. 91-98. https://doi.org/10.1109/ICCC.2018.00021
2. Seok K.H., Kim Y.S. A Study on Implementation of Interactive Web 3D Virtual Environment
Using O3D // 2011 International Conference on Information Science and Applications (Jeju, 26-29
April 2011). Korea (South), 2011. Pp. 1-4. https://doi.org/10.1109/ICISA.2011.5772378
3. Harshfield N., Chang D.-Je., Rammohan A Unity 3D Framework for Algorithm Animation
// 2015 Computer Games: AI, Animation, Mobile, Multimedia, Educational and Serious Games
(CGAMES) (Louisville, 27-29 July 2015). Louisville, KY, USA, 2015. Pp. 50-56.
https://doi.org/10.1109/CGames.2015.7272955
4. Hayashi M., Bachelder S., Nakajima M. Automatic Generation of Personal Virtual Museum
// 2016 International Conference on Cyberworlds (CW) (Chongqing, 28-30 September 2016). China,
2016. Pp. 219-222. https://doi.org/10.1109/CW.2016.44
5. Wang R., Meng X., Liu Sh., Guo H., Yang Ch. Digital Media Service Oriented Digital
Museum Grid // 2009 13th International Conference on Computer Supported Cooperative Work in
Design (Santiago, 22-24 April 2009). Chile, 2009. Pp. 325-330.
https://doi.org/10.1109/CSCWD.2009.4968079
13СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
6. Guo Z. Research on Application of Digital Interactive Display Technology in Digital
Museum // 2020 International Conference on E-Commerce and Internet Technology (ECIT)
(Zhangjiajie, 22-24 April 2020). China, 2020. Pp. 54-57.
https://doi.org/10.1109/ECIT50008.2020.00020
7. Pan Z., Chen W., Zhang M., Liu J., Wu G.Virtual Reality in the Digital Olympic Museum //
IEEE Computer Graphics and Applications. 2009. Vol. 29. №5. Pp. 91-95.
https://doi.org/10.1109/MCG.2009.103
© Тарасов В.Г., Газизулин М.Р., 2024
14СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 519.682:372.8
Гибадуллин А.А.
ассистент
Нижневартовский государственный университет
г. Нижневартовск, Россия
ДЕМОНСТРАЦИЯ ВОЗМОЖНОСТЕЙ КОМАНДНОЙ ОБОЛОЧКИ BASH
В КАЧЕСТВЕ СРЕДЫ ПРОГРАММИРОВАНИЯ
Аннотация. Рассмотрен потенциал использования командной оболочки bash как
интерпретируемого языка в практическом обучении программированию на основе системы
заданий. Продемонстрировано ее применение для реализации алгоритмов следующих типов
структур: линейной, циклической и ветвящейся. Отмечены положительные стороны и
недостатки данного подхода.
Ключевые слова: Linux; алгоритмические структуры; программирование; терминал;
лабораторные работы.
Работа в разных программных средах и операционных системах требует более широкого
освоения потенциала информационных средств. Умение адаптироваться под новую среду
является тем качеством, которое необходимо в мире стремительно развивающихся
информационных технологий. В таком случае альтернативные способы будут актуальными.
Уже никого не удивит тот факт, что бывает недостаточно знания только одного языка
программирования. Точно также обучение в различных операционных системах позволит
более полно сформировать навыки, получить необходимые знания и компетенции. Вдобавок,
их уже существует большое множество. Наибольшую популярность приобрели следующие:
Windows, MacOS, Linux.
Разнообразие языков и сред разработки делает актуальным выбор подходящих из них.
На самом деле универсального решения нет и оптимальный выбор в каждой конкретной
ситуации может быть разным. Автор обращает внимание на средства, встроенные
непосредственно в операционную систему. Их отличает отсутствие необходимости установки
стороннего программного обеспечения, выполнение задач непосредственно в системе. Отсюда
следует одно из главных преимуществ: практически полное исключение проблем с
совместимостью.
Широко используемые операционные системы не ограничиваются одной лишь Windows.
Большое распространение получило семейство UNIX, которое отличает переносимость,
многозадачность и поддержка множества пользователей. Поэтому необходимость его
изучения становится очевидной при подготовке специалистов, обладающих навыками работы
с современными технологиями.
Компьютер выполняет роль исполнителя команд, а его работа осуществляется в
соответствии с операционной системой, установленной на нем. Для непосредственного
взаимодействия с пользователем используется интерфейс командной строки или терминала
[1]. В Linux, как и во множестве других Unix-систем встроена оболочка bash, которая
предоставляет функционал для решения множества задач [2]. Они не ограничиваются
15СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
администрированием системы, работой с ее приложениями, файлами и каталогами. Здесь есть
возможности для создания программ и скриптов. Такая двойственность способствует
интеграции в обучении сразу двух направлений, тем самым можно отметить ее преимущество.
К тому же оказывается возможным создание графического интерфейса для работы с bash-
скриптами [3].
Хотя bash и не считается полноценным языком программирования, он позволяет
реализовать основные структуры данных и алгоритмические конструкции. И главное, что
стоит отметить, показывает их работу непосредственно при помощи команд операционной
системе. Преимуществом является отсутствие необходимости установки программ. Все
действия происходят непосредственно через терминал, встроенный в операционную систему.
И это позволяет не просто программировать, но и взаимодействовать с компьютером через
команды. Облегчается работа с файлами и каталогами.
Анализ bash в сравнении с другими языками позволяет отметить его перспективность и
наличие положительных сторон [4]. Как и в остальных здесь поддерживаются основные
алгоритмические конструкции. Мы можем использовать основные переменные, ветвления и
циклы, осуществлять работу с файлами и каталогами. Это оказывается достаточным для
создания основных программ, используемых в обучении. Следовательно, мы отмечаем
определенный его потенциал для применения в педагогике информационных технологий. Но
относить его к полноценным языкам программирования не стоит, по большей части это сборка
готовых утилит и вызовов команд [5]. Однако автор подчеркивает его достаточность для
множества целей и задач изучения. В некоторых случаях его даже можно рассматривать как
альтернативу программированию на C, Java, JS, Pascal, Python.
Препятствием является отсутствие строгой типизации, изначально все данные
рассматриваются как строковые. Однако bash развивается, сейчас в нем предусмотрены
различные виды переменных:
-i – целые числа,
-a – массивы,
-f – функции.
Тем самым становится возможным структурное и функциональное программирование.
Однако изначальное отсутствие типизации содержит в себе как плюсы, так и минусы. С одной
стороны, код становится более гибким и легче воспринимается человеком. С другой стороны,
это способно приводить к ошибкам. Связано это с тем, что машине нужны точные команды
для выполнения, она не обладает гибким мышлением. В ряде ситуаций тип переменной для
нее должен быть точно указан.
Программирование через командную оболочку позволяет интегрировать в обучении
алгоритмизацию и программирование вместе с системным администрированием, что может
оказаться преимуществом в определенных ситуациях. В таком случае использование
алгоритмов, их реализацию на формальном языке можно связать с функционированием
компьютера, его файлов и приложений. Это целесообразно осуществлять при изучении
дисциплины «Операционные системы» при работе с Unix-подобными системами [6].
16СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Bash относится к скриптовым языкам и служит для управления заданиями в
операционной системе. А значит во время его выполнения исходный код уже существует в
системе. Отмечаются следующие особенности, преимущества и недостатки [7].
Особенности:
– необходимость интерпретатора или виртуальной машины для выполнения кода;
– нет необходимости в компиляции;
– нет потребности в описании типа переменных;
– автоматическое встроенное преобразование типов;
– большой набор встроенных типов;
– возможность обновления кода в процессе выполнения;
– взаимодействие с операционной системой через встроенный интерфейс;
– возможность интеграции в большие системы;
– синтаксис позволяет работать с операционной системой, каталогами, файлами,
другими программами.
Преимущества:
– позволяет программировать без рисков нарушения стабильной работы системы;
– скрипты интерпретируются, а не компилируются, в случае неудачи это приводит к
диагностическому сообщению, а не краху системы;
– потенциал в обеспечении кроссплатформенности;
– быстрая доработка кода;
– строка скрипта может заменить несколько строк компилируемого языка;
– удобство кода позволяет использовать его даже при низкой квалификации;
– легкость освоения скриптового языка по сравнению с остальными;
– существенная экономия времени разработчика.
Недостатки:
– в противовес экономии времени разработчика время исполнения команд
увеличивается.
Переменные делятся на три вида по области видимости:
1. Локальные – доступные только внутри конкретной программы или участка кода.
2. Переменные окружения – доступные всем программам конкретной оболочки.
3. Переменные оболочки – переменные для корректной работы самой оболочки, они
могут быть как локальными, так и относиться к окружению.
Данный язык характеризуют следующие специальные команды, которые можно
классифицировать по типам.
Средства ввода-вывода:
echo – вывод текста на стандартное устройство вывода;
printf – вывод данных в строковом виде на экран;
read – ввод данных в строковом виде.
17СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Команды ветвления:
if – выполнение действия в зависимости от булевого значения заданного условия: 1 –
истина или 0 – ложь;
case – выбор из множества альтернатив.
Работа с циклами:
while – цикл с постусловием;
for – цикл с предусловием;
select – цикл с выбором элемента из предлагаемого списка.
Как мы видим, эти команды напоминают аналогичные в других языках или полностью
совпадают с ними. В частности, обнаруживаются сходства с языком С. Стоит отметить
отсутствие специальных команд для вызова функций. В данном случае синтаксис оказывается
устроен гораздо проще: простым указанием ее имени в качестве команды.
Командная оболочка bash – органичная встроенная часть разнообразных UNIX-решений,
что во многом делает ее отличающейся от Ruby, Perl и Python [8]. У программирования в ней
есть определенное будущее. Опросы представителей ведущих отечественных компаний
показывают востребованность подготовки специалистов в данной области [9].
Таким образом, речь идет об интегрированном обучении алгоритмизации,
программированию на скриптовом языке и операционным системам. Поэтому практические и
лабораторные задания целесообразно проводить в рамках дисциплины «Операционные
системы» для следующих направлений подготовки:
– «Информатика и информационные технологии»;
– «Информационные системы и технологии»;
– «Прикладная математика и информатика»;
– «Педагогическое образование (информатика)».
Практические задания для изучения студентами основ и особенностей
программирования в bash на UNIX-подобных операционных системах направлены на
ознакомление студентов с базовыми алгоритмическими конструкциями, структурами данных
и демонстрацию возможностей работы в соответствующих системах. При условии знаний,
умений и навыков программирования на других языках они могут отметить достоинства и
недостатки интерпретатора bash с точки зрения программирования и решения
алгоритмических задач. Реализация видов и структур алгоритмов (линейные, ветвления,
циклы) происходит при решении следующих типов лабораторных работ, так как они требуют
вычислений и алгоритмических построений. Функционал для этого оказывается встроенным
в системную оболочку.
1. Задачи на ввод-вывод, работу со строками. Вывод сообщений, ввод текстовых данных,
объединение строк и т. д.
2. Вычислительные задачи с использованием арифметических операций: сложение,
вычитание, умножение, деление – целочисленное и по модулю. Работа с целыми и
вещественными числами: положительными и отрицательными, нахождение модуля и
сравнение чисел.
18СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
3. Задачи из курса алгебры. Решение уравнений по известным формулам, операции над
матрицами, использование элементарных функций, арифметических и геометрических
прогрессий.
4. Задачи из курса геометрии. Нахождение периметров, площадей фигур,
тригонометрические задачи, работа с системой координат, векторные произведения,
метрические задания.
5. Интеллектуальные игры, шашки, шахматы, составление алгоритмов поиска решения
задач. Алгоритмические и логические задачи на шахматной доске.
5. Задачи, связанные с моделированием реальных ситуаций, работа с данными,
календарем и датами.
6. Работа с файлами, каталогами, приложениями операционной системы: создание,
удаление, архивирование, сравнение, изменение свойств и характеристик, запуск, поиск,
сортировка.
7. Работа в текстовом редакторе: строковые операции, объединение текстовых файлов,
команды обработки текста.
8. Создание калькулятора с использованием уже изученных математических операций и
алгоритмов вычислений.
9. Создание логической игры. При изучении данной темы учащимся предлагается
проявить творчество и спроектировать свое собственное решение. Возможна работа в
команде.
10. Создание полезной shell-процедуры для работы в операционной системе.
Изложенный перечень тематик доказывает значительные возможности и педагогический
потенциал bash в области обучения алгоритмизации и программированию. Осуществлена их
наглядная и практическая демонстрация. Теперь они могут не только ознакомиться с новой
технологией, но и провести анализ между привычными для них языками программирования и
работой в bash. Несмотря на ограниченный функционал, набор переменных, встроенных
функций и структур данных, он оказывается достаточным для выполнения множества задач.
Происходит реализация различных алгоритмических структур: линейные алгоритмы,
ветвление на два или несколько направлений, циклы. Оказывается, возможным включение
творческих заданий.
Можно заключить, что командная оболочка bash, которая встроена в UNIX-системы,
оказывается достаточно функциональной для проведения лабораторных и практических
занятий. Она позволяет интегрировать обучение программированию и операционным
системам. Дополнительно мы отмечаем отсутствие необходимости установки специального
программного обеспечения, все оказывается встроенным изначально в системный
функционал.
19СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Литература
1. Арсеньев-Образцов С.С., Волков Е.А., Жукова Т.М. Основы работы в командной
строке операционной системы Linux: Электронный ресурс. М.: РГУ нефти и газа (НИУ) имени
И.М. Губкина, 2019. 37 с.
2. Барабанов А. Кодирование. Введение в системное программирование. Часть 3. //
Системный администратор. 2010. №1-2(86-87). С. 14-19.
3. Воробьев П.В., Слива М.В. Создание графического интерфейса для запуска bash-
скриптов // Вызовы современности и стратегии развития общества в условиях новой
реальности: Сб. мат-ов IX Международной научно-практической конференции (г. Москва, 04
июля 2022 г.). М., 2022. С. 99-104.
4. Коломыцев А.С., Вердиев О.Р. Разбор языков программирования // Инновации. Наука.
Образование. 2022. №70. С. 71-77.
5. Майоров А. На языке BASH. Особенности программирования // Системный
администратор. 2010. №12(97). С. 64-69.
6. Максюта А.А., Манохин А.П., Вахрушева Е.А. Постановка курса «Операционные
системы» в ведущих вузах // Информационные технологии в науке, промышленности и
образовании: Сб. трудов региональной научно-технической очно-заочной конференции (г.
Ижевск, 23 мая 2015 г.). Ижевск, 2015. С. 74-82.
7. Седых А. Обзор языков описания сценариев // Образование, наука, производство: VII
Международный молодежный форум (г. Белгород, 20-22 октября 2015 г.). Белгород, 2015. С.
2714-2719.
8. Сухов К. Я б в разработчики пошел. Часть 2. Профессия – программист. Разбираемся
в деталях // Системный администратор. 2013. №6(127). С. 64-67.
9. Штомпель И. Вакансия: программист под ОС Linux // Системный администратор.
2015. №5(150). С. 80-84.
© Гибадуллин А.А., 2024
20СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.4'22
Копытов П.Г.
студент
Лещенко К.Д.
канд. экон. наук, доцент
Савинская Д.Н.
ассистент
Кубанский государственный аграрный университет им. И.Т. Трубилина
г. Краснодар, Россия
ИСПОЛЬЗОВАНИЕ DOCKER В КОНТЕЙНЕРИЗАЦИИ:
ОСНОВЫ И ПРЕИМУЩЕСТВА
Аннотация. В данной статье рассмотрим популярное решение контейнеризации
приложений при помощи Docker. Вы узнаете, в чём состоят преимущества его использования,
из чего состоит платформа, как устроены образы и как они создаются. Также поговорим про
средства оркестрации контейнеров, которые пригодятся при работе с масштабными
проектами, а также об основных понятиях, связанных с данной областью.
Ключевые слова: Docker; контейнер; приложение; развертывание; управление;
системы; контейнеризация.
Контейнеризация является большим помощником в разработке больших и не очень
приложений, а также является незаменимым инструментом, ускоряющим и облегчающим
процесс разработки для разработчиков в компаниях любого масштаба.
Значительные прогрессивные приложения находятся в контейнерах –
виртуализированных средах, которые запускаются поверх ядра операционной системы
сервера. В каждом контейнере функционирует один образец приложения: в нем хранится
двоичный документ со всеми важными связями и сферой выполнения [7].
Одним из множества средств необходимых для реализации контейнеризации является
Docker, это программный продукт, предлагающий разработчикам удобный интерфейс и
гибкий функционал для реализации контейнеризации.
Контейнеризация – это процесс, в ходе которого программный код вместе со всеми
зависимостями, файлами конфигурации, а также необходимыми библиотеками операционной
системы и средой выполнения в легкий исполняемый файл. Она позволяет упростить и
частично оптимизировать процесс разработки путем решения ряда проблем, которые могут
возникнуть в практически любых компаниях.
Контейнеры представляют собой набор одного или нескольких процессов,
изолированных от остальной части системы и имеют стандартный интерфейс управления для
выполнения функций программы. Контейнер содержит в себе только те компоненты, которые
необходимы для развертывания конкретного приложения (файлы, библиотеки, инструменты).
Если сравнивать с аппаратной виртуализацией, такой подход развертывания заметно сложнее,
но он, в свою очередь, делает процесс очень экономным и практически мгновенным. Файл,
получающийся в результате контейнеризации, называется контейнером, и он может без осечек
21СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
работать в любой инфраструктуре, что позволяет решить множество проблем при разработке
продукта [6].
Далее перечислены основные понятия, без которых будет сложно разобраться в
контейнеризации:
1. Образы контейнеров: Контейнеры базируются на образах, которые определяют
содержимое контейнера и его зависимости. Образы могут быть собраны и созданы из
специальных файлов, называемых Dockerfile, или же загружены из центрального репозитория
образов.
2. Изолированная среда: Контейнеры создают изолированное окружение для
приложений, что позволяет им работать независимо и без конфликтов с другими
приложениями и системными ресурсами. Каждый контейнер имеет свои собственные
файловые системы, процессы, сетевые интерфейсы и пространства имен.
3. Переносимость: Контейнеры могут быть легко перенесены между различными
средами выполнения, такими как серверы, облака или локальные компьютеры. Образы
контейнеров предоставляют все необходимое для работы приложений, поэтому они могут
быть запущены практически в любом окружении, где установлены соответствующие средства
контейнеризации.
4. Масштабируемость: Контейнеры позволяют масштабировать приложения
горизонтально путем создания нескольких экземпляров контейнеров и их запуска на
нескольких хостах. Это позволяет обеспечить высокую доступность и производительность
при распределении нагрузки между контейнерами.
Таким образом мы даем разработчикам возможность создавать и развертывать любые
приложения быстро и что самое главное безопасно, относительно классического метода
написания кода, когда продукт разрабатывается в одной операционной среде, а потом
переносится в другую на пример для тестирования. Исходя из этого, ключевое преимущество
и по совместительству суть технологии в том, что контейнер изолирует приложение от
операционной системы, тем самым делая его автономным и позволяя работать в любой среде.
И исключает возможности появления багов и ошибок, связанных с различием, допустим,
языковых версий разных окружений что может вызвать проблемы, требующие хотя бы
времени на их решение, что недопустимо при разработке в компаниях, а в худших случаях это
может вызвать баги в программе, что приведет к еще более плохим последствиям.
Контейнеризация приложений повышает эффективность памяти, ЦП, хранилища и
переносимости, но потенциальным недостатком является отсутствие изоляции от основной
ОС. Поскольку контейнеры приложений не абстрагируются от ОС хоста – это облегчает
доступ ко всей системе [4].
Очень сокращается время необходимое для разработки приложений и облегчается
управление ими в процессе их поддержки благодаря лёгкости в настройке и изменении
конфигурации вместе с кодом приложения и удобным инструментам управления,
позволяющим быстро масштабировать инфраструктуру контейнеров. Кроме того,
фактическое отсутствие привязки контейнеров к платформе даёт огромную вариативность при
22СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
выборе или смене провайдера – вы можете запускать их без принципиальных отличий в
конечном результате на любом устройстве, предназначенном для этого.
Также к преимуществам контейнеризации можно отнести скорость запуска контейнеров
в сравнении с теми же виртуальными машинами, ведь они сами по себе требуют к ресурсам, и
содержат операционную систему целиком и, если нам нужно развернуть виртуальную
машину, необходимо обеспечить ей ядро, все необходимое пользовательское окружение и
какой-то запас вычислительных ресурсов и это все при том, что сами по себе виртуальные
машины и без установленного окружения занимают много места.
Очередным преимуществом в использовании данной технологии будет безопасность,
которую обеспечивают её механизмы, безопасность будет обеспечиваться тем, что
приложения будут изолироваться, что предотвратит проникновение вредоносного кода в
контейнеры или основную систему. В дополнении к выше сказанному есть возможность
дополнительной настройки, при которой мы будем блокировать определенные компоненты и
ресурсы для контейнера.
Docker – платформа основными задачами которой являются реализация виртуализации,
создание, управление и доставка приложений. Большинство ключевых потребностей
разработчиков покрываются за счет простоты использования данного ПО и возможности
запускать любое множество контейнеров в рамках одной системы, это положительно
сказывается на скорости тестирования продукта и на процессе его выкладывания, а также
решает проблемы с совместимостью, которые часто возникают во время рабочего процесса.
Разработчики данного продукта являются первопроходцами в своей сфере, ведь они
смоги реализовать на тот момент еще, казалось бы, невообразимый механизм, о котором мог
мечтать каждый разработчик, потому что он обеспечивал независимость приложения от
среды.
Ключевое решение, а по совместительству и основная функция Docker – это
возможность создания образов контейнеров, их суть заключается в том, что они реализуют
функцию шаблона для создания контейнеров. Взаимодействие с образами происходит
посредством Docker Hub, репозитория образов Docker или любые другие репозитории,
реализованные пользователем или компаниями разработчиками. В самом приложении Docker
взаимодействие происходит образом происходит через командную строку или при помощи
DockerCLI.
Данный продукт обеспечивает множество инструментов для управления контейнерами,
такие как масштабирование, мониторинг, резервное копирование, управление версиями и
восстановление. Также он оказывает положительное влияние на среду разработки, тем, что он
реализует среду разработки, похожую на продакшн-среду, что позволяет избежать проблем,
связанных с разницей между окружениями.
Процесс разработки, развертывания и тестирования значительно ускоряется и
упрощается благодаря использованию Docker. Также обеспечивается гибкость и
масштабируемость виртуализации, что делает его популярным решением для разработчиков,
администраторов и операционных команд. Благодаря использованию Docker разработчики
23СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
могут создавать приложения, доступные для быстрого запуска на различных платформах, что
снижает затраты на инфраструктуру и упрощает процесс развертывания и управления
приложениями.
Использование Docker для контейнеризации можно разделить на множество базовых
этапов:
Во-первых, установка Docker. Сначала необходимо установить Docker на машину, на
которой будет проходить разработка или тестирование. Docker поддерживает большинство
платформ, включая Windows, macOS и Linux. Вы можете загрузить и установить Docker с
официального веб-сайта Docker.
Во-вторых, Создание Dockerfile. Dockerfile – файл, который описывает базовые критерии
для создания образа контейнера. Образ контейнера будет содержать все необходимые
приложения для запуска. В Dockerfile вы описываете базовый образ, устанавливаете
зависимости, копируете файлы и настраиваете окружение.
В-третьих, Сборка образа. Команда “docker build” используется для сборки образа
контейнера на основе Dockerfile. Выполнив данную команду с указанием пути к Dockerfile,
Docker выполнит указанные в нем команды для сборки образа.
В-четвертых, Запуск контейнера. Команда “docker run” используется для запуска
контейнера на основе образа. Вы можете указать различные опции в команде “docker run”,
такие как проброс портов, монтирование томов и настройка переменных окружения.
В-пятых, Управление контейнерами. Docker обеспечивает набор инструкций для
манипуляций с контейнерами. В частности, инструкция “docker ps” применяется для
отображения активных контейнеров, “docker stop” используется для прекращения работы
контейнера, а “docker rm” задействуется для их удаления.
В-шестых, Использование Docker Compose. Данная технология представляет собой
механизм, назначение которого заключается в фасилитации идентификации агрегатов
контейнеризации и их коллективном управлении в рамках интегрированной структуры,
обеспечивая возможность конкретизации множественных служб в рамках уникального
конфигурационного документа и их последующего инициирования с использованием
одиночной инструкции.
В-седьмых, Работа с Docker Hub. Данная платформа представляет собой хранилище
контейнеризированных приложений, где доступна возможность обнаружения контейнерных
образов, разработанных сообществом Docker, а также публикации и эксплуатации
пользовательских образов. Docker обеспечивает функциональность для передачи и
обновления контейнерных образов через Docker Hub.
Изначальные функциональные аспекты применения Docker в сфере контейнеризации
были представлены. Тем не менее, Docker обладает расширенным спектром возможностей,
включая управление сетевыми конфигурациями, масштабирование и оптимизацию
распределения ресурсов среди контейнеров.
Docker внедряет контейнерный подход, обеспечивающий изолированность и управление
зависимостями приложений, представляя собой ключевой инструментарий для создания,
24СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
деплоя и управления программными решениями. Все индивидуальные контейнеры обладают
уникальным механизмом для исполнения кода, таким как ядро ОС, гарантируя тем самым
строгую изоляцию от прочих контейнеров и основной системы. Это способствует
исключению зависимостных коллизий в приложениях и повышает их стабильность и
безотказность.
Мобильность платформы позволяет инкапсулировать программные решения и их
взаимосвязанные компоненты в компактные виртуальные среды, оперируемые на разных
операционных системах, совместимых с Docker. Это предполагает возможность создания
приложения в одной среде и его последующего запуска в другой среде, исключая
необходимость реимплементации кода или установки дополнительных модулей.
Фасилитирует гибкую масштабируемость прикладных программ, активируя
параллельную эксплуатацию множественных контейнеризированных сущностей на единой
узловой структуре, что способствует синхронизированной обработке данных, усиливая тем
самым производительную способность и расширяемость в ответ на возрастающую
операционную нагрузку.
Docker обеспечивает инструментарий для управления доступом приложений к
системным ресурсам, включая CPU, RAM и хранилище данных, что способствует повышению
эффективности распределения ресурсов хост-системы и предупреждает проблемы, связанные
с исчерпанием памяти и перегрузками центрального процессора.
Данная технология способствует упрощению процедур пакетирования, развертывания и
управления прикладным программным обеспечением. Она включает в себя экстенсивный
комплект утилит и командных интерфейсов, облегчающих манипуляции с
контейнеризированными системами, обеспечивая интуитивное взаимодействие. Кроме того,
предоставляется обширная библиотека предварительно сконфигурированных контейнеров,
которые могут быть эффективно интегрированы в разрабатываемые программные решения.
Реплицируемость является заметной характеристикой, обеспечивающей возможность
генерации контейнерных артефактов, способных к переносу и многократному использованию.
Этот атрибут усиливает надежность и стандартизацию процедур развертывания и управления
программными средствами, ввиду гарантии эквивалентной функциональности приложения в
любой совместимой с Docker инфраструктуре.
Несомненно, перечисленные выше моменты не охватывают всю совокупность
достоинств Docker, однако они отражают основные аспекты, способствующие его широкой
популярности и активному использованию в контексте современного процесса создания
программного обеспечения.
Литература
1. Масляков С.Н., Лытнев Н.Н., Кумратова А.М. Систематическая оценка артефактов
контейнера. Интерфейс Contain4n6 // Информационное общество: современное состояние и
перспективы развития: Сб. мат-ов XV международного форума (г. Краснодар, 10-14 июля 2023
г.). Краснодар, 2023.
25СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2. Ноженко С.А., Лытнев Н.Н. Контейнеры или бессерверные вычисления //
Цифровизация экономики: направления, методы, инструменты: Сб. мат-ов V Всероссийской
научно-практической конференции (г. Краснодар, 16-21 января 2023 г.). Краснодар, 2023. С.
256-258.
3. Сальков А.А., Лытнев Н.Н., Кумратова А.М. Сравнение Kubernetes-платформы
Deckhouse с Vanilla Kubernetes // Информационное общество: современное состояние и
перспективы развития: Сб. мат-ов XV международного форума (г. Краснодар, 10-14 июля 2023
г.). Краснодар, 2023.
© Копытов П.Г., Лещенко К.Д., Савинская Д.Н., 2024
26СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.056.5
Лавров Д.Н.
канд. техн. наук, доцент
Нижневартовский государственный университет
г. Нижневартовск, Россия
Лаврова Д.Д.
студент
Омский государственный университет им. Ф.М. Достоевского
г. Омск, Россия
ПРОБЛЕМЫ ЗАЩИЩЕННОСТИ ПРОТОКОЛОВ
ЭЛЕКТРОННОГО ТАЙНОГО ГОЛОСОВАНИЯ
Аннотация. Статья рассматривает основные угрозы протоколов электронного тайного
голосования, реализованных на основе традиционных асимметричных криптографических
алгоритмов. Рассматриваются подходы позволяющие устранить уязвимости на основе
постквантовой криптографии. Представлена архитектура приложения, реализующего схему
He-Su.
Ключевые слова: электронное тайное голосование; взлом из будущего; постквантовая
криптография.
В докладе представлены обязательные требования к реализации протоколов
электронного тайного голосования [2]. Требования можно сгруппировать в обобщенные
принципы:
1. Законность:
A. Голосовать могут только наделённые таким правом.
B. Никто не может проголосовать за другого.
C. Никто не может тайно изменить чужой голос.
2. Анонимность – Никто не может узнать, как проголосовали избиратели;
3. Единственность голоса – нельзя проголосовать более одного раза;
4. Верифицируемость – голосующий может проверить, что его голос учтён и в случае,
если голос учёт неверно, может заявить об этом.
Часто добавляют два дополнительных правила:
5. Открытость – дополняет Верифицируемость и означает, что любой знает кто
голосовал, а кто не участвовал в голосовании.
6. Голосующий может изменить свое мнение до объявления результатов – правило
спорное.
В настоящее время существует несколько протоколов [1; 5], удовлетворяющих
перечисленным выше принципам. Протоколы, удовлетворяющие большинству требований –
это протоколы Двух агентств, ANDOS, Fudjioka-Okamoto-Ohta и He-Su [3; 4] (см. табл. 1). Их
реализации основываются на традиционных асимметричных схемах слепой подписи и
шифрования.
Таким образом, угрозы асимметричной криптографии становятся и угрозами для
протоколов электронного тайного голосования. Основной угрозой асимметричным
27СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
криптографическим системам является так называемый «взлом из будущего». Питер Шор в
своей статье представил алгоритм для квантового компьютера, позволяющий решать
проблемы факторизации целых чисел и дискретного логарифмирования за полиномиальное
время [6]. В настоящее время между гигантами ИТ-индустрии ведется гонка за квантовое
превосходство. Первый кто реализует квантовый компьютер и сможет решать на нем задачи
факторизации больших целых чисел автоматически получит расшифровку сеансовых ключей
перехваченных ранее сообщений и сможет прочесть их. Такой взлом может разрушить
анонимность и другие вышеприведенные обобщенные принципы тайного электронного
голосования.
Таблица 1
Сравнительная таблица наиболее известных протоколов тайного голосования
Протокол двух Fudjioka-
ANDOS He-Su
агентств Okamoto-Ohta
Законность + + + +
Анонимность + + + +
Единственность + + + +
Верифицируемость + + + +
Открытость - - - -
Возможность + + - +
переголосования
Существует два возможных выхода из сложившейся ситуации:
1) переход к квантовой криптографии;
2) разработка, реализация и стандартизация алгоритмов постквантовой криптографии.
К сожалению, в квантовой криптографии разработан и физически реализован только
один алгоритм из семейства протоколов квантового распределения ключей (BB84). Кроме
того, данный тип криптографии требует квантового канала передачи информации, что сужает
выбор среды передачи данных до линий оптоволоконна. Тем не менее, защищенность данного
протокола считается одной из наиболее высоких.
Подход постквантовой криптографии состоит в выборе криптографических алгоритмов
сложность взлома которых трудна как для обычных компьютеров, так и для квантовых.
Национальный институт стандартов и технологий (https://clck.ru/39p5Sx) (NIST, USA) c
2016 года проводит конкурс по отбору постквантовых криптографических алгоритмов. В
первом туре было представлено 69 алгоритмов. Из них были отобраны 3 схемы электронной
подписи: CRYSTALS-Dilithium и Falcon, построены на основе целочисленных решёток;
SPHINCS+, строится на основе хэш-функций. NIST планирует завершить работу 2025 году.
Аналогичная работа ведется и в России: НПК «Криптонит» представил свою разработку
постквантовой электронной подписи «Шиповник» (https://clck.ru/39p64S).
Вопросы реализации и надежности вариантов постквантовой слепой электронной
подписи недостаточно изучены, но есть основания полагать, что к 2025 году, плановому году
завершения работ по стандартизации постквантовых алгоритмов, ситуация изменится. В
ожидании окончания этого процесса усилия необходимо сконцентрировать на разработке
универсальной расширяемой программной библиотеки с абстрактными интерфейсами,
28СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
которая позволила бы описать ключевые алгоритмы электронного тайного голосования, а при
принятии новых постквантовых стандартов произвести переход на них.
Модель архитектуры такой библиотеке может быть реализована разными способами и
зависит от специфики конкретного языка программирования. Принято перед написанием
программного кода провести этапы анализа и проектирования архитектуры системы
(библиотеки). Так для объектно-ориентированных языков программирования архитектура
может быть описана на языке UML (Unified Modeling Language).
Рассмотрим, как может быть представлена архитектура такой библиотеки на примере
схемы электронного тайного голосования He-Su [4]. В прецеденте схемы три основных
исполнителя (актора в терминологии UML):
○ голосующий (V – Voter) – имеющий право голоса избиратель, в дальнейшем просто
избиратель;
○ избирательная комиссия, валидатор, регистратор, орган исполнительной власти;
○ (A – Authority) – тот, кто авторизует (регистрирует) избирателей, имеющих право
голоса; в дальнейшем будем использовать термин регистратор;
○ счётная комиссия (T – Tallier) кто получает избирательные бюллетени, проверяет
подлинность избирательных бюллетеней и публикует результаты выборов.
Схема состоит из трёх протоколов [4]:
○ протокол регистрации избирателей;
○ протокол подтверждения ключей голосования;
○ протокол подсчета голосов и публикации результатов.
Рассмотрим каждый из протоколов более подробно
Протокол регистрации
Протокол регистрации используется для предоставления полномочий избирателям для
того, чтобы избиратели могли зарегистрироваться для участия в выборах. Ниже описаны
действия избирателя и регистратора в этом протоколе.
Избиратель V (Voter):
1. Генерирует пару ключей, D , E , где D – ключ голосования (закрытый ключ),
v v v
используемый для подписи бюллетеня и E – ключ для подсчёта голосов (открытый ключ),
v
который должен быть “слепо” подписан регистратором.
2. Генерирует случайное число R.
3. Вычисляет: E (R)*(h(E )), и отправляет его регистратору A.
a v
Регистратор A:
1. Проверяет право голосования избирателя V.
2. Если V имеет право, то подписывает данные, полученные от V:
D (E (R)*(h(E )))
a a v
и возвращает подписанные данные V:
D (E (R)*(h(E ))) → R*D (h(E )).
a a v a v
29СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Избиратель V (Voter):
1. Удаляет R из R*D (h(E )):
a v
R*D (h(E ))*R-1 → D (h(E ))
a v a v
2. Проверки:
h(E ) = = E (D (h(E )))
v a a v
Если равенство выполняется, V может быть уверен, что D (h(E )) является подписью его
a v
ключа подсчёта голосов E . По истечении срока регистрации регистратор A публикует список
v
всех зарегистрированных избирателей. Отметим, что для корректности работы протокола
требуется, чтобы операции выставления подписи и маскирования/демаскирования с помощью
R были коммутативными.
Протокол подсчёта ключей
В этом протоколе избиратели предоставляют счётной комиссии (T) свои ключи для
подсчета голосов с прикрепленной подписью, слепо подписанной регистратором(A). Ключи
для подсчёта голосов будут использоваться для проверки действительности бюллетеней.
Избиратель V:
1. Отправляет счётной комиссии T свой открытый ключ для подсчёта голосов,
подписанный регистратором: (E , D (h(E )).
v a v
Счётная комиссия Т:
1. Проверяет подлинность ключа счета V путем вычисления:
h(E ) == E (D (h(E )))
v a a v
2. Если равенство выполняется, ключ для подсчёта голосов E авторизован.
v
По истечении крайнего срока подачи счётная комиссия публикует все авторизованные
счётные ключи избирателей.
Протокол подсчёта голосов и публикации результатов голосования
Избиратель V:
1. Отправляет в счётную комиссию Т:
( E , K (B ), D (h(K (B ))) ),
v v v v v v
где K (B ) – зашифрованный на симметричном ключе избирателя бюллетень с его
v v
волеизъявлением;
D (h(K (B ))) – электронная подпись зашифрованного бюллетеня.
v v v
Счётная комиссия Т:
1. Проверяет находится ли ключ E в списке авторизованных ключей для подсчёта
v
голосов, затем проверяет подлинность подписи D (h(K (B ))) зашифрованного бюллетеня
v v v
K (B ) путем сравнения:
v v
E (D (h(K (B )))) = = h(K (B )).
v v v v v v
2. Если E находится в списке авторизованных ключей для подсчёта голосов и равенство
v
справедливо для всех избирателей, счётная комиссия публикует ключи и зашифрованные
бюллетени всех избирателей для проверки наблюдателями за голосованием (в том числе
самими избирателями):
(E , K (B ), D (h(K (B )))).
v v v v v v
30СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Избиратель V:
1. Проверяет, был ли его зашифрованный бюллетень включен в опубликованный список
для голосования. Если нет, то может исправить это, опубликовав: (E , K (B ), D (h(K (B )))
v v v v v v
избирательному сообществу.
2. Отправляет Т тройку (E , K , D (h(K )) ),
v v v v
где K – симметричный ключ, на котором был зашифрован бюллетень избирателя; D (h(K )) –
v v v
его электронная подпись.
Счётная комиссия Т:
1. Проверяет подлинность K путем вычисления:
v
E (D (h(K ))) == h(K )
v v v v
2. Если K действителен, то счётная комиссия расшифровывает K (B ) следующим
v v v
образом:
K -1(K (B )) → B
v v v v
3. Подсчитывает голоса и публикует все аутентифицированные данные:
(B , K (B ), K , D (h(K (B ))), D (h(K )), E )
v v v v v v v v v v
для всеобщей проверки.
Проведя анализ всех трёх протоколов, видим, что основными артефактами разработки
должны стать: система асимметричного шифрования для реализации электронно-цифровой
подписи, система симметричного шифрования для шифрования бюллетеней, алгоритм
хэширования, используемый в алгоритме электронно-цифровой подписи.
Существует большое количество готовых реализаций всех трёх артефактов, но проблема
заключается в наличии разных интерфейсов и допущений при реализации упомянутых
алгоритмов, а также разных представлений структур данных, например, для хранения ключей
шифрования. Таким образом, перед программистами, которые возьмутся за реализацию
алгоритма He-Su, стоит задача скрыть используемые существующие реализации алгоритмов
шифрования и хэширования за программными абстрактными интерфейсами, что позволит в
будущем перейти и на постквантовые алгоритмы.
Результатом анализа понятий предметной области при описании схемы Не-Su стала
следующая объектно-ориентированная архитектура, представленная на диаграмме классов
UML (рис.).
Схема представляет только те статические артефакты модели, которые связаны с
сокрытием реализации конкретных криптографических методов, используемых в алгоритме
электронного тайного голосования. Сделано это за счет использования интерфейсов,
абстрактных классов и полиморфизма.
31СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. Модель сокрытия реализаций криптографических алгоритмов в схеме He-Su
Литература
1. Бортник Д.А., Кротова Е.Л., Савочкина А.А. Классификация реализаций протоколов
тайного голосования // Вестник УрФО. 2016. №4(22). С. 21–25.
2. Лаврова Д.Д. Требования к реализации электронного тайного голосования //
Молодёжь третьего тысячелетия: Сб. научных статей XLVII региональной студенческой
научно-практической конференции (г. Омск, 01-15 апреля 2023 г.). Часть 1. Омск, С. 654-656.
EDN ZGWNLZ.
3. Fudjioka A.A., Okamoto T., Ohta K. Practical Secret Voting Scheme for Large Scale
Elections // In Advances in Cryptology–AUSCRYPT'92: Workshop on the Theory and Application
of Cryptographic Techniques Gold Coast, Queensland (Australia, December 13–16, 1992
Proceedings 3). Springer Berlin Heidelberg. 1993. Pp. 244-251. https://clck.ru/39YiM4
4. He Q., Su Z. A New Practical Secure e-Voting Scheme. 1998. https://clck.ru/39YiSg
5. Mavroeidis V., Vishi K., Zych M.D., Jøsang A. The Impact of Quantum Computing on
Present Cryptography // International Journal of Advanced Computer Science and Applications.
2018. Vol. 9. №3. Pp. 405-414.
6. Shor P. Polynomial-Time Algorithms for Prime Factorization and Discrete Logatithms on a
Quantum Computer // Society for Industrial and Applied Mathematics. 1997. №26. P. 1484.
© Лавров Д.Н., Лаврова Д.Д., 2024
32СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.438
Лемиш Д.В.
аспирант
Нижневартовский государственный университет
г. Нижневартовск, Россия
ПРАКТИЧЕСКОЕ ПРИМЕНЕНИЕ РАСШИРЕННОЙ ФОРМЫ БЭКУСА-НАУРА
НА ПРИМЕРЕ ОПИСАНИЯ БАЗОВЫХ ВОЗМОЖНОСТЕЙ ЯЗЫКА ОПИСАНИЯ
ВЫЧИСЛИТЕЛЬНЫХ АЛГОРИТМОВ «ОВАЛ»
Аннотация. В рамках настоящего исследования рассматриваются базовые понятия
теории формальных языков и грамматик, необходимые для описания правил грамматики
формального компьютерного языка. Также описываются основные элементы расширенной
формы Бэкуса-Наура, как одного из методов теории формальных языков и грамматик,
применяемого, непосредственно, при описании формальной грамматики языка. Результаты
практической деятельности отражают опыт формулирования правил грамматики
компьютерного языка.
Ключевые слова: компьютерный язык; расширенная форма Бэкуса-Наура; правило;
грамматика; язык описания вычислительных алгоритмов.
Существование, в настоящее время, обширного разнообразия компьютерных языков,
обусловлено множеством факторов, к числу которых, помимо прочего, можно отнести
непрерывное совершенствование методов хранения, обработки и передачи информации с
целью решения актуальных задач в узконаправленных сферах профессиональной
деятельности человека. Изучая вопросы, тесно связанные с компьютерными языками, часто
можно встретить отождествление данного понятия с понятием языка программирования,
однако, на текущем этапе развития информационных технологий, подобное суждение можно
считать устаревшим ввиду значительного расширения спектра решаемых, при помощи
компьютерных языков, проблем. Так, на сегодняшний день, помимо языков
программирования, применяемых, непосредственно, при написании исходного кода
компьютерных программ, существуют: языки разметки, применяемые с целью
форматированного вывода предоставляемого пользователям контента; языки запросов,
предназначенные для обращения к базам данных; скриптовые языки (или языки сценариев),
описывающие, в более компактной по сравнению с языками программирования форме,
алгоритмы обработки информации; языки описания аппаратуры, применяемые для описания
аппаратных компонентов вычислительных систем; протоколы передачи данных,
регламентирующие правила обмена информацией между вычислительными системами;
предметно ориентированные языки, применяемые для решения узкого спектра задач в
конкретной предметной области (https://clck.ru/39YjbC).
В текущих условиях мировой экономики, в связи с существующими ограничениями,
накладываемыми на использование иностранного программного обеспечения, возникает
острая потребность в разработке отечественных программных продуктов с целью обеспечения
информационной безопасности российских компаний, снижения зависимости от иностранных
производителей и обеспечения суверенного развития государства. Определенные категории
33СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
программного обеспечения, подлежащего замещению, реализуют собственные компьютерные
языки, которые, в свою очередь, также требуют отечественной адаптации. Так, например,
пакет прикладных математических программ Scilab, предназначенный для проведения
инженерных и научных расчетов, реализует одноименный высокоуровневый численно
ориентированный язык программирования, применяемый для описания алгоритмов
математических расчетов. Замещение подобного программного обеспечения в
производственной и научной сферах деятельности, посредством разработки отечественного
обработчика вычислительных алгоритмов «ОВАЛ», основанного на одноименном языке
описания вычислительных алгоритмов, рассматриваемого в рамках настоящего исследования,
позволит, в значительной степени, снизить зависимость российских организаций от
иностранного программного обеспечения в данных сферах деятельности, что обосновывает
актуальность темы исследования [4].
Цель исследования заключается в получении теоретических знаний и практического
опыта описания грамматики компьютерного языка при помощи расширенной формы Бэкуса-
Наура. Для достижения поставленной цели необходимо выполнить следующие задачи:
1. рассмотреть основные элементы теории формальных языков и грамматик;
2. рассмотреть методологию применения расширенной формы Бэкуса-Наура в
проектировании компьютерных языков;
3. провести эксперимент по описанию грамматики численно ориентированного языка
описания вычислительных алгоритмов на примере проектирования его базовых
возможностей.
Объектом исследования выступает теория формальных языков и грамматик. Предметом
исследования является изучение методологии применения расширенной формы Бэкуса-Наура
в проектировании компьютерных языков.
Методология исследования основана на анализе и синтезе обширной базы теоретических
сведений, освещающих вопросы проектирования и разработки компьютерных языков, а также
на эксперименте по применению расширенной формы Бэкуса-Наура в проектировании
компьютерного языка.
Анализируя открытые источники информации и научные труды авторов,
рассматривающих вопросы, касающиеся терминологии компьютерных языков, можно сделать
вывод о том, что в настоящее время не существует единого общепринятого определения
данного понятия. С одной стороны, термин «Компьютерный язык» употребляют для описания
какого-либо языка программирования, сужая, тем самым, его смысл. С другой стороны,
чрезмерно абстрагируясь от данного термина, компьютерный язык рассматривается в качестве
искусственного языка, предназначенного для коммуникации человека с электронно-
вычислительной техникой. Синтезируя изученную информацию, можно определить
компьютерный язык, как формальный язык, применяемый в области компьютерных
технологий с целью решения задач при помощи электронно-вычислительной техники,
оперирующий стандартизированными в рамках данного языка терминами и конструкциями,
34СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
обладающий собственным алфавитом и семантикой, и подчиняющийся определенным в
рамках данного языка правилам грамматики [1; 2].
Изучением методов описания компьютерных языков занимается научное направление на
стыке математики и информатики, известное под названием теория формальных языков и
грамматик. Одним из ключевых средств описания формального языка, здесь,
непосредственно, является грамматика – система правил, которые описывают способы
создания строк из символов алфавита. Грамматика обозначается как G = (V,Σ,S,P), где V –
множество нетерминальных символов, Σ – множество терминальных символов, S – начальный
символ, P – правила вывода (https://clck.ru/39YjeS).
В контексте теории формальных языков и грамматик, терминальные символы
(терминалы) представляют собой элементы, которые непосредственно встречаются в строках
языка. Например, в языке арифметических выражений, терминальными символами могут
выступать цифры, знаки арифметических операций, скобки и т.д. Нетерминальными
символами являются конструкции, которые не встречаются в строках языка и используются
для описания его структуры. Например, в указанном выше языке арифметических выражений
нетерминальными символами могут выступать строки: «произведение», «частное», «сумма»,
«разность» и т. д. Таким образом, терминальные символы являются конечными элементами
последовательности объектов, которые могут быть изменены с помощью правил грамматик, в
отличии от нетерминальных символов, которые могут быть заменены группами терминальных
символов и по своей сути являются синтаксическими переменными.
Начальным символом, в теории формальных языков и грамматик, является символ, с
которого начинается строка в рассматриваемом языка. Начальный символ играет важную роль
указателя на то, с какого символа нужно начинать анализ строки, ведь при его отсутствии
результат анализа может оказаться некорректным т.к. становится неясно, с какого места в
строке необходимо начинать анализ. По определению начальный символ не может
встречаться в правой части любого правила грамматики, так как это означало бы, что он может
быть выведен из самого себя, что противоречит определению грамматики. Таким образом,
начальный символ принадлежит множеству нетерминальных символов.
Правила вывода, в теории формальных языков и грамматик, являются определениями
того, как строятся строки в языке, порождаемом данной грамматикой и имеют вид A → α, где
A – нетерминальный символ, α – последовательность терминальных и нетерминальных
символов. Процесс вывода начинается с определения начального символа S, после чего
следует замена подстроки, соответствующей левому символу правила на его правую часть.
Процесс продолжается до тех пор, пока все нетерминальные символы не будут заменены на
терминальные. Например, для грамматики G = ({S,A},{a},S,P), где P = {S → A;A → a},
процесс вывода может выглядеть следующим образом: S → SAA → aaa.
Определение синтаксиса формальных языков возможно благодаря методам,
содержащимся в теории формальных языков и грамматик. Одним из таких методов является
расширенная форма Бэкуса-Наура (РБНФ), предложенная небезызвестным швейцарским
учёным и специалистом в области информатики – Никлаусом Виртом. Данный метод
35СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
основывается на последовательном определении одних категорий языка через другие.
Ключевым отличием РБНФ являются более компактные и емкие конструкции, позволяющие
упростить и сократить объем описания языка, сохраняя, при этом, ту же степень его
выразительности. В настоящее время существует множество интерпретаций РБНФ, однако
официальным стандартом является ISO/IEC 14977 (3; https://clck.ru/39YjeS;
https://clck.ru/39Ymb8).
Аналогично штатной форме Бэкуса-Наура, её расширенный вариант представляет собой
набор правил грамматики, определяющих отношения между терминальными и
нетерминальными символами. Данные правила имеют вид: «идентификатор = выражение»,
где идентификатор – нетерминальный символ, а выражение – соответствующая правилам
РБНФ комбинация терминальных и нетерминальных символов. Полным описанием
грамматики в РБНФ считается набор правил, последовательно определяющих все
нетерминальные символы таким образом, что каждый из них может быть сведен к комбинации
терминальных символов посредством рекурсивного применения правил. При этом, в РБНФ не
регламентируется порядок записи правил.
К числу основных выражений РБНФ относятся: конкатенация, выбор, условное
вхождение, повторение, группировка.
Конкатенация представляет собой операцию объединения объектов (обычно строк и
символов) и обозначается знаком запятой. Примером конкатенации в РБНФ может служить
правило: «А = Б, В, Г», в соответствии с которым, нетерминальный символ «А» представляет
собой строку, составленную при помощи объединения нетерминальных символов «Б», «В» и
«Г».
Выбор представляет собой операцию, в соответствии с которой, нетерминальный
символ, располагаемый в левой части правила может стать одним из перечисленных в правой
части правила элементов. Примером выбора в РБНФ может служить правило: «А = “А” | “а”»,
в соответствии с которым, нетерминальный символ «А» может стать либо прописной, либо
строчной буквой «А».
Условное вхождение представляет собой операцию выделения необязательных
элементов выражения, в соответствии с которым, нетерминальному символу, располагаемому
в левой части правила, ставится в соответствие элемент из правой части правила, заключенный
в квадратные скобки, что означает присутствие данного элемента в единственном экземпляре,
либо его отсутствие. Примером условного вхождения может служить правило: «А = [Б]», в
соответствии с которым, нетерминальный символ «А» может представлять собой пустой
элемент, либо нетерминальный символ «Б».
Повторение представляет собой операцию конкатенации любого числа элементов,
располагаемых в правой части правила, заключенных в фигурные скобки. Примером
повторения может служить правило «А = {“а”}», в соответствии с которым нетерминальный
символ «А» может представлять собой пустой элемент, либо результат конкатенации любого
числа букв «а».
36СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Группировка не относится к числу основных операций РБНФ и применяется в тех
случаях, когда необходимо сформировать сложное выражение. Так, например, в соответствии
с правилом «А = (Б, В) | (Г, Д)», нетерминальный символ «А» может являться строкой,
составленной при помощи нетерминальных символов «А» и «Б», либо строкой, составленной
при помощи нетерминальных символов «В» и «Г» (https://clck.ru/39YjeS).
Применяя изложенные выше положения РБНФ произведем описание базовых
возможностей языка «ОВАЛ». Ввиду того факта, что данный язык ориентирован на
Российский рынок было принято решение, в соответствии с которым, алфавит языка будет
включать в себя буквы исключительно русского алфавита. Запись данного правила
представлена на рисунке 1.
Рис. 1. Описание нетерминального символа «Буква»
Известно, что целое число может обладать значением 0, но не может начинаться с нуля, в
связи с чем необходимо определить нетерминальный символ как 0, либо как одну из цифр,
принадлежащих множеству натуральных чисел в диапазоне от 1 до 9 (в соответствии с
определением понятия цифры). Таким образом, определение нетерминального символа
«цифра» в языке «ОВАЛ» устанавливается двумя правилами, представленными на рисунке 2.
Рис. 2. Описание нетерминального символа «Цифра»
С целью осуществления базовых арифметических операций, таких как сложение,
вычитание, умножение и деление, в языке необходимо предусмотреть символы данных
операций. Правило, определяющее символы арифметических операций представлено на
рисунке 3.
Рис. 3. Описание нетерминального символа «ЗнакАрифОпер»
Арифметические операции, описанные выше, оперируют числами, составляемыми при
помощи цифр. Известно, что числа могут быть как целыми, так и дробными. На начальном
этапе проектирования языка «ОВАЛ» было принято решение о том, что числовой тип данных
будет содержать в себе обе категории чисел, однако, при описании данной особенности
37СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
необходимо учесть тот факт, что в отличии от целых чисел, дробные числа могут начинаться
с нуля и принимать, например, такие значения, как: 0.5, 0.025, 0.00125 и т.д. Правило,
определяющее множество всех возможных, в рамках данного языка, чисел представлено на
рисунке 4.
Рис. 4. Описание нетерминального символа «Число»
Неотъемлемой частью любого языка, также являются строки (строковые значения или
литералы). В общем случае строка представляет собой последовательность слов, которые, в
свою очередь, составляются из символов языка. В рамках литерала символы могут являться
как буквами, так и цифрами, знаками препинания, специальными символами и т.д. Для
отделения литерала от множества нетерминальных символов, строка, представляющая данный
литерал, заключается в двойные кавычки. Таким образом, для описания литерала необходимо
описать множество символов, из которых данный литерал может быть составлен, заключенное
в двойные кавычки. Правила описания литералов и их символов отражены на рисунке 5.
Рис. 5. Описание нетерминальных символов «ЛитСимвол» и «Литерал»
С целью реализации возможности осуществления арифметических операций, символы
которых отражены на рисунке 3, необходимо описать правила построения арифметических
выражений. В данном случае выражение определяется операцией, связывающей два операнда.
При этом, каждый из операндов может представлять собой какое-либо число или результат
вычисления другого арифметического выражения. Таким образом, необходимо предусмотреть
возможность рекурсивного применения правила для построения сложных выражений.
Описание данного правила представлено на рисунке 6.
Рис. 6. Описание нетерминальных символов «АрифОперация» и «АрифОперанд»
Выделение отдельной категории для цифр, используемых в арифметических операциях
необходимо с целью дальнейшего расширения возможностей языка. Так, например, в
дальнейшем, помимо чисел, нетерминальный символ «операнд» может представлять собой
значение, хранимое в переменной.
38СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
К числу важнейших возможностей языка также относится возможность формирования
строк и предложений из литералов языка, что по сути является результатом их конкатенации.
Правило конкатенации литералов представлено на рисунке 7.
Рис. 7. Описание нетерминального символа «Конкатенация»
Сформированные правила грамматики языка «ОВАЛ», уже на начальном этапе
предоставляют возможность описания исходного кода простейшей программы, реализующей
вычисление арифметических операций и конкатенацию строк. Полное описание полученной
грамматики языка «ОВАЛ» представлено в приложении 1. Рассмотрим пример применения
правил данной грамматики в формировании арифметической операции (0.012 + 5.2) * 8, разбор
которой представлен на рисунке 8.
Рис. 8. Разбор строки арифметической операции
В приведенном примере исходная строка (0.12 + 5.2) * 8 принадлежит языку «ОВАЛ» и
является нетерминальным символом «АрифВыражение», состоящим из нетерминальных
символов «АрифВыражение», «ЗнакАрифОпер» и «АрифОперанд», что соответствует
правилу определения арифметического выражения.
Нетерминальный символ «АрифВыражение», располагаемый в левой части, также в
соответствии с правилом определения арифметического выражения, состоит из символа
открывающей скобки, нетерминального символа «Число», располагаемого в левой части,
нетерминального символа «ЗнакАрифОпер», нетерминального символа «Число»,
располагаемого в правой части и символа закрывающей скобки. Нетерминальный символ
«Число», располагаемый в левой части данного арифметического выражения, соответствует
39СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
правилу определения числа и состоит из символа 0, располагаемого на первой позиции,
символа точки и множества нетерминальных символов «Цифра», каждый из которых
представляет собой нетерминальный символ «НатурЦифра». Нетерминальный символ
«Число», располагаемый в правой части также соответствует правилу определения числа и
состоит из нетерминального символа «Цифра», символа точки и нетерминального символа
«Цифра». Правая часть исходного арифметического выражения представляет собой
нетерминальный символ «АрифОперанд», который, в свою очередь, является
нетерминальным символом «НатурЦифра».
В результате проведенного исследования были рассмотрены основные элементы теории
формальных языков и грамматик, которые были применены при описании базовых правил
грамматики языка описания вычислительных алгоритмов «ОВАЛ». В результате
эксперимента удалось сформировать грамматику формального компьютерного языка и
провести синтаксический разбор предложения, который показал, что анализируемая строка
принадлежит проектируемому языку. Полученные результаты являются фундаментом
дальнейших исследований, связанных с разработкой языка «ОВАЛ» и будут применены в
дальнейшем при разработке отечественного обработчика вычислительных алгоритмов.
Литература
1. Макрогуз Е.Д. Понятие компьютерного языка // Евразийский Союз Ученых. 2015. №
7-5(16). С. 54-55
2. Комлева И.Л. Принципы формирования русской компьютерной терминологии:
Автореф. дис. … канд. филол. наук. М., 2006. 26 с.
3. Расширенная форма Бэкуса-Наура. Синтаксическая нотация. https://clck.ru/39YmpY
4. Руководство по работе с пакетом SCILAB. https://clck.ru/39Ymg6
© Лемиш Д.В., 2024
40СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.514
Катермина Т.С.
канд. техн. наук, доцент
Севастьянов М.А.
студент
Нижневартовский государственный университет
г. Нижневартовск, Россия
РАЗРАБОТКА ПОЛЬЗОВАТЕЛЬСКОГО ИНТЕРФЕЙСА НА ЯЗЫКЕ XAML
(НА ОСНОВЕ WINDOWS PRESENTATION FOUNDATION)
Аннотация. В статье рассматривается процесс разработки пользовательского
интерфейса на декларативном языке eXtensible Application Markup Language (XAML),
используемого для разметки пользовательского интерфейса и пользовательских элементов
управления в Windows Presentation Foundation (WPF), основанного на языке XML. Статья
включает в себя подробное рассмотрение процесса разработки пользовательского интерфейса
на языке XAML, начиная с описания структуры языка и особенностей его синтаксиса,
рассмотрены особенности разметки интерфейса при помощи сетки, а также определение
пользовательских стилей.
Ключевые слова: пользовательский интерфейс; eXtensible Application Markup Language
XAML; Windows presentation foundation; WPF.
Windows Presentation Foundation является мощной технологией для разработки
пользовательского интерфейса на платформе .NET. Она предлагает разработчикам широкие
возможности для создания современных, интерактивных и эстетически привлекательных
приложений на основе языка разметки XAML, интегрированного с языком программирования
C#.
Благодаря XAML, разработчики могут легко разделять дизайн и логику приложения, что
упрощает командную работу и позволяет дизайнерам и разработчикам сосредотачиваться на
своих специфических областях. Это также способствует лёгкости тестирования и поддержки
кода.
Одной из основных причин выбора WPF для разработки пользовательского интерфейса
является гибкость и мощность языка разметки XAML. XAML позволяет описывать интерфейс
приложения в виде разметки документа, используя декларативный синтаксис, похожий на
XML. Это делает процесс разработки пользовательского интерфейса интуитивно понятным и
удобным.
XAML позволяет разработчикам создавать графические элементы интерфейса, такие как
кнопки, текстовые поля, изображения, списки и другие, и стилизовать их с помощью
различных свойств, анимации и шаблонов. Это даёт разработчикам полный контроль над
внешним видом и поведением элементов интерфейса, позволяя создавать уникальные и
привлекательные пользовательские интерфейсы.
Ещё одним преимуществом XAML является его интеграция с языком программирования
C#. Разработчики могут использовать связывание данных для связи элементов интерфейса с
данными из модели приложения, а также использовать события и команды для обработки
41СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
пользовательского взаимодействия. Это позволяет создавать динамические интерфейсы,
которые реагируют на ввод пользователя и обновляются с помощью обновления данных.
WPF также обладает множеством встроенных элементов управления (controls), которые
покрывают широкий спектр потребностей при создании пользовательского интерфейса. Они
предлагают функциональность, такую как раскладка элементов, прокрутка, валидация данных
и другие, что позволяет разработчикам сосредоточиться на бизнес-логике приложения, не
тратя много времени на реализацию базовых элементов интерфейса с нуля.
Более того, WPF обладает возможностью встраивать визуальные элементы, преобразуя
их в 3D объекты с помощью класса «System.Windows.Media.Media3D». Это позволяет
создавать трёхмерные визуализации и эффекты, что особенно полезно в сферах разработки
игр, визуализации данных и архитектурного моделирования.
Наконец, WPF поддерживает ресурсы стилей и шаблонов, что позволяет разработчикам
создавать многократно используемые элементы управления, эффективно организуя дизайн
приложения и обеспечивая его согласованный внешний вид.
В целом, выбор WPF для разработки пользовательского интерфейса на языке XAML и
на основе Windows Presentation Foundation может существенно облегчить процесс создания
современных, гибких и привлекательных пользовательских интерфейсов для .NET
приложений, исключая необходимость создания элементов интерфейса с нуля и предлагая
широкие возможности по кастомизации и дизайну.
Принцип построения кода для языка разметки XAML в WPF основан на использовании
тегов, элементов и атрибутов для описания структуры, и внешнего вида элементов
пользовательского интерфейса. Вот основные принципы и синтаксис языка XAML:
 корневой элемент – весь код XAML размещается внутри одного корневого элемента,
обычно «Window» для главного окна приложения или «UserControl» для пользовательского
элемента управления;
 пространства имён – прежде чем начать описывать элементы интерфейса, нужно
указать пространство имён WPF, используя атрибут xmlns:
«xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"»;
 элементы интерфейса –внутри корневого элемента размещаются другие элементы,
такие как кнопки, метки, текстовые поля и т.д. Они описываются с помощью соответствующих
тегов. Например, «Button» для кнопки и «TextBox» для текстового поля;
 атрибуты – каждый элемент может иметь атрибуты, которые определяют его
свойства. Атрибуты указываются в открывающем теге элемента и задаются в формате
«имяАтрибута=значение». Например, Content="Нажми меня" задаёт текст на кнопке;
 значения свойств – значения свойств могут быть простыми (например, строка или
число) или ссылаться на другие ресурсы или стили. Значения, содержащие пробелы, должны
быть заключены в двойные кавычки. Например, Background="Yellow" для установки фона
элемента;
42СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
 вложенные элементы – элементы могут быть вложенными друг в друга, образуя
древовидную структуру. Например, «Border» может содержать внутри себя текстовый блок
«TextBox», чтобы расположить строку ввода внутри прямоугольника.
Вот примеры реализации описания простейших управляющих элементов
пользовательского интерфейса в XAML:
Рис. 1. Добавление кнопки в редакторе
В этом примере создаётся кнопка с надписью «Нажми меня», с отступами слева и справа
по 10 пикселей. При нажатии на кнопку вызывается обработчик события «Button_Click».
Рис. 2. Добавление строки ввода в редакторе
В этом примере создаётся текстовое поле с шириной 200 пикселей и высотой 30
пикселей. В поле по умолчанию отображается текст «Введите текст».
Рис. 3. Добавление панели вкладок в редакторе
В этом примере создаётся панель вкладок с двумя вкладками, с автовыравниванием по
центру.
Основными элементами для разметки элементов интерфейса являются следующие
инструменты:
 window (Окно) – окно приложения, может содержать практически все остальные
элементы WPF;
 grid (Сетка) – размещает элементы в виде сетки, ячейки которой могут содержать
другие элементы;
 stackPanel (Панель стека) – упорядочивает дочерние элементы в виде стека
(вертикального или горизонтального);
 dockPanel (Панель док-размещения) – размещает дочерние элементы в одной из
четырёх зон (верхней, нижней, левой, правой) контейнера;
 scrollViewer (прокручиваемая панель) – позволяет добавлять прокрутку к областям
содержимого;
 border (Граница) – обрамляет дочерние элементы, позволяя задавать рамку и фон.
43СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Каждый из этих элементов играет важную роль в построении графического интерфейса
в WPF, предоставляя различные возможности для управления расположением, внешним
видом и поведением элементов в приложении.
Приложение изначально имеет вид пустого стандартного приложения для Windows,
который выглядит непримечательно, а также не подлежит внешнему изменению. Для создания
собственного окна необходимо переключить параметр «WindowStyle» в состояние «None»,
приложение примет вид белого прямоугольника, без каких-либо кнопок. После установки
свойства окна «Background» на «Transparent» и переключения «AllowTransparency» в «True»,
пропадёт и белый прямоугольник, оставив после себя прозрачное окно без рамок.
Для отображения собственного окна был выбран элемент Border, так как он позволяет
изменять его параметры, задавать цвет фона, форму, а также закруглять углы, изменяя
значение параметра «CornerRadius», делая фон приложения более плавным.
Интерфейс приложения будет разделён на 4 зоны, в соответствии с сеткой,
изображённой на рисунке 4. Правая часть окна разделена двумя колонками для того, чтобы
при передвижении «GridSplitter», расположенного между 1 и 2 колонкой, правая часть сетки
не выходила за пределы окна.
Рис. 4. Первая версия макета
Однако, внешний вид кнопок и панели вкладок выбиваются из общего стиля интерфейса,
они имеют светлый фон, когда остальные элементы макеты выполнены в приглушённых
тонах. К тому же, вкладки элемента «TabControl» имеют границу, которая не вписывается в
скруглённый дизайн макета.
Одним из способов изменения внешнего вида элементов управления является создание
пользовательского стиля. Пользовательский стиль переопределяет изначальный стиль
44СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
элементов управления, также стили могут задавать поведение элементов управления на
действия пользователя.
Эти стили можно создавать в разметке основного окна, при объявлении
пользовательского элемента, а также создавать в отдельных XAML файлах, с последующим
добавлением в пространство имён основного приложения. Именно последний вариант
объявления пользовательских стилей является наиболее привлекательным, поскольку
позволяет отделить код нового стиля от разметки основного окна, что снижает загруженность
кода основного окна и делает его более читаемым.
Для создания пользовательского стиля необходимо добавить в проект «Словарь ресурсов
(WPF)» (Resource dictionary (WPF)). В нём будут описываться атрибуты нового
пользовательского стиля. Пример пользовательского стиля для панели вкладок на рисунке 5.
Рис. 5. Создание пользовательского стиля
Данный пользовательский стиль изменяет внешний вид панели вкладок так, чтобы
вкладки отображались по центру элемента, а не слева, как это установлено изначально, также
содержимое вкладок больше не будет обрамляться тонкой границей, а за панелью вкладок
будет располагаться прямоугольник с закруглёнными краями, чтобы визуально отделить этот
элемент управления.
Также, по аналогии был создан стиль для самих вкладок, позади вкладки будет
располагаться «border» с закруглёнными сверху углами, которые будут плавно переходить в
содержимое вкладки. Таким же образом был создан стиль для кнопок управления файлом все
стили были помещены в папку проекта «Theme» (рисунок 6).
45СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 6. Созданные пользовательские стили
Для получения возможности использовать новые стили для элементов управления их
необходимо добавить в пространство имён приложения. Для этого необходимо добавить в
файл «App.xaml» строки, изображённые на рисунке 7, которые присоединяют созданные выше
стили.
Рис.7. Добавление стилей в пространство имён приложения
Компонент «ResourceDictionary.MergedDictionaries» объединяет все объявленные стили
вместе, после чего их можно будет присваивать элементам пользовательского интерфейса,
указывая стиль в параметрах подходящего объекта:
Рис. 8. Присвоение стиля пользовательскому элементу
После применения всех стилей интерфейс примет более лаконичный и эстетичный вид
(рис. 9).
Рис. 9. Макет пользовательского интерфейса
46СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
В результате изучения процесса разработки пользовательского интерфейса на языке
XAML с применением пользовательских стилей, можно сделать вывод о его эффективности и
удобстве проектирования. XAML в сочетании с Windows Presentation Foundation
предоставляет мощные инструменты для создания гибких и стильных интерфейсов, а
использование пользовательских стилей упрощает управление внешним видом приложения.
Этот подход позволяет сэкономить время при проектировании, обеспечивая единообразие
дизайна и облегчая поддержку.
© Катермина Т.С., Севастьянов М.А., 2024
47СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.4
Тагиров К.М.
аспирант, ассистент
Тагиров Т.М.
аспирант, преподаватель
Алаяров Г.А.
студент
Нижневартовский государственный университет
Нижневартовский строительный колледж
г. Нижневартовск, Россия
ОПИСАНИЕ РАЗРАБОТКИ ВЕБ-ПРИЛОЖЕНИЯ
«РАСПИСАНИЕ СТРОИТЕЛЬНОГО КОЛЛЕДЖА»
Аннотация. В статье описывается разработка веб-приложения «Расписание
строительного колледжа» с учётом потребностей студентов и особенностей визуального
восприятия. Описывается дизайн приложения, уделяется внимание специальному режиму для
слабовидящих, предоставляющему увеличенные шрифты и адаптированные цвета.
Техническая сторона включает использование HTML, CSS и JavaScript библиотека Eel языка
программирования Python. Взаимодействие с базой данных осуществляется с применением
Mysql3-lite. Статья также рассматривает процесс обработки запросов студентов и
отображения расписания на экране.
Ключевые слова: разработка веб-приложение; расписание; оптимизация
пользовательского опыта; технологии web-разработки.
Целью данной научной статьи является апробация разработки веб-приложения
«Расписание строительного колледжа» с целью улучшения удобства использования,
оптимизации пользовательского опыта студентов и теоретического повышения посещаемости
занятий. Приложение предоставляет пользователю расписание в удобной таблице,
содержащей информацию о дне недели, номере пары, времени начала и окончания, названии
предмета, аудитории и ФИО преподавателя (см. рис. 1).
Разработка приложения «Расписание строительного колледжа» была мотивирована
неудобствами, связанными с использованием PDF-формата для представления расписания на
странице группы в социальной сети VK. Необходимость повторного скачивания PDF-файла
для доступа к расписанию, а также сложности ориентации среди множества групп и колонок
приводили к лёгкому запутыванию и возможным ошибкам в выборе пары или времени.
Проанализировав работы исследователей [4; 5] было принято решение по разработке веб-
приложения.
Для дизайна приложения было принято решение использовать основные цвета БУ
Нижневартовского строительного колледжа, такие как красный, черный и белый, в
соответствии с логотипом колледжа. Выбор этих цветов обоснован стремлением к
минимализму, с целью не отвлекать пользователя излишними элементами [2]. Особенностью
является наличие режимов «светлый» и «тёмный», учитывая различные предпочтения
пользователей, а также актуальность темного режима в современных трендах. Данная
48СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
возможность предоставляет пользователю выбор между двумя режимами, что показано на
рисунке 2.
Рис. 1. Макет дизайна
Рис. 2. «Тёмное» оформление
Интерфейс для переключения между режимами реализован с использованием отдельной
кнопки, размещенной в правом верхнем углу экрана (см. рис. 2 и 3). Тенденция проводить
большинство времени в ноутбуках, смартфонах, делает актуальным тёмный режим. Данный
режим становиться важным дополнением к дизайну в пользовательском опыте, так как этот
режим – это не просто смена цветовой гаммы: белый текс на чёрном фоне, а дизайнерское
решение.
Рис. 3. Переключение на тёмную тему
Поскольку в колледже могут обучаться студенты с ограниченным зрением, был
разработан специальный режим, в котором основные шрифты увеличены, а цветовая гамма
изменена на серо-белую. Данную тематику в соих работах изучали Бушуев Р.А., Девяткин
А.В., Зыков Д.А., Шоскальне В.М., Булатова И.Г [1]. Этот режим предоставляет более
комфортные условия визуального восприятия для лиц с ослабленным зрением (см. рис. 4).
49СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 4. Режим для слабовидящих
При создании веб-приложения «Расписание строительного колледжа» были
задействованы следующие технологии: HTML и CSS для формирования интерфейса,
JavaScript для реализации логики приложения и взаимодействия с пользователем, а также
Mysql3-lite для работы с данными [3]. Для обеспечения взаимодействия между фронтендом и
бэкендом была использована библиотека Eel. Бэкенд был разработан на языке
программирования Python.
Фронтэнд пример кода отработки запросов пользователя:
function get_course(id) {
// При выборе курса пользователем, запоминает его и отправляет в сборщик запросов
var table = window.glob_tab;
var e = document.getElementById(id);
e.style.display = (e.style.display == 'block') ? 'none' : 'block';
e.addEventListener('click', function (b) {
window.glob_var = b.target.id;
});
}
function get_day(id) {
// При выборе дня недели пользователем, запоминает его и отправляет в сборщик
запросов
var v = document.getElementById(id);
window.glob_id = v;
v.style.display = (v.style.display == 'block') ? 'none' : 'block';
v.addEventListener('click', function (d) {
window.global_var = d.target.id;
});
}
eel.expose(group1); // Передача данных в бекенд
function get_rasp() {
// Сборщик запросов
var group = window.glob_var;
50СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
var day_week = window.global_var;
window.glob_tab = table;
}
eel.group1(group, day_week)(function (arr) {
// Получение ответа от бекенда и заполнение таблицы
let table = document.querySelector('#table');
table.innerHTML = '';
for (let subArr of arr) {
let tr = document.createElement('tr');
for (let elem of subArr) {
let td = document.createElement('td');
td.textContent = elem;
tr.appendChild(td);
}
table.appendChild(tr);
}
});
Бэкенд:
@eel.expose
# Отправка ответа фронтенду
def group1(group, day_week):
cursor = conn.cursor()
# Пример SQL-запроса с двумя параметрами
day_week = str(day_week)
group = str(group)
# Выбор записи, который соответствует параметрам day_week и group
cursor.execute("SELECT * FROM raspisanie WHERE day_week = “?” AND group = ?",
(day_week, group))
rows = cursor.fetchall()
# Обработка результатов
for row in rows:
print(row)
# Закрытие курсора
cursor.close()
В ходе взаимодействия с приложением студент инициирует запрос, например, на
получение расписания для 3 курса группы ИС-3 на понедельник. Затем JavaScript передает эти
данные на бэкэнд, который, в свою очередь, взаимодействует с базой данных, используя
библиотеку Mysql3-lite. Получив запрошенное расписание из базы данных, бэкэнд отправляет
его в ответ на запрос, и JavaScript отображает таблицу расписания на экране.
51СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
В процессе тестирования веб-приложения «Расписание строительного колледжа» было
установлено, что приложение успешно справляется с поставленными задачами, а также
демонстрирует хорошую производительность и удобство использования на мобильных
устройствах благодаря аккуратно настроенной адаптивной верстке.
Однако в ходе анализа были выявлены определенные недостатки, требующие внимания
и доработки. В частности, рекомендуется рассмотреть замену библиотеки «eel» на фреймворк
«Django» с целью повышения стабильности и скорости обработки бэкенд-части приложения.
Также стоит обратить внимание на ограничение в 20 одновременных запросов, что
подразумевает необходимость пересмотра текущего хостингового сервиса в пользу более
производительного варианта. Эти выводы и рекомендации представляют важные аспекты для
оптимизации и дальнейшего совершенствования веб-приложения «Расписание строительного
колледжа».
Важно учесть, что в настоящий момент веб-приложение «Расписание строительного
колледжа» находится в активной фазе разработки. В ближайших перспективах запланированы
ключевые изменения, как было объявлено в тестовой части. В частности, в планах улучшение
производительности путем выбора более мощного сервера и переход на фреймворк Django.
Эти изменения позволят внедрить многостраничную структуру приложения и внедрить
систему аутентификации, что значительно усовершенствует пользовательский опыт.
Авторизованные пользователи смогут автоматически получать актуальное расписание для
текущего дня и выбирать другие дни по необходимости.
В долгосрочной перспективе предполагается разработка специализированной версии
приложения для преподавателей, что дополнительно расширит его функциональность и
применимость в контексте образовательных учреждений.
Также в планах имеется переход на систему управления базами данных «1С», что сведет
воедино информацию в образовательном учреждении с данными на сервере, обеспечивая
мгновенное обновление расписания. Эти изменения будут способствовать значительному
повышению эффективности и удобства использования приложения.
В завершении, созданное веб-приложение «Расписание строительного колледжа»
целенаправленно на повышение комфорта для студентов и оптимизацию их
пользовательского опыта. Оно успешно решает задачи предоставления расписания и
адаптировано для различных категорий пользователей, включая людей с ограниченными
возможностями. Несмотря на это, перед нами стоят задачи усовершенствования, такие как
переход на фреймворк Django, повышение эффективности и перспективные разработки для
студентов и преподавателей. Разработка данного приложения обещает значительное
улучшение в области образования и доступности информации.
Литература
1. Бушуев Р.А., Девяткин А.В., Зыков Д.А., Шоскальне В.М., Булатова И.Г. О
применении миварных экспертных систем для создания сайта для людей с недостатками по
52СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
зрению // Информация и образование: границы коммуникаций INFO. 2020. №12(20). С. 103-
107.
2. Исмойилов Х.Б. Стили сайтов в веб-дизайне // Современные материалы, техника и
технологии. 2018. № 2(17). С. 49-53.
3. Казиахмедов Т.Б. Обучение основам баз данных в курсе «Программирование» в
профильной школе // Современные концепции и системы профильного обучения в российской
школе: Сб. мат-ов Всероссийской научно-методической конференции (г. Новосибирск, 07-09
декабря 2019 г.). Новосибирск, 2019. С. 51-57.
4. Казиахмедов Т.Б., Горлов С.И. Методы обучения программированию бакалавров ИТ-
направлений подготовки в условиях перехода на отечественное программное обеспечение //
Актуальные проблемы обучения математике, информатике и информатизации образования:
Мат-лы международной научно-практической конференции (г. Хабаровск, 25-27 мая 2023 г.).
Хабаровск, 2023. С. 142-148.
5. Садыкова О.В., Казиахмедов Т.Б. Процесс построения методической системы
обучения информатики и ИКТ по результатам обучения на профильном уровне // Учёные
записки ОГУ. Серия: Гуманитарные и социальные науки. 2016. № 3(72). С. 307-321.
© Тагиров К.М., Тагиров Т.М., Алаяров Г.А., 2024
53СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.514
Катермина Т.С.
канд. тех. наук, доцент
Ферберт И.И.
студент
Нижневартовский государственный университет
г. Нижневартовск, Россия
РАЗРАБОТКА ПРОГРАММ ДЛЯ РАЗМЕТКИ И ПРОСМОТРА МЕТОК НА
ИЗОБРАЖЕНИИ ДЛЯ СОЗДАНИЯ НАБОРА ДАННЫХ
Аннотация. Данная статья рассматривает процесс разметки данных (Data labeling)
или аннотирования данных (data annotation) в контексте машинного обучения. Авторы
представляют решение, разработанное на языке программирования Python с
использованием библиотеки OpenCV, которое оптимизирует процесс разметки
изображений для создания обучающих наборов данных. Статья описывает основные этапы
процесса разметки, такие как выделение областей интереса на изображениях, сохранение
координат и названий этих областей в файл формата CSV и визуализацию меток на
изображениях. При разметке изображений авторы предлагают использовать возможности
горячих клавиш и курсора мыши, что значительно ускоряет процесс.
Ключевые слова: набор данных; разметка изображений; компьютерное зрение;
аннотирование данных.
Разметка данных (Data labeling), также известная как аннотирование данных (data
annotation), представляет собой процесс добавления тэгов к необработанным данным с
целью указать модели машинного обучения целевые атрибуты (ответы), которые она
должна предсказывать. Метки (labels) или тэги (tags) представляют собой описательные
элементы, которые помогают модели учиться на примерах, показывая, чем являются
отдельные элементы данных.
Например, можно создать обучающий набор данных, состоящий из изображений,
классифицированных по типам животных. Таким образом, размеченные данные выделяют
характеристики данных, помогая модели анализировать информацию и распознавать
сходства у областей, чтобы определять, где на изображении находится нужный объект.
Такие задачи ещё называют задачами классификации и локализации.
Для этого на изображении необходимо выделить область, обычно прямоугольную, где
находится необходимый объект, а затем передать координаты области и его название в
набор данных. Такие области называют областями интереса.
54СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Расположение меток для обучения на изображении
Чтобы оптимизировать процесс разметки, необходимо разработать решение, в котором
будут реализованы следующие возможности:
 Оптимизирование разметки изображения использованием горячих клавиш
 Использование курсора мыши как инструмента для выделения области на
изображении
 Создание и заполнение файлы с разметкой формата csv (Comma-Separated Values)
 Визуализация разметки из набора данных на изображениях.
Для оптимизации этого процесса была разработана программа для разметки, основанная
на языке программирования Python и библиотеки OpenCV. Все материалы, использованные
при создании, распространяются бесплатно. Для работы с Python была выбрана среда
разработки PyCharmCommunityedition.
Для работы с директориями Windows была выбрана библиотека OS, в частности её
методы os.listdir() и os.path(). Они позволяют просматривать файлы в файловой системе
Windows и обращаться к этим файлам, а также находить путь файлов по названию.
Рис. 2. Получение списка изображений из директории Dataset/temp
В данном случае, путь к каталогу указывается, начиная с корневой папки проекта. После
получения полного пути к каталогу, все файлы, расширение у которых .jpg, помещаются в
список для дальнейшей обработки. Аналогичным образом указывается путь в csv файлу, в
котором будут храниться результаты обработки изображений.
55СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Для создания окна программы будем использовать библиотеку OpenCV (в коде она
подписана как cv2). Объявим окно с названием Image_Labeler с помощью
cv2.namedWindow(). В нём мы будем открывать изображения из каталога temp и размечать
его.
Методом разметки изображения будет служить функция cv2.setMouseCallback(). Она
позволяет привязать пользовательский обратный вызов (callback) к определенным событиям
мыши, происходящим на окне или изображении. Например, при нажатии клавиши или
движении мыши (event) будет происходить обратный вызов, который будет выполнять
заданные пользователем действия.
В нашем случае мы определили несколько event, а именно нажатие левой кнопки мыши,
движение мышью и отжимании левой кнопки мыши.
Рис. 3. Список действий мышью, обработанных программой
При нажатии левой клавиши мыши, флаг drawing поднимается, и начинает выделяться
прямоугольная область мыши, похожая на выделение объектов на рабочем столе Windows.
При движении мыши, область остаётся на изображении и перерисовывается вместе с её
движением. При отжатии также происходит перерисовка так называемой области интереса.
Такие методы позволяют выделять части изображения для разметки значительно быстрее, чем
если бы это приходилось делать вручную, что позволяет оптимизировать процесс разметки
изображения.
Для того, чтобы дальше работать с областью интереса и её координатами, необходимо
продумать место хранения этих данных. Для этого создадим соединение с csv файлом с флагом
записи и создадим объект writer, который используется для записи данных.
Рис. 4. Создание соединения и writer
56СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Далее, для каждого изображения в каталоге объявляем цикл, который ожидает нажатия
горячей клавиши выхода, в котором будем обрабатывать выделенную нами область на
изображении. С помощью другой горячей клавиши мы подтверждаем, что выделили область
интереса верно, затем происходит открытие файлового диалога с просьбой ввести название
данной области. После чего данные сохраняются в списки, а по завершению работы над
изображением сохраняются в csvфайл.
Рис. 5. Диалог указания названия после нажатия горячей клавиши
Используя такой подход, можно указывать несколько областей интереса на
изображении. Так, если по завершению выделения одной области не нажимать горячую
клавишу перехода-выхода обработки данного изображения, то появляется возможность
продолжить выделение областей.
После обработки последнего изображения в каталоге, нажатие горячей клавиши
перехода-выхода завершает работу программы и сохраняет все данные в csv файл labels.csv.
Структура файла представляет собой данные с разделителем. Всего в данных три
столбца, название изображение, название метки и лист с координатами двух точек,
соответствующих левой верхней и правой нижней точкам прямоугольника области интереса.
Рис. 6. Структура csv файла
57СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Для визуализации меток на изображении будем использовать похожий метод обработки.
В нём данные о каждой области интереса берутся из labels.csv.
Рис. 7. Программа для просмотра меток на изображении из набора данных
Такая программа необходима для контроля качества разметки. Она позволяет визуально
оценить качество разметки на изображениях, чтобы избежать ошибок при обучении. Результат
выполнения показан на рисунке 8.
Рис. 8. Результат работы программы просмотра меток
58СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Данные программы помогут оптимизировать процесс разметки изображений для
создания наборов данных для обучения нейронных сетей и автоматизируют процессы
нахождения координат меток.
В результате разработки программ были значительно оптимизированы процессы
создания набора данных. Такая программа значительно упрощает и ускоряет процесс создания
наборов данных для обучения моделей машинного обучения. Она позволяет быстро и точно
добавлять метки к необработанным данным, что является важным шагом при обучении
моделей классификации и локализации объектов на изображениях.
© Катермина Т.С., Ферберт И.И., 2024
59СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
МАТЕМАТИЧЕСКОЕ МОДЕЛИРОВАНИЕ
В СЛОЖНЫХ СИСТЕМАХ
УДК 517.95
Зейналов Р.М.
д-р философии по математике
Институт систем управления
г. Баку, Азербайджан
ПОЛУЧЕНИЕ НЕОБХОДИМЫХ УСЛОВИЙ ГРАНИЧНЫХ ЗАДАЧ
ДЛЯ УРАВНЕНИЯ КОШИ-РИМАНА, КОГДА УСЛОВИЯ КАРЛЕМАНА
НЕ ИМЕЕТ МЕСТО
Аннотация: Излагаемая работа посвящена к исследованию решению граничных задач
для уравнения Коши-Римана с нелокальными граничными условиями.
Заметим, что условия Карлемана звучать следующим образом. «Если на границе
одновременно двигается не менее чем двух точек то, тогда соседние точки или отходят от
одной граничной точки, или же приближаются к одной граничной точке. В противном случае,
т.е. когда на границе соседние точки следят друг – друга то, тогда условия Карлемана не имеет
место.
Ключевые слова: фундаментальное решение уравнения; нелокальные граничные
условия; условия Карлемана; основные соотношения; необходимые условии.
Как известно, получение необходимых условий граничной задачи для уравнения Коши-
Римана посвящены многочисленные работы [1; 4; 6; 7; 8].
Постановка задач: рассмотрим следующие граничный задачи:
𝜕𝑢(𝑥) 𝜕𝑢(𝑥)
+𝑖 = 0, 𝑥 = (𝑥 ,𝑥 ) ∈ 𝐷 ⊂ 𝑅2, (1)
𝜕𝑥 𝜕𝑥 1 2
2 1
𝛼 (𝑡)𝑢(𝑡,𝛾 (𝑡))+𝛼 (𝑡)𝑢(𝑎 +𝑏 −𝑡 ,𝛾 (𝑎 +𝑏 −𝑡)) = 𝜑(𝑡), 𝑡 ∈ [𝑎 ,𝑏 ], (2)
1 1 2 1 1 1 2 1 1 1 1
где 𝑖 = √−1, 𝐷 – ограниченный плоской область, выпукло по направлению
𝑥 , 𝛼 (𝑡),𝛼 (𝑡) и 𝜑(𝑡) заданные непрерывные функции. Γ – граница области 𝐷 является
2 1 2
линией Ляпунова. При проектировании области 𝐷 на ось 𝑥 , параллельно к 𝑥 граница Γ
1 2
разбивается на две части, Γ и Γ . Уравнении этих линий 𝑥 = 𝛾 (𝑥 ),𝑘 = 1,2; 𝑥 ∈ [𝑎 ,𝑏 ] ⊂
1 2 2 𝑘 1 1 1 1
ℝ. Граничная условия (2) такого, что движущиеся точки на границе следят друг друга.
Известно, что фундаментальные решения уравнений (1), имеет вид [2]:
1 1
𝑈(𝑥−𝜉) = , (3)
2𝜋𝑥 −𝜉 +𝑖(𝑥 −𝜉 )
2 2 1 1
Основные соотношения: Умножая уравнения (1) на фундаментальному решению (3), и
интегрируя по области 𝐷, имеем:
𝜕𝑢(𝑥) 𝜕𝑢(𝑥)
0 = ∫ 𝑈(𝑥−𝜉)𝑑𝑥+𝑖∫ 𝑈(𝑥−𝜉)𝑑𝑥.
𝜕𝑥 𝜕𝑥
2 1
𝐷 𝐷
60СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Применяя формулу Остроградского-Гаусса, т.е. интегрирования по частям, имеем:
0 = ∫ 𝑢(𝑥)𝑈(𝑥−𝜉)cos(𝜈,𝑥 )𝑑𝑥 −
2
Γ
𝜕𝑈(𝑥−𝜉)
−∫ 𝑢(𝑥) 𝑑𝑥+𝑖∫ 𝑢(𝑥)𝑈(𝑥−𝜉)cos(𝜈,𝑥 )𝑑𝑥−
𝜕𝑥 1
2
𝐷 Γ
𝜕𝑈(𝑥−𝜉)
−𝑖∫ 𝑢(𝑥) 𝑑𝑥 = ∫ 𝑢(𝑥)𝑈(𝑥−𝜉)[cos(𝜈,𝑥 )+𝑖𝑐𝑜𝑠(𝜈,𝑥 )]𝑑𝑥−
𝜕𝑥 2 1
1
𝐷 Γ
𝜕𝑈(𝑥−𝜉) 𝜕𝑈(𝑥−𝜉)
−∫ 𝑢(𝑥)[ +𝑖 ]𝑑𝑥 =
𝜕𝑥 𝜕𝑥
2 1
𝐷
= ∫ 𝑢(𝑥)𝑈(𝑥−𝜉)[cos(𝜈,𝑥 )+𝑖𝑐𝑜𝑠(𝜈,𝑥 )]𝑑𝑥− ∫ 𝛿(𝑥−𝜉)𝑢(𝑥)𝑑𝑥,
2 1
Γ 𝐷
где через 𝜈 обозначено внешняя нормал к границе Γ области 𝐷.
Учитывая свойства дельта функция Дирака, получаем [3; 5]:
𝑢(𝜉), 𝜉 ∈ 𝐷,
1 𝑢(𝑥)[cos(𝜈,𝑥 )+𝑖𝑐𝑜𝑠(𝜈,𝑥 )]
2 1
∫ 𝑑𝑥 = {1 (4)
2𝜋 𝑥 −𝜉 +𝑖(𝑥 −𝜉 ) 𝑢(𝜉), 𝜉 ∈ Γ.
2 2 1 1
Γ 2
Как видно из (4) основное соотношения состоит из двух частей. Первая часть, когда 𝜉 ∈
𝐷 дает произвольное решения уравнения (1), а вторая часть, когда 𝜉 ∈ Γ, является
необходимые условии.
Необходимые условии: из основного соотношения (4) имеем:
1 1 𝑢(𝑥)[cos(𝜈,𝑥 )+𝑖𝑐𝑜𝑠(𝜈,𝑥 )]
2 1
𝑢(𝜉 ,𝛾 (𝜉 )) = ∫ 𝑑𝑥 +
2 1 1 1 2𝜋 𝑥 −𝛾 (𝜉 )+𝑖(𝑥 −𝜉 )
2 1 1 1 1
Γ1
1 𝑢(𝑥)[cos(𝜈,𝑥 )+𝑖𝑐𝑜𝑠(𝜈,𝑥 )]
2 1
+ ∫ 𝑑𝑥;
2𝜋 𝑥 −𝛾 (𝜉 )+𝑖(𝑥 −𝜉 )
2 1 1 1 1
Γ2
𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))[−cos(𝑥 ,𝜏)+𝑖𝑠𝑖𝑛(𝑥 ,𝜏)] 𝑑𝑥
1 1 1 1 1 1
𝑢(𝜉 ,𝛾 (𝜉 )) = ∫ +
1 1 1 𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 𝑐𝑜𝑠(𝑥 ,𝜏)
1 1 1 1 1 1 1
a1
𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))[cos(𝑥 ,𝜏)−𝑖𝑠𝑖𝑛(𝑥 ,𝜏)] 𝑑𝑥
1 2 1 1 1 1
+ ∫ =
𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 𝑐𝑜𝑠(𝑥 ,𝜏)
2 1 1 1 1 1 1
a1
𝑏1 𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))[1−𝑖𝛾′(𝑥 )] 1 𝑢(𝑥 ,𝛾 (𝑥 ))[1−𝑖𝛾′(𝑥 )]
1 1 1 1 1 1 2 1 2 1
= − ∫ 𝑑𝑥 + ∫ 𝑑𝑥 , (5)
𝜋 [𝛾′(𝜎 (𝑥 −𝜉 ))+𝑖](𝑥 −𝜉 ) 1 𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 1
1 1 1 1 1 1 2 1 1 1 1 1
a1 a1
где 𝜏 – касательное направление как в Γ , так и в Γ , 𝜎 ∈ (𝑥 ,𝜉 ),
1 2 1 1 1
61СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
1 1 𝑢(𝑥)[𝑐𝑜𝑠(𝜈,𝑥 )+𝑖𝑐𝑜𝑠(𝜈,𝑥 )]
2 1
𝑢(𝜉 ,𝛾 (𝜉 )) = ∫ 𝑑𝑥+
2 1 2 1 2𝜋 𝑥 −𝛾 (𝜉)+𝑖(𝑥 ,−𝜉 )
2 2 1 1
𝛤1
1 𝑢(𝑥)[𝑐𝑜𝑠(𝜈,𝑥 )+𝑖𝑐𝑜𝑠(𝜈,𝑥 )]
2 1
+ ∫ 𝑑𝑥;
2𝜋 𝑥 −𝛾 (𝜉 )+𝑖(𝑥 ,−𝜉 )
2 2 1 1 1
𝛤2
𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))[−𝑐𝑜𝑠(𝑥 ,𝜏)+𝑠𝑖𝑛(𝑥 ,𝜏)] 𝑑𝑥
1 1 1 1 1 1
𝑢(𝜉 ,𝛾 (𝜉 )) = ∫ +
1 2 1 𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 𝑐𝑜𝑠(𝑥 ,𝜏)
1 1 2 1 1 1 1
𝑎1
𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))[𝑐𝑜𝑠(𝑥 ,𝜏)−𝑖𝑠𝑖𝑛(𝑥 ,𝜏)] 𝑑𝑥
1 2 1 1 1 1
+ ∫ =
𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 𝑐𝑜𝑠(𝑥 ,𝜏)
2 1 2 1 1 1 1
𝑎1
𝑏1 𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))[1−𝑖𝛾′(𝑥 )] 1 𝑢(𝑥 ,𝛾 (𝑥 ))[1−𝑖𝛾′(𝑥 )]
1 1 1 1 1 1 2 1 2 1
= − ∫ 𝑑𝑥 + ∫ 𝑑𝑥 , (6)
𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 1 𝜋 [𝛾′(𝜎 (𝑥 −𝜉 ))+𝑖](𝑥 −𝜉 ) 1
1 1 2 1 1 1 2 2 1 1 1 1
𝑎1 𝑎1
Исходя из граничного условия (2) полученные необходимые условии (5) и (6)
представим в виде:
𝑏1 𝑏1
𝑖 𝑢(𝑥 ,𝛾 (𝑥 )) 𝑖 𝑢(𝑥 ,𝛾 (𝑥 ))𝛾′(𝜎 )−𝛾′(𝑥 )
1 1 1 1 1 1 1 1 1 1
𝑢(𝜉 ,𝛾 (𝜉 )) = ∫ 𝑑𝑥 − ∫ 𝑑𝑥 +
1 1 1 𝜋 𝑥 −𝜉 1 𝜋 𝛾′(𝜎 )+𝑖 𝑥 −𝜉 1
1 1 1 1 1 1
a1 a1
𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))
+ ∫ 1 2 1 [1−𝑖𝛾′(𝑥 )]𝑑𝑥 , (7)
𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 2 1 1
2 1 1 1 1 1
a1
𝑏1
1 𝑢(𝑥 ,𝛾 (𝑥 ))
𝑢(𝜉 ,𝛾 (𝜉 )) = − ∫ 1 1 1 [1−𝑖𝛾′(𝑥 )]𝑑𝑥 −
1 2 1 𝜋 𝛾 (𝑥 )−𝛾 (𝜉 )+𝑖(𝑥 −𝜉 ) 1 1 1
1 1 2 1 1 1
a1
𝑏1 𝑏1
𝑖 𝑢(𝑥 ,𝛾 (𝑥 )) 𝑖 𝑢(𝑥 ,𝛾 (𝑥 ))𝛾′(𝜎 )−𝛾′(𝑥 )
1 2 1 1 2 1 2 2 2 1
− ∫ 𝑑𝑥 + ∫ 𝑑𝑥 .
𝜋 𝑥 −𝜉 1 𝜋 𝛾′(𝜎 )+𝑖 𝑥 −𝜉 1
1 1 2 2 1 1
a1 a1
Получаем (7) имеются сингулярные пределы в необходимых условиях.
Литература
1. Алиев Н.А., Зейналов Р.M. Задача Стеклова для уравнения первого порядка
эллиптического типа // Вестник Бакинского Государственного университета. 2012. №2. С. 12-
20.
2. Владимиров В.С. Уравнения математической физики. М.: Наука, 1981. 512 с.
3. Гахов Ф.Д. Краевые задачи. Государственное издательство физико-математической
литературы. М., 1958. 544 с.
4. Зейналов Р.М., Алиев Н. А. Задача Зарембы-Стеклова для уравнения Коши-Римана //
Вестник дагестанского государственного университета. 2015. Т. 30. Вып. 6. С.74-79.
5. Петровский И.Г. Лекции об уравнениях с частными производными. М., 1961. 400 с.
62СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
6. Садыгов А.Б., Зейналов Р.М., Мамедли Р.Э. Исследование решений одной граничной
задачи // Современное программирование: Мат-лы IV Международной научно-практической
конференции (г. Нижневартовск, 8 декабря 2021 г.). Нижневартовск, 2022. С. 171-174.
7. Aliev N.A., Mustafayeva Y.Y., Murtuzayeva S.M. The influence of the Carleman condition
on the fredholm property of the boundary value problem for Cauchy-Riemann equation // Procceding
of the institute of Applied Mathematics. 2012. Vol. 1. №2. Pp.153-162.
8. Mekhtiyev M.F.,Zeynalov R.M. Solution of a boundary value problem for Cauchy-Riemann
equation in a domain bounded with a parabola of 1-st quadrant // East European Scientific Journal.
2016. Vol. 10(3). Pp. 119-122.
© Зейналов Р.М., 2024
63СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 622.276
Казымов Б.З.
д-р философии по технике
Институт нефти и газа
г. Баку, Азербайджан
Зейналов Р.М.
д-р философии по математике
Институт систем управления
г. Баку, Азербайджан
Дамиров A.A.
д-р философии по технике
Ленкоранский государственный университет
г. Ленкоран, Азербайджан
РАСЧЕТНАЯ СХЕМА ОПРЕДЕЛЕНИЯ ПОКАЗАТЕЛЕЙ РАЗРАБОТКИ НЕФТЯНЫХ
МЕСТОРОЖДЕНИЙ, ПОДВЕРГАЕМЫХ РЕЛАКСАЦИОННОЙ ДЕФОРМАЦИИ,
С УЧЕТОМ ВНЕДРЕНИЯ ВОДЫ В НЕФТЯНУЮ ОБЛАСТЬ
Аннотация. В работе исследуется задача определения показателей разработки
нефтяного месторождения, породы которых подвергаются деформации реологической
природы, с учетом внедрения воды в нефтяную область и предлагается соответствующая
расчетная схема.
Ключевые слова: нефтяное месторождение; деформация; релаксация; пористость;
давление; объёмы нефтяной и газовой областей.
Горные породы месторождений нефти и газа в процессе разработки, в результате
действия геостатического давления, подвергаются деформациям сложного характера,
который, в свою очередь, может оказывать определенное влияние на значения показателей
разработки. Этот факт, за последние несколько десятилетий, привлекало внимание многих
исследователей и, тем самым, стало предметом их научных исследований, как одним из задач,
имеющих важное научно-практическое значение [1-6; 9].
В зависимости от геолого-физических условий залегания месторождений и
особенностей их разработки степень влияния деформации горных пород на определяемые
значения показателей разработки месторождения могут носит разный характер. В этом
немаловажную роль может играть также природных режим залежи. Так как природные
режимы разработки месторождений, в зависимости в гидрогазодинамическом плане уровня
активности законтурной водяной области, могут себя проявить в смешанном виде, то этот
фактор также при определении значений показателей разработки может носить определенную
роль. Практика разработки нефтяных месторождений показывает, что интенсивное снижение
пластового давления при разработке месторождений в естественном режиме с течением
времени приводить внедрению законтурной воды в нефтяную область, в результате чего на
месторождении начинает развивать естественный водонапорный режим [8].
Не учет этого фактора при анализе процесса разработки месторождений значительно
снижает адекватность результатов, получаемых на основе существующих методов расчёта.
Вышеотмеченные обуславливают необходимость исследования данного вопроса с целью
более достоверного определения показателей разработки нефтяных месторождений с
64СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
активной законтурной водной областью. Следует отметить, что исследование этого вопроса
имеет большую актуальность, особенно для случая очень глубокозалегающих месторождений.
Причем, разработка таких месторождений – процесс, требующий больших капиталовложений
и в таких условиях породы-коллекторы могут подвергаться более масштабным деформациям,
в том числе деформациям неупругого характера. В таком случае совершенствование
соответствующих методов расчета разработки нефтяных месторождений может привести к
установлению эффективных решений по осуществлению процесса разработки.
Постановка и решение задачи. В связи с этим, в работе исследуется задача определения
показателей разработки нефтяного месторождения, породы которых подвергаются
деформации реологической природы, с учетом внедрения воды в нефтяную область.
Предполагаем, что за период разработки нефтяного месторождения за счет продвижения
естественного водонефтяного контакта объемы нефтяной и водной областей подвергаются
регулярному изменению. В соответствии этого предположения, справедливо следующее
соотношение
𝛺 = 𝛺 +𝛺 = 𝛺 (𝑡)+𝛺 (𝑡) = 𝑐𝑜𝑛𝑠𝑡, (1)
0 н0 в0 н в
где 𝛺 и 𝛺 - текущие объемы нефтяной и водяной частей соответственно; 𝛺 и 𝛺 -
Н в Н0 В0
начальные значения 𝛺 и 𝛺 соответственно.
Н в
В соответствии такого регулярного изменения объемов нефтяной и водной областей,
величины текущей добычи из месторождения нефти и газа, а также текущего объема воды,
внедренной в нефтяную часть месторождения, могут быть комплексно выражены со
следующими уравнения материального баланса для нефти, газа и воды в пласте
соответственно
/ 𝑑 𝜎𝑚
𝑞 = −𝛺 [ 𝛺 ] (2)
н н 𝑑𝑡 𝑎(𝑃) н
/ 𝑑 𝜎𝑚 𝑆(𝑃)
𝑞 𝑝 = −𝛺 [(1−𝜎)𝛺 𝑎(𝑃 )𝑚𝑃+ 𝛺 𝑝 ]𝛽 (3)
гн ат н 𝑑𝑡 н 0 𝑎(𝑃) н 𝛽 ат
/ 𝑑 𝑚
𝑞 = −𝛺 [ 𝛺 ] (4)
в в 𝑑𝑡 𝑎в(𝑃) в
где 𝛺 =
𝛺н
=
𝛺н∗
;
𝛺/
=
𝛺0
; 𝛺 =
𝛺в
=
𝛺в∗
;
𝛺/
=
𝛺0
; 𝑉 =
𝑚0𝛺н0
; 𝑉 =
𝑚0𝛺в0
; 𝑎(𝑃) =
𝑎(𝑃)
;
н 𝛺0 𝛺 0∗ н 𝛺н0 в 𝛺0 𝛺 0∗ в 𝛺в0 н 𝑎(𝑃0) в 𝑎в(𝑃0) 𝑎(𝑃0)
𝑎 (𝑃) = 𝑎в(𝑃) ; 𝑞 = 𝑞н; 𝑞 = 𝑞гн; 𝑞 = 𝑞в; 𝑚 = 𝑚 ; 𝛺 - объем залежи; 𝛺∗- поровый объем
в 𝑎в(𝑃0) н 𝑉н гн 𝑉н в 𝑉в 𝑚0 0 0
залежи; 𝛺∗ и 𝛺∗- соотвественно, поровые объемы нефтяной и водной частей залежи; 𝑞 -
Н н н
текущий объем добычи нефти с залежи; 𝑞 - объем воды, внедренной из водной части в
в
нефтяную в текущее время; 𝑞 – текущий объем добычи газа: 𝑞 = Г𝑞 ; Г – газовый фактор;
гн гн н
𝑉 и 𝑉- соответственно, начальные объемы нефти и воды в залежи; 𝑃 – пластовое давление; 𝜎
𝑛 в
– нефтенасышенность; 𝑚 – коэффициент пористости залежи; 𝑃 – начальное пластовое
0
давление; 𝑚 – начальное значение пористости; 𝑆(𝑃) – коэффициент растворимости газа в
0
нефти; 𝑎(𝑃) – объемный коэффициент нефти; 𝑎 (𝑃) – объемный коэффициент воды; 𝑝 -
в ат
атмосферное давление; 𝛽 – коэффициент температурной поправки для газа.
Для учета реологической природы деформации горных пород используется следующая
закономерность изменения пористости в зависимости от изменения пластового давления,
65СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
соответствующий случаю релаксационного изменения пористости пласта за период
разработки месторождения [3; 9]:
𝑚+𝜏 𝑑𝑚 = 𝑒𝛽п(𝑃−𝑃0) (5)
𝑚
𝑑𝑡
где 𝜏 - время релаксации пористости горных пород; 𝛽 – коэффициент упругой сжимаемости
𝑚 п
горной породы; 𝑃 – начальное пластовое давление.
0
В рамках введенных обозначений из (1) получаем:
𝛺 (𝑡)+𝛺 (𝑡) = 1. (6)
н в
Совместным исследованием соотношений (2)-(6) для определения изменения во времени
искомых показателей разработки, как пластового давления, пористости и нефтенасыщенности
пласта, а также объема нефтяной части залежи ) была получена следующая система
( 𝑃,𝑚,𝜎,𝛺
н
(
обыкновенных дифференциальных уравнений:
𝑑𝑃
= 𝑓 (𝑡,𝑚,𝜎,𝑃,𝛺 )
𝑃 н
𝑑𝑡
𝑑𝜎
= 𝑓 (𝑡,𝑚,𝜎,𝑃,𝛺 )
𝜎 н
𝑑𝑡
(7)
𝑑𝛺н
= 𝑓 (𝑡,𝑚,𝜎,𝑃,𝛺 )
𝑑𝑡 𝛺н н
𝑑𝑚
= 𝑓 (𝑚,𝑃)
{ 𝑚
𝑑𝑡
где
𝑓 =
𝐺𝑞 н−𝐹4𝑓 𝑚−𝐹2𝑓 𝛺н−𝐹3𝑓𝑃
; 𝑓 =
𝑞 в−𝐹7𝑓 𝑚−𝐹6𝑓𝑃;
𝜎 𝐹1 𝛺н 𝐹5
𝑓 =
𝑞 𝑛(1−𝐺𝐹 𝐹8 1)−(𝐹 𝐹9 5−𝐹 𝐹8 1𝐹 𝐹2 5)(𝑞 в−𝐹7𝑓 𝑚)−(𝐹11−𝐹 𝐹8 1𝐹4)𝑓
𝑚 ; 𝑓 = 1 (𝑒𝛽п(𝑃−𝑃0) −𝑚)
𝑃 𝐹10−𝐹 𝐹8 1−𝐹 𝐹9 5𝐹6+𝐹 𝐹8 1𝐹 𝐹6
5
𝑚 𝜏𝑚
𝐹 = 𝛺′𝛺 𝑎(𝑃 )𝑚𝑃 𝛽 −𝛺′𝛺 𝑚𝑆(𝑃) ;𝐹 = −𝛺′(1−𝜎)𝑎(𝑃 )𝑚𝑃 𝛽 −𝛺′ 𝜎𝑚𝑆(𝑃) ;
1 н н𝑛 0 н н 2 н 0 𝑛
𝑝ат 𝑎(𝑃) 𝑝ат 𝑎(𝑃)
/
𝐹 = −𝛺′𝛺 (1−𝜎)𝑎(𝑃 )𝑚 𝛽 −𝛺′𝛺 𝜎𝑚(𝑆(𝑃) ) ;
3 н н 0 н н
𝑝ат 𝑎(𝑃)
𝑃
′
𝐹 = −𝛺′𝛺 (1−𝜎)𝑎(𝑃 )𝑃 𝛽 −𝛺′𝛺 𝜎𝑆(𝑃) ; 𝐹 = 𝛺′ 𝑚 ; 𝐹 = 𝛺′ 𝑚(1−𝛺н)𝑎в (𝑃) ; 𝐹 =
4 н н 0 𝑝ат н н 𝑎(𝑃) 5 в 𝑎в(𝑃) 6 в 𝑎в2 (𝑃) 7
′
−𝛺′ (1−𝛺н) ; 𝐹 = 𝛺′𝛺 𝑚 ; 𝐹 = −𝛺′ 𝜎𝑚 ; 𝐹 = 𝛺′𝛺 𝜎𝑚𝑎(𝑃) ;𝐹 = 𝛺′𝛺 𝜎
в 𝑎в(𝑃) 8 н н 𝑎(𝑃) 9 н 𝑎(𝑃) 10 н н 𝑎2 (𝑃) 11 н н 𝑎(𝑃)
𝛽 𝑆(𝑃)
Г = [𝛹(𝜎)⋅𝜇(𝑃)⋅𝑃⋅𝑎(𝑃)+𝑝 ];
ат
𝑝ат 𝛽
𝛹(𝜎) =
𝐹г(𝜎)
; 𝜇(𝑃) =
𝜇н(𝑃)
; 𝐹(𝜎) и 𝐹 (𝜎) – относительная фазовая проницаемость для газа и
г н
𝐹н(𝜎) 𝜇г(𝑃)
нефти соответственно; 𝜇 (𝑃) и 𝜇 (𝑃) – вязкость газа и нефти соответственно.
г н
Система уравнений (7) решается с помощью метода Рунге-Кутты при следующих
начальных условиях [7]:
𝛺
н0
𝑃(0) = 𝑃 ; 𝑚(0) = 1; 𝜎(0) = 1; 𝛺 (0) = .
0 н 𝛺
0
66СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Согласно методу Рунге-Кутты четвертого порядка для определения показателей
𝑃,𝑚,𝜎,𝛺 в узловых точках 𝑡 = (𝑗+1)𝜏 (𝑗 = 0,𝑀−1) по времени 𝑡(0 ≤ 𝑡 ≤ 𝑇) соответ-
н 𝑗+1
ствующая итерационная схема будет иметь следующий вид:
𝜏 𝜏
𝑃 = 𝑃 + (𝐾 +2𝐾 +2𝐾 +𝐾 ); 𝑚 = 𝑚 + (𝐾 +2𝐾 +2𝐾 +𝐾 );
𝑗+1 𝑗 1𝑃 2𝑃 3𝑃 4𝑃 𝑗+1 𝑗 1𝑚 2𝑚 3𝑚 4𝑚
6 6
𝜏 𝜏
𝜎 = 𝜎 + (𝐾 +2𝐾 +2𝐾 +𝐾 ); 𝛺 = 𝛺 + (𝐾 +2𝐾 +2𝐾 +𝐾 );
𝑗+1 𝑗 6 1𝜎 2𝜎 3𝜎 4𝜎 н𝑗+1 н𝑗 6 1𝛺н 2𝛺н 3𝛺н 4𝛺н
𝜏 𝜏 𝜏 𝜏 𝜏
𝐾 = 𝑓 (𝑡 ,𝑚 ,𝜎,𝑃,𝛺 ); 𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝜎+ 𝐾 ,𝑃 + 𝐾 ,𝛺 + 𝐾 );
1𝑃 𝑃 𝑗 𝑗 𝑗 н𝑗 2𝑃 𝑃 𝑗 2 𝑗 2 1𝑚 2 1𝜎 𝑗 2 1𝑃 н𝑗 2 1𝛺н
𝜏 𝜏 𝜏 𝜏 𝜏
𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝜎+ 𝐾 ,𝑃 + 𝐾 ,𝛺 + 𝐾 );
3𝑃 𝑃 𝑗 2 𝑗 2 2𝑚 2 2𝜎 𝑗 2 2𝑃 н𝑗 2 2𝛺н
𝐾 = 𝑓 (𝑡 ,𝑚 +𝐾 ,𝜎+𝐾 ,𝑃 +𝐾 ,𝛺 +𝐾 )
4𝑃 𝑃 𝑗 𝑗 3𝑚 3𝜎 𝑗 3𝑃 н𝑗 3𝛺н
𝜏 𝜏 𝜏 𝜏 𝜏
𝐾 = 𝑓 (𝑡 ,𝑚 ,𝜎,𝑃,𝛺 ); 𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝜎+ 𝐾 ,𝑃 + 𝐾 ,𝛺 + 𝐾 );
1𝜎 𝜎 𝑗 𝑗 𝑗 н𝑗 2𝜎 𝜎 𝑗 2 𝑗 2 1𝑚 2 1𝜎 𝑗 2 1𝑃 н𝑗 2 1𝛺н
𝜏 𝜏 𝜏 𝜏 𝜏
𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝜎+ 𝐾 ,𝑃 + 𝐾 ,𝛺 + 𝐾 );
3𝜎 𝜎 𝑗 2 𝑗 2 2𝑚 2 2𝜎 𝑗 2 2𝑃 н𝑗 2 2𝛺н
𝐾 = 𝑓 (𝑡 ,𝑚 +𝐾 ,𝜎+𝐾 ,𝑃 +𝐾 ,𝛺 +𝐾 ); 𝐾 = 𝑓 (𝑡 ,𝑚 ,𝜎,𝑃,𝛺 );
4𝜎 𝜎 𝑗 𝑗 3𝑚 3𝜎 𝑗 3𝑃 н𝑗 3𝛺н 1𝛺н 𝛺н 𝑗 𝑗 𝑗 н𝑗
𝜏 𝜏 𝜏 𝜏 𝜏
𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝜎+ 𝐾 ,𝑃 + 𝐾 ,𝛺 + 𝐾 );
2𝛺н 𝛺н 𝑗 2 𝑗 2 1𝑚 2 1𝜎 𝑗 2 1𝑃 н𝑗 2 1𝛺н
𝜏 𝜏 𝜏 𝜏 𝜏
𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝜎 + 𝐾 ,𝑃 + 𝐾 ,𝛺 + 𝐾 );
3𝛺н 𝛺н 𝑗 2 𝑗 2 2𝑚 2 2𝜎 𝑗 2 2𝑃 н𝑗 2 2𝛺н
𝐾 = 𝑓 (𝑡 ,𝑚 +𝐾 ,𝜎+𝐾 ,𝑃 +𝐾 ,𝛺 +𝐾 ); 𝐾 = 𝑓 (𝑚 ,𝑃);
4𝛺н 𝛺н 𝑗 𝑗 3𝑚 3𝜎 𝑗 3𝑃 н𝑗 3𝛺н 1𝑚 𝑚 𝑗 𝑗
𝜏 𝜏 𝜏 𝜏 𝜏 𝜏
𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝑃 + 𝐾 ); 𝐾 = 𝑓 (𝑡 + ,𝑚 + 𝐾 ,𝑃 + 𝐾 )
2𝑚 𝑚 𝑗 𝑗 1𝑚 𝑗 1𝑃 3𝑚 𝑚 𝑗 𝑗 2𝑚 𝑗 2𝑃
2 2 2 2 2 2
𝐾 = 𝑓 (𝑡 +𝜏,𝑚 +𝐾 ,𝑃 +𝐾 ),
4𝑚 𝑚 𝑗 𝑗 3𝑚 𝑗 3𝑃
где 𝑀 = 𝑇/𝜏; 𝜏 – шаг интегрирования; 𝑇 – любое фиксированное значение времени.
Начальные значения показателей 𝑃,𝑚,𝜎,𝛺 в приведенной расчетной схеме для индекса
н
j=0 берутся значения, равные к 𝑃 , 1, 1 и 𝛺 /𝛺 соответственно.
0 н0 0
Таким образом, исследована задача разработки нефтяных месторождений в режиме
истощения, породы которых подвержены релаксационной деформации с учетом внедрения
воды в нефтяную область месторождения, в результате чего получена система
дифференциальных уравнений, позволяющая для рассмотренного случая определять
изменения таких показателей разработки, как пластового давления, пористости,
нефтенасыщенности, газового фактора, объема нефтяной части залежи. На основе решения
полученной системы уравнений предложенным расчетным путем можно произвести
оценочных расчетов по урегулированию процесса разработки нефтяного месторождения,
породы которых подвергаются релаксационной деформации, с учетом активности
законтурной водной области месторождения.
Литература
1. Абасов М.Т., Джалалов Г.И., Ибрагимов Т.М., Мамедов А.М., Мамиев В.С.
Гидрогазодинамика глубокозалегающих деформируемых коллекторов месторождений нефти
и газа. Баку: Nafta-press, 2012. 530 c.
67СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2. Аметов И.М., Басниев К.С. Фильтрация жидкости и газа в ползучих средах // Известия
АН СССР. Механика Жидкости и Газа. 1981. № 4. С. 150-153.
3. Кулиев А.М., Казымов Б.З. Деформация горных пород и её влияние на их
фильтрационно-ёмкостные свойства и на процессы фильтрации и разработки месторождений
нефти и газа. Баку: Элм, 2009. 88 с.
4. Кулиев А.М., Эфендиев Р.М, Казымов В.З. Влияние ползучести горных пород на
нефтеотдачу залежей, разрабатываемых в естественном режиме // SOCAR Proceedings. 2012.
№ 3. С.32-37.
5. Казымов Б.З., Зейналов Р.М. Выбор оптимального режима эксплуатации газовой
скважины с учётом ползучей деформации горных пород // Современное программирование:
Мат-лы III Международной научно-практической конференции (г. Нижневартовск, 27-29
ноября 2020 г.). Нижневартовск, 2021. С. 159-162.
6. Казымов Б.З., Зейналов Р.М. Определение динамики потребного количества скважин
при разработке глубокозалегающих нефтяных залежей в режиме растворенного газа //
Современное программирование: Мат-лы IV Международной научно-практической
конференции (г. Нижневартовск, 08 декабря 2021 г.). Нижневартовск, 2022. C. 133-137.
7. Мамедов Я.Д. Методы вычислений. Баку: Маариф, 1988. 306 с.
8. Шахвердиев А.Х. Системная оптимизация процесса разработки нефтяных
месторождений. М.: Недра, 2004. 452 с.
9. Kazymov B.Z., Zeynalov R.M. A method for approximate determination of the indicators of
development of a reservoir with rocks subjected to relaxation deformation in single-phase fluid flow
// Informatics and Control Problems. 2022. № 2. P. 73-79.
© Казымов Б.З., Зейналов Р.М., Дамиров A.A., 2024
68СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004
Мамедли Р.Э.
канд. физ.-мат. наук, доцент
Коваленко П.И.
студент
Нижневартовский государственный университет
г. Нижневартовск, Россия
РАЗРАБОТКА ШАБЛОНА ДЛЯ УПРОЩЕНИЯ ПОСТРОЕНИЯ ПЕРЕКРЕСТКОВ
В СРЕДЕ ANYLOGIC
Аннотация. Статья представляет разработку шаблона для моделирования перекрёстков
в среде AnyLogic. Учтены геометрия дорог, транспортный поток, режимы светофоров и схемы
проезда машин для достоверного моделирования. Данный шаблон облегчает и ускоряет
построение моделей перекрестков, особенно при моделировании всего города. Основными
критериями разработки были возможность моделирования движения машин по перекрёстку в
течение суток, учёт смены режимов светофоров и различной плотности потока.
Ключевые слова: AnyLogic; АСУДД; моделирование; имитационная модель.
Моделирование перекрёстков в среде AnyLogic не является тривиальной задачей. Нужно
учесть разные факторы, такие как: геометрия дорог, транспортный поток, режимы работы
светофоров, а также схему проезда машин через перекрёсток. Для моделирования одного
перекрёстка время затраты не будут такими большими. Но если нам нужно будет
смоделировать перекрёстки для всего города, пусть даже не большого, то для этого
потребуется достаточно много времени только для выбора элементов и их взаимодействия
между собой, а также логики для моделирования дорожной сети. Для того чтобы облегчить
задачу и ускорить построения таких моделей, был разработан шаблон для стандартных
перекрёстков, имеющих пересечение четырёх проезжих частей.
Во время разработки шаблона были выявлены критерии, которым этот шаблон должен
соответствовать. Модели, которые были представлены документацией AnyLogic не
демонстрируют моделирование перекрестка за 24 часа, а только какой-то её части. Главным
критерием стало возможность смоделировать полные сутки движения машин по перекрёстку
учитывая смену режимов работы светофора, а также плотность потока машин. Данный шаблон
представлен на рисунке 1.
В шаблоне были применены следующие блоки: создание, удаление из модели,
управление движением автомобиля, блока моделирующий светофор, управляющий
движением машин на перекрёстке или у стоп-линии. Компоненты агента: событие,
переменная, расписание, функция. Из библиотеки моделирования процессов был взят блок,
который направляет входящих агентов в один из пяти выходных портов в зависимости от
выполнения заданных с помощью вероятностей условий.
69СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Шаблон
Разберем детальнее некоторые элементы, представленные выше.
Компонент агента расписание был выбран для того, чтобы в его свойствах указать
соответствие временным интервалам плотность потока машин для каждой из проезжих частей,
представлено на рисунке 2.
70СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 2. Компонент агента расписание
Компонент агента событие, представленный на рисунке 3 предназначен для отключения,
всех светофоров (режимов работы) посредством вызова функции отключения данного
светофора, которые в данный момент времени должны быть отключены для корректной
работы всего шаблона.
Рис. 3. Компонент агента событие
Так же компонент агента событие рисунке 4, предназначен для того, чтобы посредством
кода, обеспечивая плавность переключения между режимами работы светофора, отключать
предыдущий светофор (режим работы) и включать следующий. Если говорить детальней
сначала проверяется закончилась ли текущая фаза светофора (режим работы), если нет тогда
мы получаем время, которое осталось до конца работы текущей фазы и переназначаем время
срабатывания на время срабатывания плюс время, которое осталось до конца работы текущей
фазы.
71СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 4. Компонент агента событие
Из библиотеки моделирования процессов который направляет входящих агентов в один
из пяти выходных портов в зависимости от выполнения заданных с помощью вероятностей
условий был использован для того, чтобы в свойствах компонента указать функции, которые
мы рассмотрим далее.
Рис. 5. Блок из библиотеки моделирования процессов
Компонент агента функция (рис. 6). Код, написанный в теле этой функции, проверяет
текущее время модели и в зависимости от того какой промежуток соответствует данному
времени, возвращает переменную, в которой находиться значение.
72СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 6. Компонент агента функция
И так рассмотрим крайний блок этого шаблона – переменная, рисунок 7.
Рис. 7. Компоненты агента переменная
Для того чтобы понять, какое значение указывается в свойствах этой переменной,
необходимо рассмотреть шаблон подсчета значений переменных функции траектории
движения машин (рис. 8).
Рис. 8. Шаблон подсчета значений переменных функции траектории движения машин
73СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Был спроектирован шаблон подсчета значений переменных функции траектории
движения машин в программе Microsoft Excel. В данной таблице указывается плотность
машин, проезжающих через перекрёсток в зависимости от проезжей части, временного
промежутка, а также направления движения. В таблице посредством функции рис. 9,
высчитывается значение в процентном соотношении для каждой переменной шаблона.
Рис. 9. Функция подсчета
Так же для удобства, упрощения и ускорения занесения данных и подсчета значений
переменных при помощи шаблона подсчета значений переменных функции траектории
движения машин были написаны макросы для кнопок (рис. 10).
Рис. 10. Макросы для кнопок
Разработанный шаблон представляет собой ценный инструмент для упрощения
построения перекрестков в среде AnyLogic. Он позволяет быстрее создавать модели,
проводить анализ различных сценариев и принимать обоснованные решения для оптимизации
транспортных систем. Дальнейшие перспективы исследования включают расширение
функциональности шаблона, учет специфических условий и требований.
© Мамедли Р.Э., Коваленко П.И., 2024
74СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.94
Соловьев А.А.
старший преподаватель
Нижневартовский государственный университет
г. Нижневартовск, Россия
ОСОБЕННОСТИ ИСПОЛЬЗОВАНИЯ ЦИФРОВЫХ ДВОЙНИКОВ
ПРИ РАЗРАБОТКЕ CAE-ПРОГРАММЫ ДЛЯ НЕФТЕГАЗОВОГО ПРОИЗВОДСТВА
Аннотация. Статья представляет собой описание технологии применения цифровых
двойников при разработке программы, проанализированы сложности по созданию цифровых
двойников. Прототип, экземпляр, агрегированный. Цифровая тень. В статье рассматривается
авторская разработка Виртуальный учебный комплекс «Рабочее место технолога ЦДНГ».
Ключевые слова: нефтегазовая промышленность; CAE-программы; моделирование;
визуализация; разработка программного обеспечения; цифровые двойники; виртуальный
учебный комплекс.
Четвертая промышленная революция вносит мощные изменения не только в сфере
производства, но и во всем укладе жизни общества.
Быстро изменяющаяся среда цифровой экономики требует иных способов управления
компаниями и использования современных цифровых технологий: искусственного
интеллекта, больших данных, блокчейна, интернета вещей и других [1].
В отчете за 2020 год сказано, что российские компании осознали важность и
преимущества цифровой трансформации и в два раза больше предприятий, чем в 2018 году,
начали подходить к вопросу системно и осуществлять преобразования в рамках специальной
стратегии [2]. Для перехода на цифровой уровень необходимо также разработать новую
бизнес-модель, трансформировать бизнес-процессы, создать и развить соответствующую
стратегию и культуру [3].
По данным Gartner, 12% компаний, которые используют интернет вещей, также
применяют и цифровые двойники, а 62% планируют это сделать. GE Digital в 2019 году
называла цифру в 1,2 млн цифровых двойников в мире. По другим прогнозам, в ближайшие
пару лет рынок цифровых двойников достигнет $16 млрд.
В промышленности технология цифровых двойников на данный момент времени
помогает повысить эффективность минимум на 10%, а в нефтяной отрасли, кроме повышения
и сэкономить от 5% до 15% капитальных вложений. В ближайшие годы крупные компании
перейдут к дистанционному мониторингу и управлению целыми производствами и всеми
подразделениями через виртуальные системы. Различают следующие цифровые двойники:
Цифровой двойник – прототип (Виртуальный аналог имеющегося в реальности
физического объекта. Он включает в себя данные для всесторонней характеристики модели, в
том числе информацию по его созданию в реальных условиях).
Цифровой двойник – экземпляр (Содержит трехмерную модель, данные о материалах и
процессах выполняемых, во всех временных отрезках, итоги тестов, записи о проведенных
ремонтах, операционные данные, полученные от датчиков, параметры мониторинга).
75СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Цифровой двойник – агрегированный (Вычислительная система, которая объединяет все
цифровые двойники и их реальные прототипы, позволяет собирать данные и обмениваться
ими).
В самом начале выполнения работы по созданию цифрового двойника, возникли
определённые сложности. Во-первых, необходимо было разобраться с терминами.
Например, существует термин – «цифровая тень». Как понять данный термин? Как
использовать в работе?
Термин «цифровая тень» – способность прогнозировать поведение реального объекта,
при тех условиях, в которых осуществлялся сбор данных. Нет возможности моделировать
поведение при других ситуациях.
В отличие от «цифровой тени», цифровые двойники могут, как моделировать процессы
с использованием собранных данных, так и претворять их в жизнь в реальном времени.
Цифровой двойник может провести моделирование развитие событий в зависимости от
различных факторов, как сторонних, так и внутренних, отыскать наиболее эффективные
режимы работы, выявить возможные риски.
Во-вторых, это научиться собирать, анализировать, обрабатывать и хранить все данные
с реального объекта.
Для реализации реальной системы с цифровым двойником, необходимо провести
большую работу – собрать всю доступную информацию в единую структуру. Собрать и
настроить инфраструктуру способную эффективно и качественно строить прогнозы. Помимо
математических моделей, условий среды, данных с различных датчиков, сюда входят такие
данные, как текущие настройки оборудования, данные о техническом обслуживании
оборудования. В идеале необходимо обеспечить непрерывную передачу данных в цифровой
двойник, чтобы отображать актуальную картину. Собранные данные должны храниться,
управляться и преобразовываться в формат, который можно использовать для алгоритмов или
моделирования. Оптимальной погрешностью между работой цифрового двойника и его
физического прототипа считают 5%.
И наконец третья задача – цифровой двойник должен уметь адаптироваться. Это значит
если что-то изменилось, в окружающей среде или в условиях эксплуатации, это должно быть
легко адаптировано в цифровом двойнике через параметры модели. Не обязательно
оперативно, но наличие подобного функционала обязательно. Иначе с течением времени
разрыв между реальным объектом и цифровым двойников будет увеличиваться и развивать
данную модель не будет смысла.
В проекте виртуального учебного комплекса «Рабочее место технолога ЦДНГ»
проведены пробные работы по созданию цифровых двойников оборудования. На рисунках 1-
3 показан эскиз окна приложения. Проект получил грант ректора НВГУ.
76СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Рабочее место технолога. Главное окно программы
Рис. 2. Рабочее место технолога. Оборудование
77СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 3. Рабочее место технолога. Оборудование
Виртуальный тренажер максимально близко повторяет инфраструктуру цеха добычи
нефти и газа, оборудования входящего в его состав. Визуализирует работу оборудования с
помощью компьютерной 3D-графики, делая возможность проводить обучение специалистов
с максимальным приближением к реальным условиям работы, но без рисков для людей и
оборудования. Крупноблочно основные этапы создания цифровых двойников оборудования:
 Обследование
 Проектирование
 Тестирование
 Опытно-промышленное испытание, отладка.
В виртуальном тренажере с помощью трехмерной графики и 3D-моделей качественной
детализации создается цех добычи нефти и газа с технологическим оборудованием. Также в
тренажере реализованы виртуальные модели реальных органов управления оборудования.
Идет процесс разработки имитаций аварий с целью отработки специалистами цеха добычи
нефти и газа мероприятий по устранению и недопущению аварийных ситуаций. В учебном
направлении идут работы по разработке блока лабораторных работ для студентов,
позволяющих максимально близко познакомиться с оборудованием и выполнять работы, где
условия приближены к производственным. Проведены работы по сбору, анализу и обработке
реальных производственных данных для создания моделей. Выполнены работы по созданию
базы данных, которые используются в данном виртуальном тренажере. Планируется в
дальнейшем наладить обновление данных для настройки имитационных процессов.
Подведём итоги. Использование цифровых двойников CAE-программах для
нефтегазовой промышленности является неотъемлемой частью современных технологий. Они
позволяют инженерам и специалистам создавать виртуальные модели, анализировать системы
и процессы, и оптимизировать их для достижения лучших результатов. Цифровые двойники
78СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
все активнее используются в промышленности, в том числе нефтегазовой. Идет активная
разработка моделей. Одним из примером таких моделей является разрабатываемая автором
виртуальный учебный комплекс «Рабочее место технолога ЦДНГ». Были разработаны
трехмерные модели, план, схема цеха добычи нефти и газа. Произведен сбор данных, на
основе которых проводилась работа по созданию цифрового двойника. Работа продолжается,
данные обновляются о работе оборудования. Идет активная фаза по разработке лабораторной
работы, способной имитировать технической сбой с целью обучения сотрудника, студента на
поиск и устранение сбоя и запуска оборудования в работу.
Литература
1. Абрамова В.И., Головина О.Л. Цифровая трансформация экономики. М.: НИЯУ
МИФИ, 2020. 252 с.
2. Цифровая трансформация в России – 2020. Отчёт KMDA 2020. https://clck.ru/39Z4rB
3. Laužikas M., Miliūtė A. 2020. Liaisons between culture and innovation: comparative
analysis of South Korean and Lithuanian IT companies // Insights into Regional Development. 2020.
№ 2(2). Pp. 523-537.
© Соловьев А.А., 2024
79СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
КОМПЬЮТЕРНОЕ МОДЕЛИРОВАНИЕ
В ПРИКЛАДНЫХ НАУКАХ
(ФИЗИКА, ХИМИЯ, БИОЛОГИЯ И ДР.)
УДК 51-76
Копыльцов А.В.
д-р техн. наук, профессор
Санкт-Петербургский государственный университет
аэрокосмического приборостроения
г. Санкт-Петербург, Россия
Дюжикова Н.А.
д-р биол. наук
Институт физиологии им. И.П. Павлова РАН
г. Санкт-Петербург, Россия
КОМПЬЮТЕРНОЕ МОДЕЛИРОВАНИЕ МАГНИТНОГО ПОЛЯ В
ОКРЕСТНОСТИ КАПИЛЛЯРОВ
Аннотация. Эритроцит, перемещаясь по узкому капилляру, движется подобно гусенице
трактора и совершает до 50 оборотов в секунду. Заряды на поверхности эритроцита движутся
вместе с мембраной и порождают магнитное поле. Напряженность магнитного поля (НМП)
может быть оценена при следующих предположениях: объем и площадь поверхности
эритроцита постоянны, заряды на мембране дискретные, равномерно распределены и
движутся в плоскостях параллельных плоскости симметрии эритроцита. Применяя закон Био-
Савара-Лапласа можно вычислить на компьютере распределение НМП в окружающем
пространстве. Расчеты НМП были проведены в плоскостях параллельных оси капилляра, по
которому движется эритроцит. Также расчеты были сделаны для последовательности
эритроцитов в узком капилляре и совокупности эритроцитов в капиллярной сети,
представляющей собой множество параллельных узких капилляров, лежащих в одной
плоскости. Проведенные расчеты на компьютере позволили получить распределение НМП в
окрестности одиночного эритроцита, движущегося по капилляру, капилляра, содержащего
последовательность эритроцитов, и капиллярной сети. При перемещении эритроцитов по
капиллярной сети показано, что при увеличении гематокрита и уменьшении расстояний
между капиллярами НМП в окружающем пространстве увеличивается. Найдены зависимости
максимального и минимального значений НМП от расстояний между центрами капилляров.
Показано, что при уменьшении расстояния между капиллярами в сети разница между
максимальным и минимальным значениями НМП уменьшается, т. е. поле становится более
однородным. Этот показатель важно учитывать при разработке приборов измерения НМП
вблизи капиллярных сетей, которые могут быть использованы для локальной диагностики
пропускной способности капилляров на ранней стадии сердечно-сосудистых заболеваний
(инфарктов, инсультов и т. д.).
Ключевые слова: магнитное поле; эритроцит; капилляр; капиллярная сеть;
математическое моделирование.
При движении эритроцита по узкому капилляру он перекатывается вдоль капилляра
подобно гусенице танка (tank-treading motion). Скорость его перекатывания может достигать
до 50 оборотов в секунду и зависит от различных параметров: геометрических (диаметра
80СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
капилляра, площади поверхности и объема эритроцита), физических (скорости эритроцита в
капилляре, вязкости плазмы) и др. [2; 3]. На мембране эритроцита расположены скопления
анионных и катионных групп, которые создают суммарный отрицательный заряд эритроцита,
величина которого составляет от 22 тысяч до 2,2 миллиона элементарных зарядов, равных
заряду электрона 1.6×10-19 Кл [2; 1]. Отрицательные заряды на мембране предполагаются
отрицательными, дискретными и равномерно распределенными по поверхности.
В предыдущих публикациях были рассмотрены магнитные поля, порождаемые
одиночным эритроцитом и последовательностью эритроцитов в узком капилляре [1]. В
настоящее время создать прибор для измерения напряженности магнитного поля (НМП) в
окрестности одного капилляра не представляется возможным. Поэтому, важно провести
расчеты НМП в окрестности капиллярной сети и на основе этих расчетов разработать
принципы построения приборов, которые позволят измерять НМП в системе
микроциркуляции. В случае разработки таких приборов, можно будет диагностировать
заболевания сердечно-сосудистой системы на ранних стадиях, в первую очередь инфаркта,
инсульта и др.
Математическое моделирование. Математическая модель предполагает входные и
выходные параметры. К входным параметрам модели относятся: заряд эритроцита,
количество дискретных зарядов на мембране эритроцита, траектории по которым движутся
заряды, координаты точек в которых определяется НМП, скорость эритроцита в капилляре,
частота вращения мембраны эритроцита, гематокрит, расстояние между капиллярами. К
выходным параметрам относятся: величины НМП в выбранных точках трехмерного
пространства. Расчеты проводились при гематокрите 5-25% и расстояниях между
капиллярами 30-80 мкм.
Форма эритроцита в узком капилляре аппроксимирована усеченным цилиндром с
максимальной (L =A2A3) и минимальной (L =A1A4) образующими (рис. 1).
max min
Рис. 1. Пересечение плоскости XOZ с трехмерной моделью эритроцита.
A1A2=2×r, r – радиус эритроцита
Величины r, L , L , объём (V ) и площадь поверхности (S ) эритроцита связаны
max min RBC RBC
следующим образом:
V r2L r2(L L )/2,
RBC min max min
81СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
S r2 2rL r(L L )r( 4r2 (L L )2)/2,
RBC min max min max min
L V /(r2)2((S r2 2V /r)/(r)4r2)2,
min RBC RBC RBC
L V /(r2)2((S r2 2V /r)/(r)4r2)2.
max RBC RBC RBC
Заряды вместе с мембраной движутся в плоскостях, которые параллельны плоскости XOZ
(рис. 2).
Движущиеся заряды генерируют в окружающем пространстве магнитное поле,
напряженность которого равна
QVELsin
H  ,
4R2
где R – расстояние от заряда Q на мембране эритроцита до точки (x, y, z) в трехмерном
пространстве, в которой определяется НМП, VEL – скорость заряда, α есть угол между VEL и
R (закон Био-Савара-Лапласа) (рис. 3).
Рис. 2. Траектория движения зарядов B1B2B3B4B1
Рис. 3. H – НМП, генерируемая зарядом Q
Расчеты проводились при следующих входных параметрах (табл.).
Таблица
Входные параметры
Параметры Параметры, используемые при
(интервалы их изменения) расчётах
Диаметр эритроцита в капилляре (3 – 6 мкм) 4 мкм
Скорость эритроцита в капилляре (0 – 1000 мкм/с) 100 мкм/с
Объём эритроцита (80 -110 мкм3) 94 мкм3
Площадь мембраны эритроцита (120 – 150 мкм2) 135 мкм2
82СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Заряд эритроцита (3×10-15 – 3,5×10-12 Кл) 3,2×10-12 Кл
Число траекторий зарядов (11 – 501) 101
Гематокрит в капилляре (0 – 20%) 14.67%
Расстояние между капиллярами (30-80 мкм) 51 мкм
Результаты и их обсуждение. При движении эритроцита или последовательности
эритроцитов по узкому капилляру в окружающем пространстве генерируется магнитное поле
(рис. 4-5). При движении эритроцитов в капиллярной сети, представляющей собой множество
параллельных узких капилляров, в окружающем пространстве также генерируется магнитное
поле (рис. 6). Проекции на плоскости XOY, XOZ, YOZ представлены на рисунках 7-9.
Рис. 4. H (А/м) в плоскости z=34×10-6 м (аппликата), ось X×10-6 м (ордината), ось Y×10-6 м
(абсцисса)
Рис. 5. H (А/м) в плоскости z=-34×10-6 м (аппликата),
ось X×10-6 м (ордината), ось Y×10-6 м (абсцисса). Ht=14,67%
83СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 6. H (А/м) в плоскости z=34×10-6 м (аппликата), ось X×10-6 м (ордината),
ось Y×10-6 м (абсцисса). Ht=14,67%. Расстояние между капиллярами 47×10-6 м
Рис. 7. H в плоскости z=34×10-6 м (проекция на плоскость XOY),
ось ординат X×10-6 м, ось абсцисс Y×10-6 м
84СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 8. H в плоскости z=34×10-6 м (проекция на плоскость XOZ),
ось ординат X×10-6 м, ось абсцисс Y×10-6 м
Рис. 9. H в плоскости z=34×10-6 м (проекция на плоскость YOZ),
ось ординат X×10-6 м, ось абсцисс Y×10-6 м
Зависимости максимального Hmax и минимального Hmin значений H (А/м) (в плоскости
z=34×10-6 м) от расстояния между центрами капилляров D (мкм) имеют вид
Hmax=-0.087×D+8.82,
Hmin=-0.114×D+9.48.
Видно, что с уменьшением расстояния D значения Hmax и Hmin увеличиваются, а
разница между ними убывает. Так, при изменении D от 41 мкм до 51 мкм (на 24,39%) Hmax
уменьшается от 5,16×10-5 А/м до 4,43×10-5 А/м (на 14,15%), а Hmin снижается от 4,57×10-5 А/м
85СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
до 3,74×10-5 А/м (на 18,16%). Разница Hmax-Hmin уменьшается от 0,79×10-5 А/м до 0,69×10-5
А/м (на 12,99%) при изменении расстояния D от 41 мкм до 51 мкм (на 24,39%). Это
объясняется тем, что поскольку НМП уменьшается обратно пропорционально квадрату
расстояния, то при больших расстояниях между капиллярами влиянием соседних капилляров
можно пренебречь. Если расстояние D уменьшается, то вклад соседних капилляров в общую
величину НМП увеличивается и его необходимо учитывать. При расчете НМП учитывался
вклад пяти соседних капилляров, что оказалось достаточно для расстояний между
капиллярами 30–80 мкм.
Расчёты НМП вблизи плоской капиллярной сети, состоящей из параллельных узких
сосудов, показали, что максимальные и минимальные значения НМП в плоскости,
параллельной плоскости капиллярной сети, увеличиваются с увеличением гематокрита в
капиллярах и уменьшением расстояния между капиллярами. При увеличении плотности
капиллярной сети разница Hmax-Hmin уменьшается, т.е. поле становится более однородным.
Этот показатель может быть учтен при разработке устройств измерения НМП вблизи
капиллярных сетей, которые можно использовать для локальной диагностики пропускной
способности капилляров на ранней стадии сердечно-сосудистых заболеваний (инфарктов,
инсультов и т. д.).
Благодарность за финансовую поддержку работы
Работа выполнена при финансовой поддержке Министерства науки и высшего образования
Российской Федерации, соглашение № FSRF-2023-0003, «Фундаментальные основы
построения помехозащищенных систем космической и спутниковой связи, относительной
навигации, технического зрения и аэрокосмического мониторинга».
Литература
1. Копыльцов А.В. Математическое моделирование магнитного поля в окрестности
узкого капилляра при различных значениях гематокрита // Инженерный вестник Дона. 2023.
№8. https://clck.ru/39StPs
2. Fung Y.C. Biomechanics. Berlin: Springer, 1996.
3. Kopyltsov A.V. Mathematical model of the motion of asymmetric erythrocytes along narrow
capillaries // Russian Journal of Numerical Analysis and Mathematical Modeling. 2012. Vol. 26. №6.
Pp. 535-553.
© Копыльцов А.В., Дюжикова Н.А., 2024
86СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 51-76, 576.32, 577.35
Красняков И.В.
канд. физ.-мат. наук, старший преподаватель
Костарев К.В.
аспирант
Брацун Д.А.
д-р физ.-мат. наук
Пермский национальный исследовательский политехнический университет
г. Пермь, Россия
ВЕРШИННАЯ МАТЕМАТИЧЕСКАЯ МОДЕЛЬ МОРФОГЕНЕЗА
ЭПИТЕЛИАЛЬНОЙ ТКАНИ
Аннотация. Математические модели эпителиальных тканей позволяют исследовать
динамику развития клеток, их взаимодействие друг с другом и перемещение, процессы
интеркаляции, обмен хемомеханическими сигналами друг с другом, а также процессы
морфогенеза, канцерогенеза, заживления ран и др. В данной работе предлагается вершинная
математическая модель морфогенеза плоской эпителиальной ткани. Элементарной единицей
системы является клетка, которая представлена многоугольником способным динамически
изменять свою форму и размеры. Мы вводим новый потенциал, который учитывает не только
эластичность периметра и площади клеток, но и эластичность их внутренних углов. Также мы
вводим интегральное уравнение химического сигнала, что позволяет учитывать
хемомеханическое взаимодействие элементов системы. Помимо перечисленного в модели
учитываются важные процессы реального эпителия – пролиферация и интеркаляция клеток.
Численно моделируя деление клеточной ткани, мы генерируем различные по морфологии
клеточные сетки, которые зависят от физических параметров. Также в работе представлены
результаты моделирования морфогенеза эпителиальных тканей, а именно дробление,
образование бластулы и гаструлы.
Ключевые слова: математическое моделирование; вершинная модель; модель
морфогенеза; эпителиальная ткань.
В последнее десятилетие выросло число работ, посвящённых разработке моделей живых
многоклеточных тканей и их исследованию [1; 5 и цитируемые в них]. Такой интерес учёных
связан с быстрым развитием компьютерных технологий, которые позволяют проводить
исследования методами in silico без вреда для реальных живых организмов. Кроме этого,
математические модели позволяют проследить эволюционную динамику системы.
Нами разработана математическая модель морфогенеза эпителиальных листов. Каждая
клетка в системе представлена в виде многоугольника. Система откалибрована так, что
наиболее вероятной формой многоугольника является шестиугольник, но появление других
форм многоугольников не исключено.
Для моделирования динамики системы мы задаём уравнение потенциальной энергии
U t 
Nc 
A  A 2 P2
n0
 l l 2
n0
 
2
 . (1)
i 0 i ij 0 ij 0
 
i1 j1 j1
Здесь первое слагаемое описывает эластичность площади клетки с коэффициентом
упругости η, где A это текущая площадь клетки, а A – среднее значение площади для всех
i 0
клеток. Второе слагаемое в (1) описывает сократимость периметра клеток с коэффициентом μ,
87СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
который можно интерпретировать как способность к сократимости цитоскелета клеток.
Третий член в уравнении (1) описывает эластичность рёбер клетки, где σ – это коэффициент
эластичности ребра, l – длина j-ребра i-клетки, а l – средняя длина ребра. Четвёртое слагаемое
ij 0
в (1) описывает эластичность округлой формы клетки с коэффициентом ϕ, α – текущее
ij
значение j-угла i-клетки в радианах, а α – среднее значение угла, α = π / 3. В основном клетки
0 0
имеют округлую форму и только в определённом состоянии они могут иметь отрицательные
углы [14]. В связи с этим мы предполагаем, что коэффициент ϕ = 1, это означает, что
отклонения внутреннего угла клетки α от среднего значения α минимальны. Так мы
ij 0
ограничиваем эластичность клеток-многоугольников, чтобы запретить появление
многоугольников с отрицательными углами.
Рис. 1. Схематическое представление клеток математической модели
Ткань эволюционирует посредством перемещения вершин (красные точки на рис. 1)
клеток-многоугольников. Вектор механической силы, действующей на вершину клетки
(зелёные стрелки на рис. 1), вычисляется стандартным образом для механики потенциальных
сил, как градиент со знаком минус от потенциальной энергии по радиус-вектору ζ-узла
U
F   . (2)
 R

Скорость перемещения клетки определяется средним арифметическим скоростей
перемещения её вершин. Уравнение перемещения для вершин мы записываем в рамках
механики Аристотеля, где силы определяют скорость
 
V  kF H F F . (3)
   0
Такой подход был выбран в связи с тем, что клеточная ткань является сильно
диссипативной средой. Это значит, что всякое движение клеток происходит без эффекта
инерции. Например, в своей работе авторы продемонстрировали, как движется иммунная
клетка в эпителиальной ткани [12]. Они отмечают, что клетка во время своего перемещения
часто имеет нулевую или околонулевую скорость, а пик скорости принимает значения равные
10 мкм/с. Также следует учитывать, что эпителиальные клетки соединяются друг с другом
десмосомами и плотно прилегают друг к другу. Перемещение мезенхимальных клеток в
эпителии происходит со значительным сопротивлением из-за низкой проницаемости
клеточной среды, т. е. без эффекта инерции. Можно провести прямую аналогию с задачей о
течении жидкости в пористой среде, где её просачивание происходит с сильными
88СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
внутренними диссипациями. В этом случае движение жидкости описывается уравнением
Дарси, где отсутствует инерционный член, а скорость движения напрямую определяется
силами. Именно по этой причине уравнение движения было записано в рамках механики
Аристотеля. Здесь k – коэффициент мобильности клетки с подходящей размерностью, H –
функция Хэвисайда, а F определяет критическую силу, ниже которой узел остаётся
0
неподвижным.
Важный механизм функционирования любой живой материи – это способность к
самовоспроизведению за счёт деления клеток. В модели мы вводим механизм деления клеток,
который случается со следующим распределением вероятности
p  p qn06
. (4)
div 0
Здесь p0 и q – параметры, определяющие частоту деления клеток, а n0 – число вершин в
клетке. Другой, не менее важный, механизм живой ткани – интеркаляция. Она возникает
всякий раз, когда длина ребра lij между соседними клетками становится меньше критического
значения.
Кроме механических взаимодействий клеток в системе мы вводим обмен химическими
сигналами. В роли химического сигнала может выступать концентрация кислорода, который
необходим клеткам для поддержания их жизнедеятельности. А также и процессы генной
регуляции, которые зарождаются в ядре клетки, например, синтез белков семейcтва RhoA,
которые регулируют сократимость цитоскелета. Клетки должны иметь способность
«потреблять» и перераспределять химические сигналы между соседями (серые стрелки на
рис. 1). Эти процессы проще всего описать следующей системой уравнений
 
J l C C
ij ij i j
dC n0 . (5)
i J C
dt ij i
j1
Первое уравнение описывает межклеточную диффузию химических сигналов между
соседями i-ой клетки. Здесь δ – коэффициент диффузии, а C – вектор концентраций
химических сигналов, участвующих в процессах жизнедеятельности клетки. Второе
уравнение описывает потребление и перераспределение этих сигналов, где суммирование
потока ведётся по количеству соседей n0 i-ой клетки, а β – коэффициент деградации сигнала.
Благодаря введённой системе уравнений становится возможным имитировать эволюцию
реальных тканей, которые по своей природе являются хемоэластомерами
Перед изучением морфологии тканей обсудим сначала некоторые общие свойства
модели. Важной особенностью являются основные состояния, или наиболее расслабленные
конфигурации клеточной сетки, соответствующие минимуму потенциальной энергии всей
системы. Но всё же эти состояния не соответствуют реалистичной морфологии тканей, об этом
ещё будет сказано ниже. Однако, основные состояния являются эталонными, когда все клетки
одинаковы, т. е. A = A , l = l , α = α . Далее будут представлены результаты подробного
i 0 ij 0 ij 0
исследования введённого нами потенциала (1).
89СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 2. Диаграмма основных состояний модели
На рисунке 3 показаны основные конфигурации клеточной сетки, где можно выделить
следующие области: розовая – клетки одинаковых размеров; голубая – наличие клеток
«пузырей»; красная – нитевидная форма ткани. Такие геометрии клеточной сетки
определяются двумя параметрами уравнения (1): μ – сократимости и η – эластичности.
Параметр ϕ = 1, это означает, что отклонения внутреннего угла клетки α от среднего значения
ij
α минимальны, а коэффициент эластичности рёбер в этом случае принимает значение σ = 1.
0
Это значит, что рёбра клеток практически несжимаемы, и их длина стремится к равновесному
значению l .
0
Все расчёты выполнялись с одинаковыми начальными условиями – ткань состоит из 32
клеток со свободными границами. Шаг изменения параметров Δη и Δμ = 0.1. Рассмотрим
процесс развития ткани в разных основных состояниях, выделенных на диаграмме (рис. 2),
подробнее.
Случай, когда образуются клетки приблизительно одинаковых размеров (рис. 2 розовая
область). Такой рисунок клеточной сетки образуется в случаях, когда пара значений η–μ
находятся выше чёрной прямой. На рисунке 3а показано состояние клеточной сетки.
Результаты моделирования показывают, что с ростом числа клеток значение энергии,
приходящейся на одну клетку (рис. 3 б), увеличивается. Начальный этап роста ткани
сопровождается резким увеличением энергии, при дальнейшем увеличении числа клеток рост
энергии замедляется, стремясь к некоторому постоянному значению, которое превышает
значение основного состояния (зелёная прямая на рис. 3 б) гексагональной решётки
недеформированных клеток.
90СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
а б
в г
д е
Рис. 3. Случай 1, соответствующий точке из розовой области диаграммы основных
состояний модели (рис. 2). Параметры μ = 0.1 и η = 0.8
В ходе этого процесса возникает паттерн в виде многоугольной сетки (рис. 3 а), который
можно охарактеризовать долей клеток различных многоугольников (т.е. клеток с разным
числом узлов n) P (t) и нормированными значениями средней площади клеток с n-узлами
n
<A > (t) к их среднему значению площади A . В начальный момент времени доля n-сторонних
n 0
клеток P (t) (рис. 3 в) и их нормированная средняя площадь <A > (t) / A (рис. 3 г) находятся
n n 0
91СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
около значения равного единице. Это объясняется тем, что начальная конфигурация состоит
из 32 недеформированных гексагональных клеток. Но при развитии системы эти величины
начинают флуктуировать и затем сходятся к стационарным значениям. Далее, когда мы будем
упоминать о восьмиугольных клетках, то также учитываются и клетки-многоугольники с
числом сторон n > 8. Из графиков, представленных на рисунке 3 в, г можно заключить, что
0
по мере увеличения количества клеток рисунок сетки ткани становится стационарным.
Установившиеся значения P и <A > / A для различных классов многоугольников показаны
n n 0
на рисунке 3 д и рисунке 3 е соответственно. Видно, что для сетки в конечный момент времени
наиболее частым классом многоугольников являются шестиугольники, а среднее число сторон
соседних клеток-многоугольников составляет <n> = 6.38. Нормированная средняя площадь
<A > (t) / A для четырёхугольных клеток колеблется около постоянного значения (рис. 3 г), а
n 0
для пяти-, шести-, семи- и восьмиугольных клеток – со временем уменьшается и выходит на
стационарное значение. Наблюдаемый эффект связан с тем, что четырёхугольные клетки
появляются в результате деления пятиугольных клеток или при интеркаляции. Чем меньше
сторон у клетки, тем меньше вероятность её деления, это обусловлено распределением (4). Что
же касается клеток с шестью сторонами, то видно, что их нормированная площадь отклоняется
от среднего значения A (рис. 3 г, е) примерно на 40 %. Это хорошо согласуется с
0
экспериментальными наблюдениями деления эпителиальных клеток эмбриона рыбки данио-
рерио [4]. Аналогичная тенденция наблюдается и у пяти-, семи- и восьмиугольных клеток.
В другом случае (рис. 2 синяя область) происходит образование клеток «пузырей».
Такой рисунок клеточной сетки образуется при паре значений η–μ, ниже чёрной прямой. На
рисунке 4а показано состояние клеточной сетки. Полученная клеточная сетка наблюдается в
реальных экспериментах с эпителиальными тканями [9; 12]. Стоит отметить, что подобные
клеточные сетки наблюдаются в развивающихся тканях. В развитых же тканях наблюдается
клеточная сетка, изображённая на рис. 1 (розовая область). С ростом количества клеток
значение энергии на одну клетку вначале резко уменьшается, а затем начинает возрастать (рис.
4б). При дальнейшем увеличении количества клеток, рост энергии системы замедляется и
выходит на стационар, который не превышает значение основного состояния гексагональной
решётки недеформированных клеток (зелёная прямая рис. 4б).
Клетки «пузыри», которые образуются при эволюции ткани (рис. 4 а), это клетки с
числом рёбер n ≥ 7. Для такого типа сетки характерно сходство со случаем из розовой области
0
в распределении клеток с разным числом сторон (см. рис. 3 в и рис. 4 в; рис. 3 д и рис. 4 д).
Видно, что в этом случае в начальный момент времени количество четырёхугольных клеток
резко увеличивается, а затем их число уменьшается. Из графика нормированных значений
средней площади клеток <A > / A (рис. 4 г) видно качественное сходство со случаем из
n 0
розовой области (рис. 3 г), но количественные данные отличаются сильно. Средняя площадь
четырёхугольных клеток составляет <A > ≈ 1 / 4 A (рис. 4 е), а шестиугольных клеток,
4 0
которые в рамках модели являются эталонными, составляет <A > ≈ 1 / 2 A . Такое поведение
6 0
системы связано с тем, что в уравнении (1) второе слагаемое преобладает над первым. Таким
образом происходит сокращение периметра клеток, что ведёт за собой уменьшение их
92СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
площади. Причём сокращение периметра тем сильнее, чем меньше сторон у клетки. Восьми-
и более угольные клетки не отклоняются от среднего значения A , в то время как другие
0
клетки-многоугольники сжимаются. Также, как и в случае 1 в конечный момент времени
наиболее частым классом клеток-многоугольников являются шестиугольники, а среднее
число сторон соседних клеток составляет <n> = 6.28 (рис. 4д).
а б
в г
д е
Рис. 4. Случай 2, соответствующий точке из синей области диаграммы основных состояний
модели (рис. 3). Параметры μ = 0.7 и η = 0.0
93СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Стоит отметить, что чем пара значения η–μ находятся ближе к чёрной границе, тем
размеры клеток «пузырей» становятся меньше. Отсюда можно заключить, что увеличение
коэффициента η компенсирует отклонение от минимума потенциальной энергии системы
(рис. 5) Состояние системы при η = 1 энергетически выгодное, которое соответствует
минимуму потенциальной энергии.
Рис. 5. Энергия на одну клетку. Вертикальный срез диаграммы основных состояний
(рис. 3) при фиксированном параметре μ = 0.5
В третьем случае (рис. 2 красная область) наблюдается образование клеточных
нитевидных структур (рис. 6 а), в которых преобладают клетки-многоугольники с четырьмя
сторонами. Такой эффект связан с тем, что в этом случае коэффициент эластичности η = 0, т.е
отсутствует слагаемое, влияющее на сохранение площади клеток, а слагаемое с
коэффициентом μ в полной мере оказывает влияние на форму клетки. Если μ > 0, то клетки
имеют тенденцию сокращаться, а если μ < 0, то границы клеток расширяются. Как можно
увидеть из графика изменения средней длины ребра <l > клеток во времени (рис. 6 б),
0
происходит резкое уменьшение этой величины с последующим выходом на стационар. Из
этого можно заключить, что второе слагаемое в уравнении (1) преобладает над третьим, что
приводит к такому эффекту.
а б
Рис. 6. Случай 3, соответствующий точке из красной области диаграммы основных
состояний (рис. 2). Параметры μ = 0.1 и η = 0.8
94СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Всё это говорит о резком уменьшении энергии системы с последующим выходом на
постоянное значение, а такая форма ткани является наиболее энергетически выгодной.
Отметим, что предложенная модель позволяет проследить полную историю всех
изменений каждой клетки в рассматриваемом ансамбле, а общее количество клеток в ансамбле
ограничивается только вычислительными мощностями компьютера. Разработанная
дискретная математическая модель, не смотря на свою простоту, с определённой точностью
позволяет описывать функциональную единицу ткани – клетку, отслеживать её динамику в
пространстве, а также подробно воспроизводить клеточные процессы, такие как деление
клеток, интеркаляция и обмен хемомеханическими сигналами. Всё это, в свою очередь,
открывает возможность описывать такие процессы как заживление ран [13], развитие тканей
в порах скаффолда [2], смену фенотипа клеток и их миграцию [11] и развитие злокачественных
образований [3].
В работе нами проведено исследование эволюции клеточной системы, представляющей
собой эпителиальную ткань методами математического моделирования. При моделировании
морфогенеза эпителиальной ткани были обнаружены три различных состояния клеточных
сеток.
Первому состоянию соответствует рисунок клеточной сетки, состоящий из клеток
одинаковых размеров. Это наиболее распространённый рисунок клеточной сетки, получаемый
как при математическом моделировании [1; 6] так и при изучении тканей методами in vivo [4;
12]. Данный тип сетки имеет низкую потенциальную энергию. Распределение клеток по
формам соответствует нормальному с наиболее вероятным значением для шестиугольных
клеток. А распределение площадей клеток имеет удовлетворительное согласие с
экспериментальными данными (см. рис. 3 е).
Второму состоянию соответствует рисунок клеточной сетки с клетками-пузырями.
Данная морфология клеточной сетки регулярно встречается в экспериментальных
исследованиях [7; 10], но редко встречается упоминание о подобной клеточной сетке в работах
по математическому моделированию. Что касается клеточных сеток с клетками-пузырями (см.
рис. 4 а), то такие наблюдаются в тканях, которые находятся на начальном этапе развития. При
появлении в ткани клеток-пузырей, её энергетическое состояние сильно изменяется. С
энергетической точки зрения система становится не устойчивой. Это говорит о том, что в этой
ткани зарождаются патологические процессы. Поэтому такие системы требуют
дополнительного исследования. Полученные результаты помогают установить связь между
плеоморфизмом размера клеток и контролем упаковки клеток эпителия. Например, это может
иметь значение для понимания распространения опухолевых клеток при заболеваниях
человека. Понимание нормального развития эпителиальных тканей помогает исследовать и
выявлять аномалии и патологические состояния, связанные с этими тканями. Это важно для
диагностики и лечения различных заболеваний. Стоит отметить, что данный паттерн
наблюдается только в развивающихся эпителиальных тканях. Когда же эта ткань достигает
полного развития, то в ней отсутствуют клетки-пузыри, а рисунок клеточной сетки схож с тем,
как показано на рис. 2 в розовой области (клетки имеют одинаковые размеры), например, [8].
95СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Т. о., области, представленные на фазовых диаграммах (рис 1 и 6), можно классифицировать
как развивающиеся и развитые ткани.
С помощью разработанной математической модели проведено исследование эволюции
клеточной системы, представляющей собой эпителиальную ткань. Определены основные
состояния клеточных сеток в области основных управляющих параметров. Исследован
процесс дробления. Введение параметра ϕ, который определяет гибкость клеток и свободу
отклонения от среднего значения угла α , позволяет моделировать более сложное поведение
0
клеток. Это отражает трансформацию клеток в мезенхимальный фенотип, при котором клетки
становятся более подвижными и способными к перемещению в ткани между клетками [14].
Несмотря на то, что разработанная математическая модель является простой, необходимо её
дальнейшее исследование.
Исследование выполнено при финансовой поддержке Российского научного фонда, грант №
23-71-01020, https://rscf.ru/project/23-71-01020/.
Литература
1. Aliee M., Roper J.C., Landsberg K.P., Pentzold C., Widmann T.J., Jülicher F., Dahmann C.
Physical mechanisms shaping the Drosophila dorsoventral compartment boundary // Current Biology.
2012. Vol. 22. №11. P. 967-976.
2. Bratsun D., Krasnyakov I. Modeling the cellular microenvironment near a tissue-liquid
interface during cell growth in a porous scaffold // Interfacial Phenom. Heat Transfer. 2022. Vol. 10.
№3. P. 25-44.
3. Bratsun D.A., Krasnyakov I.V., Pismen L.M. Biomechanical modeling of invasive breast
carcinoma under a dynamic change in cell phenotype: collective migration of large groups of cells //
Biomech. Model. Mechanobiol. 2020. Vol. 19. P. 723-743.
4. Chan K.Y., Yan C.-C.S., Roan H.Y., Hsu S.C., Tseng T.L., Hsiao C.D., Chen C.H. Skin cells
undergo asynthetic fission to expand body surfaces in zebrafish // Nature. 2022. Vol. 605(7908). P.
119-125.
5. Cockerell A., Wright L., Dattani A., Guo G., Smith A., Tsaneva-Atanasova K., Richards
D.M. Biophysical models of early mammalian embryogenesis // Stem Cell Reports. 2023. Vol. 18.
№1. P. 26-46.
6. Farhadifar R., Roper J.C., Aigouy B., et al. The influence of cell mechanics, cell-cell
interactions, and proliferation on epithelial packing // Curr. Biol. 2007. Vol. 17. №24. P. 2095-2104.
7. Finegan T.M., Na D., Cammarota C., Skeeters A.V., Nadasi T.J., Dawney N.S., Fletcher
A.G., Oakes P.W., Bergstralh D.T. Tissue tension and not interphase cell shape determines cell
division orientation in the Drosophila follicular epithelium // The EMBO Journal. 2019. Vol. 38. №3.
e100072. https://doi.org/10.15252/embj.2018100072
8. Gosak M., Milojevic M., Maja M., Skok K., Perc M. Networks behind the morphology and
structural design of living systems // Phys Life Rev. 2022. №41. Pp. 1-21.
https://doi.org/10.1016/j.plrev.2022.03.001
96СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
9. Guillot C., Lecuit T. Mechanics of epithelial tissue homeostasis and morphogenesis //
Science. 2013. Vol. 340(6137). P. 1185-1189.
10. Hannig J., Schafer H., Ackermann J., Hebel M., Schafer T., Doring C., Hartmann S.,
Hansmann M.-L., Koch I. Bioinformatics analysis of whole slide images reveals significant
neighborhood preferences of tumor cells in Hodgkin lymphoma // PLoS Comput Biol. 2020. Vol. 16.
№1. e1007516. https://doi.org/10.1371/journal.pcbi.1007516
11. Krasnyakov I.V. Mathematical modeling of invasive carcinoma under conditions of
anisotropy of chemical fields: budding and migration of cancer cells // Russ. J. Biomech. 2022. Vol.
26. №3. P. 38-48.
12. Liu T.L., Upadhyayula S., Milkie D.E., Singh V., Wang K., Swinburne I.A., Betzig E.
Observing the cell in its native state: Imaging subcellular dynamics in multicellular organisms //
Science. 2018. Vol. 360. Art. eaaq1392.
13. Salm M., Pismen L.M. Chemical and mechanical signaling in epithelial spreading // Phys.
Biol. 2012. Vol. 9. №2. P. 026009-026023.
14. Thiery J.P., Sleeman J.P. Complex networks orchestrate epithelial–mesenchymal transitions
// Nat. Rev. Mol. Cell Biol. 2006. Vol. 7. № 2. P. 131-142.
© Красняков И.В., Костарев К.В., Брацун Д.А., 2024
97СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 538.97
Ситкевич А.Л.
магистр физ.-мат. наук
Крот В.В.
студент
Гродненский государственный университет им. Янки Купалы
г. Гродно, Беларусь
ПРОГРАММНЫЙ КОМПЛЕКС ДЛЯ ОПРЕДЕЛЕНИЯ ФУНКЦИИ ПАТТЕРСОНА
КРИСТАЛЛИЧЕСКИХ ОБРАЗЦОВ
Аннотация. Данная статья посвящена моделированию метода Паттерсона для изучения
характера структурных изменений кристаллической решетки образцов, подвергшихся
лазерной обработке. Кратко описывается применение метода Паттерсона, подробное описание
программного комплекса для моделирования этого метода.
Ключевые слова: рентгеновская дифрактометрия; метод Паттерсона; рентгенограмма;
межатомная функция; изменение кристаллической структуры.
Метод Паттерсона – мощный инструмент для анализа рентгеновских дифракционных
данных, который используется для определения структуры кристаллических материалов. Он
был разработан английским физиком Эриком Паттерсоном в 1934 году и с тех пор стал
важным инструментом для исследования кристаллических структур.
Основная задача метода Паттерсона – определение относительных положений атомов
внутри кристаллической структуры. Для этого он использует данные о рассеянии
рентгеновских лучей кристаллом, которые записываются в виде дифракционных образцов.
Метод Паттерсона применяется на этапе интерпретации этих образцов и предоставляет
информацию о том, какие атомы в кристалле находятся ближе друг к другу. Также метод
Паттерсона может использоваться для определения изменений в кристаллических структурах
образцов, например, изменения, вызванные облучением образца лазерным излучением. Если
кристаллическая структура образца изменилась под воздействием лазерного облучения, это
будет отражено в изменениях в дифракционных образцах. Путем анализа изменений в
дифракционных данных, можно определить, какие атомы или молекулы подверглись
изменениям в структуре, и оценить масштаб и характер этих изменений.
Принцип работы метода Паттерсона заключается в следующем:
1. Вычисление электронной плотности. Сначала вычисляется электронная плотность
кристалла, используя рентгеновские данные и математические преобразования Фурье.
Электронная плотность представляет собой трехмерную карту распределения электронов в
кристалле.
2. Вычисление автокорреляционной функции. Вычисляется автокорреляционная
функция электронной плотности, которая показывает, какие участки электронной плотности
коррелируют друг с другом при различных расстояниях и углах. Это позволяет выявить
симметричные элементы в структуре.
98СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
3. Поиск пиков в автокорреляционной функции. Анализируя автокорреляционную
функцию, метод Паттерсона находит пики, которые соответствуют возможным парам атомов
с известными расстояниями между ними.
4. Решение структуры. На основе пиков в автокорреляционной функции и с
использованием дополнительной информации о симметрии кристалла и химических
свойствах атомов определяется конечная структура кристалла.
Зачастую известна идеальная структурная модель кристалла, и необходимо установить
изменения взаимоконфигурации атомов в кристалле, подвергшемся лазерному (или иному)
облучению. Для анализа этих изменений нами предложено использовать корреляционную
функцию [5].
Таким образом, метод Паттерсона играет важную роль в кристаллографии, поскольку
предоставляет информацию о структуре кристаллических материалов, что имеет широкое
применение в различных областях науки и технологии, включая химию, физику и биологию.
При всей полезности этого метода, не было обнаружено ни одного программного
продукта, который бы осуществлял автоматическую обработку изображений рентгенограммы
и производил бы по ней расчет корреляционной функции. Таким образом, была поставлена
задача по разработке программного продукта, осуществляющего обработку рентгенограмм
кристаллических образцов, расчета по ним функции Паттерсона и сохранением результатов
базу данных.
Для реализации программы был выбран язык С# т.к. он предоставляет удобный способ
реализации фронтенд части приложения с использованием Windows Forms. В качестве
системы управления базой данных выступает данных PostgreSQL – это бесплатная, объектно-
реляционная система управления базами данных с открытым исходным кодом. PostgreSQL как
основную СУБД выбирают в большом количестве команд разработки при создании
коммерческого программного обеспечения.
Вкратце рассмотрим суть программы:
1) На вход программы подается изображение рентгенограммы исследуемого образца до
облучения (рис. 1). Также пользователь вводит дополнительные данные для расчета:
диапазоны углов тета, длина волны рентгеновского излучения, химический элемент
исследуемого образца
2) Программа анализирует полученное изображение и получает список пиков, в которых
содержится информация об интенсивности (высоте) пика и его угле тета.
3) Программа передает этот список в метод для расчета функции Паттерсона, где и
производится расчет.
4) Полученные данные сохраняются в базу данных, а также доступны для визуального
просмотра в виде графика.
5) Пользователю предлагается загрузить изображение рентгенограммы образца после
облучения (рис. 1) и пункты 2-4 повторяются.
После запуска программы, пользователя встречает форма для загрузки изображений, а
также для введения других параметров, необходимых для расчета метода Паттерсона. По
99СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
нажатию кнопки “Upload picture” пользователю открывается окно для выбора изображения,
которое программа отправляет его в метод RenderImage класса ImageProcessorService, где
изображение приводится к предварительно заданному размеру, после этого отображается
пользователю на форме.
Рис. 1. Пример изображения рентгенограммы исследуемого образца до облучения (слева) и
после облучения (справа)
Затем выполняется проверка введенных пользователем значений. Так, например,
минимальный угол тета должен быть меньше максимального и больше 20 градусов, а
максимальный должен быть меньше 120 градусов и больше минимального. Должен быть
выбран химический элемент исследуемого образца в выпадающем checkbox списке. Указано
текстовое описание текущего эксперимента, по которому впоследствии можно будет проще
идентифицировать конкретный эксперимент, когда он попадет в базу данных. Если какая-то
из проверок не прошла, пользователю будет выведено текстовое сообщение с кратким
описание того, что введено не так.
Если все проверки пройдены успешно, то запускается алгоритм выполнения метода
Паттерсона. Он состоит из трех этапов:
1) Сначала отрабатывает метод ProcessImage() класса ImageProcessorService по
результатам которого создается список считанных пиков и передается далее для расчета
метода Паттерсона в качестве одного из входных параметров метода Execute() класса
PattersonFunctionService.
2) Выполняется расчет метода Паттерсона, определяются основные величины.
3) Полученные результаты выполнения метода Паттерсона отправляются на форму для
отображения графиков, а также отправляются на сохранение в базу данных.
Рассмотрим каждый этап в отдельности.
100СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Определение высоты пиков и их углов на изображении графика не является тривиальной
задачей. Компьютер не воспринимает вертикальные и горизонтальные шкалы также, как это
делают люди. Для него, все изображение – это сплошной набор разноцветных пикселей.
Выбранный нами метод определения высот пиков довольно прост, однако требует
предварительной подготовки изображения:
 Необходимо убрать обе шкалы, т.к. они будут мешать корректной работе алгоритма.
 Для избавления от шумов на графике определим базовую линию, весь график ниже
которой мы будем считать шумами.
 Находим номера пикселей по оси абсцисс, которые соответствуют начальному и
конечному значений углов тета.
Алгоритм удаления шкалы достаточно прост, известно, что цвет пикселей фона – белый,
пиксель с любым другим цветом не часть фона. Обе шкалы – это длинные прямые линии,
которые нужно найти. Пройдя изображение по строкам снизу-вверх мы можем найти ту
строку, в которой количество идущих подряд не белых пикселей достаточно велико, чтобы
считать эту линию шкалой, таким образом мы находим линии шкал и убираем их. Также, при
определении конца горизонтальной шкалы – мы автоматически находим расстояние в
пикселях, на котором находится конечное значение углов тета. А определив номер пикселя по
ширине, где находится вертикальная линия, мы находим пиксель с начальным значением
углов тета.
Избавившись от шкал, может избавиться от базовой линии. Принцип также прост,
базовая линия на графике находится в месте, с самой высокой плотностью не фоновых
пикселей, поэтому идя по рядам, мы ищем первый ряд, в котором количество не белых
пикселей, в процентном соотношении, выше заданной заранее величины, как только нашли –
мы находимся в районе шумов. Теперь идем дальше и ищем первый ряд, где этот процент
ниже искомого, значит мы прошли линию шумов, таким образом мы и определили базовую
линию. Высота пиков будет отсчитываться именно от этой базовой линии. Любой пик,
который находится ниже ее, считается шумом и учитываться не будет.
Теперь мы можем найти сами пики. Идем по рядам сверху-вниз. Любой не белый пиксель
будет означать вершину пика, рассчитываем высоту пика относительно базовой линии и
заносим в список, не забывая при этом посчитать его угол тета. Чтобы на следующем проходе
опять не натолкнуться на этот же пик, просто удаляем из пикселей для перебора значение
пикселей по оси абсцисс для этого пика, плюс, несколько пикселей слева и справа от него. Это
гарантирует что пики будут посчитаны единожды. Дальше необходимо отсортировать
полученный список по углам тета и передать его в метод Execute класса
PattersonFunctionService
В методе Execute производится расчет метода Паттерсона, а затем данные об
эксперименте сохраняются в базу данных, и пользователю отображается форма, в которой
результаты эксперимента отображены на графике.
101СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 2. Логическая схема базы данных приложения
Рассмотрим структуру БД [1]. База данных состоит из четырёх таблиц, на рисунке 2
представлена логическая схема базы данных.
Основной таблицей является таблица experiment, которая олицетворяет собой один
проводимый эксперимент, то есть расчет функции Паттерсона до облучения
ультрафиолетовым излучением и после него. Она состоит из четырёх полей:
1. Id – уникальный идентификатор каждого эксперимента, он же является первичным
ключом таблицы. В качестве Id используются универсально уникальные идентификаторы
UUID.
2. Datetime – время создания эксперимента, используется для каталогизации
экспериментов и более удобного поиска по ним.
3. Elem_id – Каждый эксперимент проводится с конкретным химическим элементом, и
его id хранится в этом поле, связан с полем id таблицы element связью многие к одному.
4. Description – текстовое описание эксперимента. Также используется для более
удобного поиска по ним в дальнейшем.
В вышеупомянутой таблице element присутствуют 3 поля: Id – точно такое же поле, как
и в таблице experiment, Name – название элемента и deltaR – значение, характерное для
каждого химического элемента, используемое при расчете метода Паттерсона. Эта таблица
должна быть заполнена до начала работы с приложением, а т.к. у каждого клиента может быть
своя собственная база данных, то был предусмотрен текстовый файл elements.txt содержащий
в себе названия элементов и соответствующие им значения. При старте программы она
проверяет, существуют ли в базе данных все необходимые таблицы. Если таблицы
отсутствуют, то она их создает, а таблицу element также заполняет данными, которые были
получены из файла elements.txt путем вызова метода класса PropertyReader getAllElements.
Следующие две таблицы хранят данные непосредственно о самом эксперименте. В
таблице peak_data хранятся данные, необходимые для расчета метода Паттерсона, а в таблице
102СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
patterson_peak хранятся результаты этого метода. Рассмотрим таблицу peak_data. Она состоит
из 9-ти полей.
1. Experiment_id – указывает к какому эксперименту принадлежат данные. Поле связано
с полем id таблицы experiment связью многие к одному. Является частью составного
первичного ключа.
2. Is_uv_exposed – булево поле, показывающее то, принадлежат ли данные к образцу до
облучения или после него. Также является частью составного первичного ключа
3. Peak_id – указывают на номер конкретного пика, которому принадлежат данные в
конкретной строке. Является последней частью составного первичного ключа.
4. Intensity – хранит значение интенсивности пика
5. Doule_theta – хранит значение угла тета, которому принадлежит пик
6. Plg – хранит значение Plg фактора для пика.
7. F_squared – хранит значение квадрата функции F для пика.
8. D_over_n – хранит значение d/n пика.
9. One_over_d – хранит значение 1/(d/n) пика.
Каждая строка в базе данных должна иметь однозначный идентификатор, по которому
ее можно уникально идентифицировать. Найти только одно поле, которое могло бы
использоваться в качестве первичного ключа – не представляется возможным. Можно было
воспользоваться суррогатным авто инкрементируемым ключом, но особого смысла он не
несет. Поэтому было принято решение использовать составной первичный ключ, состоящий
из 3-ёх полей, эти три поля гарантированно будут уникальными для каждой строки. Составной
первичный ключ был также использован в таблице patterson_peak в ней, чтобы однозначно
идентифицировать строку, частями составного ключа являются все 4 поля.
1. Experiment_id – указывает к какому эксперименту принадлежат данные. Поле связано
с полем id таблицы experiment связью многие к одному.
2. Is_uv_exposed – булево поле, показывающее то, принадлежат ли данные к образцу до
облучения или после него.
3. U – хранит текущее значение шага в Ангстремах.
4. Pu – хранит значение метода Паттерсона P(u) для текущего значения u.
Дополнительные данные, необходимые для корректной записи информации в базу
данных также заполняются программой автоматически на этапе расчета функции Паттерсона.
Для работы с базой данных, в рамках нашего приложения, был выбран Entity Framework.
Его использование позволяет существенно увеличить скорость разработки, т.к. он забирает на
себя всю рутинную работу по открытию и закрытию соединений с базой данных, и написанию
SQL-запросов. Для работы с базой данных с помощью Entity Framework используются строго
типизированные LINQ – выражения, что обеспечивает защиту базы данных от SQL –
инъекций. Так как мы используем LINQ для выполнения запросов, то SQL-запросы
генерируются автоматически, что исключает возможность опечаток при его написании, а
также, позволяет компилятору указывать нам на потенциальные ошибки, например, если мы
пытаемся сохранить новый эксперимент в базу element.
103СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Стоит также рассмотреть структуру классов и пакетов в приложении. В основе лежит
трехслойная архитектура, которая делит классы приложения на 3 части [4]:
1. Контроллеры – классы, которые принимают запросы от пользователя и определяет то,
куда отравить запрос на обработку. По выполнению запроса, контроллер возвращает
пользователю результат работы. В нашем случае, классом контроллером являются классы
формы Form, они же, ответственны за отображение пользовательского интерфейса. Обычно,
контроллеры никак не обрабатывают полученные данные, их единственная задача – это
отправить запрос на обработку, однако у нас, классы контроллера по совместительству
являются классами для отображения пользовательского интерфейса и в нем также
реализованы методы корректности введенных пользователем данных. В нашем приложении
присутствует 3 формы-контроллера: форма для загрузки изображений, форма для
отображения результатов текущего эксперимента, форма для отображения результатов всех
экспериментов, доступных в базе данных.
2. Сервисы – классы, которые непосредственно обрабатывают данные, полученные от
контроллера. Здесь происходит сама обработка полученных данных. В нашем случае класса
сервиса два. ImageProcessorService – отвечает за обработку входящих изображений.
PattersonFunctionService – отвечает за расчет метода Паттерсона.
3. Репозитории – классы, которые непосредственно работают с базой данных. Они
принимают данные для обработки от классов сервисов и производят их обработку, будь то
сохранение, чтение, удаление или обновление данных из базы.
Использование трехслойной архитектуры позволяет легко масштабировать отдельные
части приложения, которые могут находиться на физически разных устройствах, и общаться
между собой, например по REST API. Изолированность модулей друг от друга также
позволяет нам, в случае необходимости, легко заменить один модуль – другим, при этом не
требуя от нас существенных затрат на изменение кода приложения.
Для тестирования работы программного комплекса был проведен расчет изменения
кристаллической структуры титана, подвергшегося лазерному облучению. Рассмотрим
воздействие лазерного излучения на образец α–Ti. На рисунке 1 представлены
рентгенограммы образцы до и после его обработки, из которых видно, что после лазерной
обработки наблюдается изменение интенсивности рефлексов, их положения и профилей.
Например, практически исчез рефлекс 103. Каждый максимум интенсивности на
рентгенограмме – это отражение n-го порядка от серии плоскостей (hkl) c межплоскостным
расстоянием d , соответствующим углам скольжения ϑ. Уравнение Вульфа-Брэгга
hkl
однозначно устанавливает связь между d и длиной волны характеристического излучения, в
hkl
котором получена рентгенограмма [2].
2dsinn
(1)
Отсюда
d 
d 
n hkl sin (2)
104СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Относительная экспериментальная погрешность определения межплоскостного
расстояния, как это следует из уравнения Вульфа-Брэггов (2), определяется условием:
d
ctg
d .
Облученные и эталонные металлические образцы исследовались на рентгеновском
K
дифрактометре ДРОН-2.0. В дифрактометре использовалось излучение линии  от трубки
с медным антикатодом λ = 1,54051Å, λ = 1,54433Å. Длина волны определялась
Кα1 Кα2
следующим образом:
 2   31,541783Å
ср K1 K2
Сперва необходимо определить максимумы интенсивности и соответствующие им
значения углов 2ϑ. По формуле (2) определить d .
hkl
Для более детального изучения характера структурных изменений необходимо
исследовать не только положения, но и интенсивности рентгеновских рефлексов, для чего был
использован метод межатомной функции (метод Патерсона). Для этого необходимо

 
P u
определить – самосвертку функции электронной плотности
1
Pu rrudr
V
11 (3)
которая является компонентой Фурье фактора рассеяния (структурной амплитуды)
PuF2 S
cos(2Su)dS
(4)

u
где – вектор, связывающий два рассеивающих центра, характеризующиеся радиус-
  
  
векторами r и r u , V 11 – рассеивающий объем, S – вектор обратного пространства.
2
F
По экспериментальным значениям интенсивностей определим :
Ihkl F2 PLGK
(5)
где PLG – «пээльжэ-фактор», К – совокупность ряда факторов.
PLG
фактор, а также фактор поглощения Р, которые для стандартного метода получения
рентгеновских дифрактограмм при монохроматизации рентгеновского излучения
селективным фильтром рассчитываются с использованием формул [3]:
1cos22
PLG 
2sin2
(6)
1cos22
P .
2sin2 (7)

F2 P u
По вычисленным значениям проводили расчет . Положения корреляционных
сфер сравнивали с величиной межатомного расстояния, определенной по структуре кристалла.

 
P u
Нами было рассмотрено 2 варианта расчета :
105СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
sin2su
P(u) F 2
i i 2su (8)
Pu F 2 cos2su
i
i (9)

 
P u
Расчет проводили в диапазоне u=1Å – 10Å с интервалом Δu=0,1Å. Результаты
расчетов представлены на рисунке 3.
Рис. 3. Результаты расчетов программы
Результаты расчетов показывают, что при воздействии на титановый образец излучения
рубинового лазера с q ~ 5∙104 Вт/см2 расщепления максимума P(u) не наблюдается, в то же
время как ширины максимумов рентгеновских дифрактограмм, так и форма функции P(u)
существенно меняется. Это свидетельствует о значительном изменении концентрации
дефектов кристаллической решетки в обработанной лазерным излучением зоне. При этом
микротвердость титана в облученной зоне существенно (на ~ 50%) увеличивается. Стоит
также отметить, что при плотностях потока ЛИ, достаточных для плавления металла в зоне
обработки (q> 106 Вт/см2) изменение дифрактограмм не наблюдалось, а микротвердость
немного уменьшалась. Проведенные исследования показали, что при действии лазерного
излучения на поверхность образцов из титана их кристаллическая структура меняется в
облученной зоне с равновесной на искаженную. Получено хорошее согласие рассчитанных и
полученных в ходе экспериментальных исследований результатов. Обнаруженный эффект
может быть связан с анизотропностью теплового расширения металла. Эффект может
усиливаться внутренним напряжением в облученной зоне в ходе формирования в
металлическом образце акустических волн.
Литература
1. Барсегян А.А., Куприянов М.С., Степаненко В.В., Холод И.И. Методы и модели
анализа данных: OLAP и Data Mining. СПб.: БХВ-Петербург, 2004.
106СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2. Горелик С.С., Расторгуев Л.Н., Скаков Ю.А., Рентгенографический и
электроннооптический анализ. М.: Металлургия, 2002.
3. Лиопо В.А., Авдейчик С.В., Овчинников Е.В., Малай Н.В., Струк В.А. Оценка
параметров наночастиц на основе корреляционных функций // Прикладная математика &
Физика. 2013. Т. 33. №26 (124). С. 181-186.
4. Фаулер М. Архитектура корпоративных программных приложений. Пер. с англ. М.:
Вильямс, 2006. С. 43-50.
5. Ivanov A.Y., Karpovich E., Sitkevich A., Valko N., Vasiliev S. Structure changes in metals
after their laser treating in different conditions // Energy Fluxes and Radiation Effects (EFRE–2022):
Proceedings of 8th International Congress (Tomsk, 2-8 okt. 2022). Томск, 2022. С. 896-901.
© Ситкевич А.Л., Крот В.В., 2024
107СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 535.317
Бездидько С.Н.
д-р техн. наук, профессор
Откупман Д.Г.
аспирант
Московский государственный университет геодезии и картографии
г. Москва, Россия
РАЗРАБОТКА ПРОГРАММЫ ДЛЯ РАСЧЁТА ОПТИЧЕСКИХ СИСТЕМ
Аннотация. Синтез и анализ сложных оптических систем не представляется возможным
без использования специализированного программного обеспечения. В некоторых случаях,
возникает потребность в самостоятельной разработке или необходимость в понимании
функционала таких программ, например, в учебных целях, при изучении дисциплин,
связанных с прикладной оптикой. В работе рассмотрены начальные этапы создания
программы для расчёта оптических систем с примером тестирования и даны общие
представления о структуре и возможностях подобных программных инструментов.
Ключевые слова: оптическая система; трассировка лучей; computer-aided engineering
(CAE); аберрации.
Подготовка исходных данных
Как правило, в частности для документации в виде оптического выпуска, основные
конструктивные параметры (формы и взаимного расположения поверхностей) оптической
системы представляют в следующем удобочитаемом виде:
𝑛
1
𝑟
1
𝑑 𝑛
1 2
𝑟 ⋮
2
⋮ 𝑑 𝑛 ,
𝑖 3
𝑟 ⋮ ⋮
𝑖
⋮ 𝑑 𝑛
𝑘−1 𝑖
𝑟 ⋮
𝑘
𝑛 }
𝑘+1
где k – количество поверхностей; i – номер поверхности (i = 1…k); r – радиусы кривизны
поверхностей; d – расстояния между вершинами поверхностей или точками пересечения
поверхностей с оптической осью системы; n – показатели преломления сред, разделяемых
поверхностями системы.
При разработке оптиковычислительной программы целесообразно, в качестве файловой
составляющей исходных данных использовать массив (матрицу), состоящий(ую) из
конструктивных параметров оптической системы, где каждая строка является поверхностью,
помимо этого отдельно выносится информация с другими параметрами, например,
апертурными, полевыми и спектральными. Для этих данных, собранных в одном файле для
каждой оптической системы, рекомендуется обеспечить возможность изменения при помощи
текстовых редакторов, для дополнительной возможности просмотра или внесения правок
конечным пользователем, не прибегая к основному графическому интерфейсу, если таковой
108СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
имеется. Кроме того, для выделения принадлежности (идентификации) файла к
разрабатываемой программе желательно подчеркнуть полное имя файла специальным
расширением имени (форматом), например, *.od.
Недостающие элементы матрицы заполняются параметрами поверхностей предмета и
изображения с переиндексацией. Тогда, прямоугольная матрица параметров оптической
системы может иметь следующий вид:
𝑟 𝑑 = 𝑠 𝑛 ν 𝑒2 𝑆𝑃 𝑆𝑃 𝑆𝑃 ⋯ 𝑆𝑃
0 0 1 0 0 0 0,1 0,2 0,3 0,𝑝
𝑟
1
𝑑
1
𝑛
1
ν
1
𝑒 12 𝑆𝑃
1,1
𝑆𝑃
1,2
𝑆𝑃
1,3
⋯ 𝑆𝑃
1,𝑝
𝑟 𝑑 𝑛 ν 𝑒2 𝑆𝑃 𝑆𝑃 𝑆𝑃 ⋯ 𝑆𝑃
2 2 2 2 2 2,1 2,2 2,3 2,𝑝
𝑀 = ,
𝑂𝑆 ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮
𝑟 𝑑 𝑛 ν 𝑒2 𝑆𝑃 𝑆𝑃 𝑆𝑃 ⋯ 𝑆𝑃
𝑖 𝑖 𝑖 𝑖 𝑖 𝑖,1 𝑖,2 𝑖,3 𝑖,𝑝
⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮ ⋮
[𝑟 𝑑 𝑛 ν 𝑒2 𝑆𝑃 𝑆𝑃 𝑆𝑃 ⋯ 𝑆𝑃 ]
𝑘 𝑘 𝑘 𝑘 𝑘 𝑘,1 𝑘,2 𝑘,3 𝑘,𝑝
где ν – коэффициент дисперсии (число Аббе); SP (Surface Parameter) – другие параметры
поверхности (p – количество параметров), например, указанный e2 – квадрат эксцентриситета
(коническая постоянная).
Наиболее удобным современным и свободно распространяемым инструментом для
работы с матрицами и высокоуровневыми математическими функциями является язык
программирования Python с библиотекой NumPy (https://numpy.org).
Ввод показателей преломления обеспечивается либо непосредственно, либо в виде кодов
марок или названий сред:
𝑛 : если тип 𝑛 число;
𝑖 𝑖
𝑛 = |
𝑖 поиск по каталогу: иначе.
Каталоги материалов для оптической системы, также целесообразно хранить в виде
матрицы параметров с возможностью редактирования и добавления.
Трассировка лучей
Фундаментальной задачей программы является расчёт реальных (действительных) лучей
(Ray-tracing). Для реализации этой задачи на ЭВМ, идея таких формул была предложена ещё
в 1938 г. советским оптиком Н.В. Лебедевым, но окончательный вид формул дал Д.П. Федер
(система координат Федера) в 1951 г. [4; 5]. Общая процедура трассировки лучей для более
сложных оптических систем была описана в 1962 г. [8], но с замеченными, спустя почти 30
лет некоторыми ошибками [6; 7]. Подробности общих вопросов автоматизации
проектирования оптических систем также изучены авторами [1-3].
В программах автоматизированного расчёта оптических систем часто оперируют не
радиусом, а кривизной поверхности c. Здесь, как и во многих других случаях необходимо
исключать ошибки деления на ноль при расчёте плоской поверхности, когда r = 0 = ∞:
1
,если 𝑟 ≠ 0;
𝑐 = |𝑟 𝑖
𝑖 𝑖
0,иначе.
109СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Также вводится величина отношения показателей преломления:
𝑛
𝑖
μ = .
𝑖 𝑛
𝑖+1
Для простоты изложения и наглядности, рассмотрим цикл расчёта последовательного
нахождения точки встречи луча со сферическими (и, очевидно, плоскими) поверхностями в
виде функции, на вход которой поступают начальные координаты и направляющие косинусы:
𝑙 = (𝑑 −𝑥 )∙𝑋 −𝑦 ∙𝑌 −𝑧 ∙𝑍
𝑖 𝑖 𝑖 λ𝑖 𝑖 μ
𝑖
𝑖 ν𝑖
𝑀 = 𝑥 +𝑙 ∙𝑋 −𝑑
𝑥
𝑖
𝑖 𝑖 λ𝑖 𝑖
𝑀2 = (𝑥 −𝑑 )2 +𝑦2 +𝑧2 −𝑙2
𝑖 𝑖 𝑖 𝑖 𝑖 𝑖
cosσ = √𝑋 2−𝑀2 ∙𝑐2 +2𝑀 ∙𝑐 = 𝑞
𝑖 λ𝑖 𝑖 𝑖 𝑥 𝑖 𝑖 𝑖
𝑀2 ∙𝑐 −2𝑀
𝐿
𝑖
= 𝑙
𝑖
+ 𝑋𝑖 +𝑖 cosσ𝑥 𝑖
λ𝑖 𝑖
𝑥 = 𝑥 +𝐿 ∙𝑋 −𝑑
𝑅𝑎𝑦 (𝑥 ,𝑦 ,𝑧 ,𝑋 ,𝑌 ,𝑍 ) = 𝑖+1 𝑖 𝑖 λ𝑖 𝑖 ,
𝑇𝑟𝑎𝑐𝑒 0 0 0 λ0 μ
0
ν0
{ 𝑦 𝑖+1 = 𝑦 𝑖 +𝐿 𝑖 ∙𝑌 μ
𝑖
𝑧 = 𝑧 +𝐿 ∙𝑍
𝑖+1 𝑖 𝑖 ν𝑖
cosσ = √1−μ2 ∙(1−cos2σ ) = 𝑞
𝑖+1 𝑖 𝑖 𝑖+1
𝑔 = cosσ −μ ∙cosσ
𝑖 𝑖+1 𝑖 𝑖
𝑋 = μ ∙𝑋 +𝑔 ∙(1−𝑐 ∙𝑥 )
λ𝑖+1 𝑖 λ𝑖 𝑖 𝑖 𝑖+1
{ 𝑌 = μ ∙𝑌 −𝑔 ∙𝑐 ∙𝑦
μ
𝑖+1
𝑖 μ
𝑖
𝑖 𝑖 𝑖+1
{ 𝑍 = μ ∙𝑍 −𝑔 ∙𝑐 ∙𝑧
ν𝑖+1 𝑖 ν𝑖 𝑖 𝑖 𝑖+1
где x, y, z – координаты точки пересечения луча на поверхности (координаты падающего луча);
X , Y , Z – направляющие косинусы луча; 𝐿 = 𝑑̃ – «косая» толщина (длина пути) – расстояние
λ μ ν
между точками пересечения луча с i-й и i+1-й поверхностями, измеренное вдоль луча.
Проверка правильности вычислений выполняется при помощи контрольных
соотношений:
𝑋 2+𝑌 2 +𝑍 2 = 1;
λ μ ν
(𝑥∙𝑐−1)2 +(𝑦∙𝑐)2 +(𝑧∙𝑐)2 = 1;
𝑐∙(𝑥2 +𝑦2 +𝑧2)−2𝑥 = 0.
Отдельно стоит выводить сообщения об ошибках при условиях:
 если 𝑋 2−𝑀2 ∙𝑐2 +2𝑀 ∙𝑐 < 0, то луч не имеет точки встречи с поверхностью;
λ𝑖 𝑖 𝑖 𝑥 𝑖 𝑖
 если 1−μ2 ∙(1−cos2σ ) < 0, то луч претерпевает полное внутреннее отражение.
𝑖 𝑖
В этой системе координат Федера, в отличие от общепринятых в оптике обозначений,
оптической осью является ось абсцисс, а не ось аппликат. Обмен обозначений осей z и x
остаётся на усмотрение разработчика программы.
Для одновременного расчёта нескольких типов лучей или пакета (пучка) лучей на вход
могут подаваться начальные данные в виде вектор-столбца/строки.
Световые диаметры поверхностей, очевидно, рассчитываются исходя из входных
параметров луча для края поля зрения.
110СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Кардинальные элементы оптической системы могут быть рассчитаны при помощи
первого и второго вспомогательных параксиальных (нулевых) лучей.
Помимо этого, существует непоследовательный режим трассировки, позволяющий
моделировать оптические системы с произвольно расположенными в пространстве
элементами с несколькими источниками и приёмниками излучения. Лучи при этом могут
неоднократно попадать на любую поверхность любого объекта, либо вообще на него не
попадать.
Тестирование
Самые авторитетные и популярные программные продукты для расчёта оптических
систем, такие как Zemax (https://www.zemax.com), Code V (https://www.synopsys.com/optical-
solutions/codev.html), OSLO (https://lambdares.com/oslo) и SYNOPSYS (https://osdoptics.com)
являются коммерческими и поэтому, доступны не всем. Но для многих платных программ
существуют ограниченные в возможностях демонстрационные версии, используя которые
можно проверить корректность и точность некоторых полученных результатов. Кроме того,
для расчёта оптических систем существуют Open-Source проекты, например, KrakenOS
(https://clck.ru/36QNzo) и Koko Optical Design Software (KODS) (https://clck.ru/36QNtY).
В качестве исследуемой оптической системы, для апробации закладываемых в
разрабатываемую программу алгоритмов и исключения возможных ошибок в процессе
быстрого тестирования и отладки (дебаггинга), уместно выбрать относительно сложный
объектив, например, типа «Индустар-51» (табл. 1, рис. 1), рассчитанный по схеме Zeiss Tessar.
Такой выбор обосновывается не повторяемым (для наглядности результатов)
разнообразием входящих в состав оптической системы компонентов (выпукло-плоская и
двояковогнутая линза, склеенный компонент) и положением апертурной диафрагмы внутри
системы.
Таблица 1
Конструктивные параметры объектива «Индустар-51»
Радиусы, мм Толщины, мм Среды (Название)
57,68 8,4 1,6152 (ТК16)
0 9,3 1 (Воздух)
−129,42 4 1,5783 (ЛФ5)
52,97 12,2 1 (Воздух)
−407,4 3 1,5319 (ОФ1)
54,08 11,2 1,6247 (ТК20)
−83,56 184,3093 1 (Воздух)
111СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Оптическая схема четырёхлинзового анастигмата «Индустар-51»
(показаны главный и крайний луч)
Апертурная диафрагма ┴ расположена на расстоянии 8,1 мм от 4-ой поверхности.
Диаметр входного зрачка 40 мм. Относительное отверстие объектива 1:5,27. Предмет
находится в бесконечности. Угловое поле 2ω = 20°. Эквивалентное фокусное расстояние
211,1 мм.
Результаты трассировки реального луча для края поля представлены в таблице 2.
Таблица 2
Координаты точки пересечения луча и направляющие косинусы для «Индустар-51»
№ x y z X Y Z
λ μ ν
0 ∞ ∞ ∞ 0,9848077530 0,1736481777 0
1 1,8858106667 14,628425638 0 0,9999865598 0,0051846106
2 0 14,662199627 0,9999649359 0,0083741831
3 -0,84133134150 14,733036551 0,9988871047 0,0471651564
4 2,1874328567 15,064918663 0,9668601502 0,2553065802
5 0 16,626175788 0,9668601502 0,2553065802
6 -0,38070273889 17,608283763 0,9833178911 0,1818953682
7 3,3959016422 18,861828481 0,9889088774 0,1485235072
8 -2,3507800048 19,680858410 0,9956452281 0,0932232791
9 0 37,158032242 0,9956452281 0,0932232791
Возможный функционал. Основой анализа качества изображения, формируемого
оптической системой, является определение по результатам трассировки лучей
геометрических (лучевых, продольных и поперечных) и волновых (оптическая разность хода)
аберраций, их усреднённых значений и отдельных видов по разложениям (коэффициенты
аберраций). Детализированный анализ включает в себя расчёт аберраций в зрачках, точечные
диаграммы, функции рассеяния точки (линии/края), передачи модуляции (и фазы),
концентрации энергии и т. д., в т. ч. специфические виды анализа в зависимости от типа,
назначения и особенностей оптической системы, например, с учётом параметров и
коэффициентов виньетирования (экранирования), аподизации, применения нацеливания
лучей, трассировки поляризованных лучей и гауссовых пучков.
Для расчёта сложных оптических элементов необходимо использование любых типов
поверхностей: зеркальные, асферические и в общем полиномиальные, киноформные,
метаповерхности и др., или полностью пользовательские произвольные поверхности, а также
112СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
ввод излома оптической оси/децентрировки. Напротив, для предварительных расчётов или
использования неизвестных частей оптической системы – ввод идеальных поверхностей типа
параксиальной, матричной ABCD или “black box”.
При проектировании оптических систем важнейшей задачей является возможность
оптимизации оптической системы. Помимо автоматической локальной и глобальной
оптимизации по заданной оценочной функции, также удобна в использовании ручная
визуальная оптимизация.
Эксплуатационные параметры системы могут быть заданы влиянием внешних условий,
таких как температура и давление (термобарические аберрации), показатель преломления и
др. Для оптических систем с меняющимися в процессе эксплуатации параметрами и
характеристиками предусматривается режим множественной конфигурации
(мультиконфигурации). Технологические параметры определяются по результатам расчёта
допусков и анализа чувствительности к этим допускам с возможностью их перераспределения
и введением юстировок.
В состав программы могут быть включены такие вспомогательные расчёты и
инструменты как: поиск плоскости наилучшей установки; расчёт стрелок и карт прогиба;
определение массы оптических элементов; учёт покрытий и расчёт пропускания;
автоколлимационные блики (“ghost focus”); нарцисс-эффект; подгонка характеристик и
масштабирование; фокусировочные кривые; оборачивание системы; симуляция построенного
после прохождения через оптическую систему изображения и т. п.
Неограниченные возможности по расчётам, пользователю предоставляются при работе
с внутренним (макросы, скрипты) или внешними языками программирования для
самостоятельной доработки недостающих вычислений.
Графическая оболочка (GUI) разрабатываемой программы должна обеспечивать “user
friendly” (дружественный) интерфейс. Это важно для ускорения выполнения команд и,
следовательно, уменьшения утомляемости оператора программы, т. е. оптика-расчётчика, что
повышает производительность разработок. При этом особое внимание стоит уделить
редактированию конструктивных параметров, т. к. трудоёмкий процесс поиска наилучшего
решения подразумевает частое изменение этих данных. Для наглядности результатов анализа
используются графики исследуемых параметров и визуализация системы с ходом выборочных
лучей.
Однако, имея весь этот обширный функционал, есть возможность лишь разрабатывать
оптическую систему, созданную самостоятельно, не получая готовых схемных решений извне.
В помощь оптику-расчётчику на начальных этапах проектирования могут быть добавлены
подпрограммы параметрического синтеза примитивов, базы данных готовых оптических
систем и нейросетевая генерация т.н. “start point” – отправной (исходной) оптической системы,
с которой начинается исследование и расчёт.
113СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Литература
1. Агапов Н.А., Богданов В.Ф., Ашихмин В.Н. Практикум по автоматизации
проектирования оптико-механических приборов. М.: Машиностроение, 1989. 271 с.
2. Леонова В.Б. Автоматизация расчётов оптических систем. М.: Машиностроение, 1970.
288 с.
3. Родионов С.А. Автоматизация проектирования оптических систем. Л.:
Машиностроение, 1982. 270 с.
4. Feder D.P. Differentiation of Ray-Tracing Equations with Respect to Construction
Parameters of Rotationally Symmetric Optics // Journal of the Optical Society of America. 1968. Vol.
58. №11. P. 1494-1505. https://doi.org/10.1364/JOSA.58.001494
5. Feder D.P. Optical Calculations with Automatic Computing Machinery // Journal of the
Optical Society of America. 1951. Vol. 49. №9. P. 630-641. https://doi.org/10.1364/JOSA.41.000630
6. Horwitz J.W. General Ray-Tracing Procedure: comment // Journal of the Optical Society of
America. 1991. Vol. 8. №1. P. 248. https://doi.org/10.1364/JOSAA.8.000248
7. Spencer G.H. General Ray-Tracing Procedure: reply to comment // Journal of the Optical
Society of America. 1991. Vol. 8. №1. P. 249. https://doi.org/10.1364/JOSAA.8.000249
8. Spencer G.H., Murry M.V.R.K. General Ray-Tracing Procedure // Journal of the Optical
Society of America. 1962. Vol. 52. №6. P. 672-678. https://doi.org/10.1364/JOSA.52.000672
© Бездидько С.Н., Откупман Д.Г., 2024
114СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 544.4
Созонов М.В 1
Зажигалов С.В.1,2
канд. техн. наук
Сибаа М.1
Елышев А.В.1
канд. хим. наук
1Тюменский государственный университет
г. Тюмень, Россия
2Институт катализа им. Г.К. Борескова СО РАН
г. Новосибирск, Россия
ОПРЕДЕЛЕНИЕ КИНЕТИЧЕСКИХ КОЭФФИЦИЕНТОВ РЕАКЦИИ
ГИДРОГЕНОЛИЗА ПРОПАНА С ПОМОЩЬЮ CFD МОДЕЛИРОВАНИЯ И
ИНСТРУМЕНТОВ ОПТИМИЗАЦИИ
Аннотация. Исследуется возможность применения инструмента оптимизации решения
(метод Нелдера-Мида) для нахождения кинетических коэффициентов уравнения скорости
реакции с помощью метода вычислительной гидродинамики. Задача рассматривается на
примере процесса гидрогенолиза основного компонента газоконднсата – пропана. Показана
зависимость итогового решения от начальных данных и выбранного критерия оптимизации.
Предложны решения по доработке методики.
Ключевые слова: моделирование; computational fluid dynamics; вычислительная
гидродинамика; гидрогенолиз; газоконденсат; химическая кинетика.
По данным исследований к 2030 году общий объём добычи газоконденсата вырастет на
60% по сравнению с 2020 годом с учётом негативных факторов, влияющих на спрос. Основная
доля добытого газоконденсата перерабатывается внутри страны, оставшаяся уходит на
экспорт [2]. Снизить влияние существующих проблем сбыта и логистики продуктов
переработки газоконденсата можно с помощью применения новых способов переработки
газоконденсата. Одним из таких способов является конверсия газоконденсата в метан с
помощью гидрогенолиза непосредственно на газовом месторождении. Полученный метан
затем можно транспортировать вместе с природным газом. При этом получаемый метан будет
очищен от любых вредных примесей.
Гидрогенолиз – эндотермический процесс конверсии сложных цепочек углеводородов в
более простые под действием водорода. Это каталитический процесс, происходящий, как
правило, в трубчатых реакторах со стационарным слоем катализатора (рис. 1). Состав
продуктов процесса на выходе и эффективность процесса зависит от множества факторов.
Просчитать влияние этих факторов на характер протекания процесса, повысить его
эффективность и снизить затраты на внедрение технологии возможно с помощью
компьютерного моделирования методом вычислительной гидродинамики (Computitional Fluid
Dynamics – CFD). Работа с моделью позволяет относительно быстро и без существенных
материальных затрат исследовать процесс при различных условиях. CFD даёт комплексное
представление о процессе за счёт совместного решения уравнений гидродинамики,
тепломассопереноса и химических реакций. Современные математические модели
115СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
физических явлений и численные методы, применяемые в CFD, позволяют моделировать
широкий спектр задач, включая протекание химических реакций и нестационарную
постановку задачи. CFD позволяет получить данные о процессе, которые трудно или
невозможно получить с помощью реальных экспериментов. CFD позволяет получить
комплексную характеристику системы в любой её точке для любых условий задачи [7; 11].
Метод CFD показывает хорошие и достаточно точные результаты в области химического
инжиниринга и актуальность его применения растёт с каждым годом [5; 9].
Рис. 1. Многотрубчатый реактор со стационарным слоем катализатора (слева);
геометрическая модель, используемая в модели (справа)
CFD моделирование реализовано во множестве программных продуктов. Наиболее
популярными являются ANSYS и COMSOL Multiphysics. В данной работе используется
COMSOL Multiphysics. В нём реализован метод конечных элементов (МКЭ) для решения
широкого круга задач, а также различные методы оптимизации и параметрических
исследований для определения неизвестных параметров системы по имеющимся данным.
Целью данной работы является проверка возможности определения неизвестных
переменных, характеризующих протекание химических реакций в данном процессе, с
помощью CFD-моделирования. Построение CFD-модели гидрогенолиза газового конденсата
необходимо начать с некоторых допущений. Так как наибольшую массовую долю в составе
газоконденсата имеет пропан, то в случае рассмотрения метана, как конечного продукта
процесса, возможно рассматривать гидрогенолиз пропана как основу гидрогенолиза
газоконденсата в целом [1]. Таким образом упрощается моделирование химической
составляющей процесса и упрощается возможность верификации CFD-модели. Другим
допущением является моделирование одной трубки многотрубчатого реактора в двумерной
осесимметричной постановке (рис. 1). Такой подход позволяет уменьшить необходимые
вычислительные ресурсы без потери в качестве результата.
116СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Моделирование в COMSOL Multiphysics начинается с выбора типа геометрии расчётной
области и выбора тех физических явлений, которые будут моделироваться. После этого
указывается стационарная или нестационарная задача будет решаться. Моделируемые
физические явления настраиваются в специальных модулях, называемых интерфейсами. Так,
для моделирования процесса гидрогенолиза пропана необходимы интерфейсы, связанные с
моделированием химических реакций, транспорта химических веществ, гидродинамики, и
теплопереноса. Дополнительно можно добавить функциональные модули, например, модуль
оптимизации или специализированный математический модуль. В итоге проект модели
представляет собой древовидную структуру (рис. 2), где каждое из учитываемых физических
явлений настраивается в отдельном интерфейсе.
Рис. 2. Структура проекта в COMSOL Multiphysics
Все остальные составляющие модели (геометрия, материалы, настройка численного
решателя и др.) так же настраиваются в соответствующих интерфейсах. Процесс настройки
модели начинается с моделирования геометрии расчётной области. Она состоит из трёх
областей (рис. 1): область катализатора, область кремниевой ваты (в реальном эксперименте
служит для удержания катализатора на месте), область свободного течения газа. Далее
определяются материалы, из которых состоит расчётная область. Катализатор и кремниевая
вата моделируется как пористая среда. Для определения пористого материала в программе
существует отдельная опция, позволяющая отдельно определить свойства и материал скелета
пористой среды и вещества, которое занимает поры. Для учёта термодинамики процесса
возможно так же определить термодинамическую систему из участвующих в процессе
веществ. На основе этой системы можно создать отдельный материал, в данном случае
газообразное вещество, которое будет содержаться в порах катализатора и кремниевой ваты.
Эта же термодинамическая система нужна для учёта влияния термодинамики химического
процесса на свойства моделируемого потока газа в целом.
117СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Процесс гидрогенолиза пропана описывается двумя реакциями:
𝐶 𝐻 +𝐻 → 𝐶𝐻 +𝐶 𝐻 (1)
3 8 2 4 2 6
𝐶 𝐻 +2𝐻 → 3𝐶𝐻 (2)
3 8 2 4
Возможную реакцию этан → метан, как правило, не учитывают, так как она практически
не влияет на состав продуктов реакции на выходе [3; 10]. Для каждой химической реакции
настраивается скорость реакции. По умолчанию скорость задаётся по закону действующих
масс 𝑤 = 𝑘∏ 𝐶𝑛, где k – константа скорости реакции, n – общий порядок реакции.
𝑖 𝑖
Концентрации С определяют экспериментальными измерениями, а параметры k и n
i
определяются графическим или аналитическим методом по данным эксперимента. При этом
в литературе вместо константы скорости для описания кинетики реакции часто используют
энергию активации Е и предэкспоненциальный множитель А, которые связаны с константой
0
−𝐸
скорости реакции уравнением Аррениуса 𝑘 = 𝐴∙exp ( 0⁄ ) и так же могут быть
𝑅𝑇
определены графическим или аналитическим методом. В COMSOL Multiphysics константа
скорости реакции по умолчанию рассчитывается именно через данную зависимость, но можно
использовать своё выражение или указать значение константы напрямую. Определение
порядка реакции, как правило, представляет более сложную задачу, в отличие от определения
константы скорости реакции. Однако программа позволяет автоматически определить
порядок реакции исходя из вида уравнения реакции. Таким образом задача по нахождению
скорости реакции может быть сведена к определению коэффициентов Е и А.
0
На практике не всегда возможно получить кинетику для каждой конкретной реакции,
протекающей в данном процессе, а возможно получить только для всего процесса в целом.
При наличии большого числа экспериментов и задействованных в процессе химических
реакций указанные выше методы определения кинетических параметров для каждой
конкретной реакции могут быть достаточно трудоёмкими и давать достаточно высокую
погрешность. Поэтому целесообразно применять компьютерное моделирование и
математические методы оптимизации, которые позволяют, используя параметрическое
исследование, получить искомые (оптимальные) величины с учётом всех особенностей
процесса. Для поиска оптимального значения параметра может быть использовано несколько
критериальных методов решения. Наиболее универсальным методом является неградиентный
метод Нелдера-Мида, основанный на изменении симплекса вокруг точки экстремума
функции. В качестве критерия нужно использовать критически важную величину,
характеризующую процесс. В случае химического процесса таким критерием может быть
минимум разницы между экспериментальной долей продукта реакции на выходе и его
расчётным значением. Для случая гидрогенолиза пропана таких продуктов будет три, поэтому
необходимо использовать условие минимума суммы соответствующих разностей. Критерий
для каждого продукта представляется в виде |𝑎𝑣𝑒𝑜𝑝(𝑋 )−𝑋 |, где aveop – функция
𝑐𝑎𝑙𝑐 𝑒𝑥𝑝
усреднения (в выходном сечении модели), X – доля вещества в точке расчётной области,
calc
X – экспериментальное значение доли вещества на выходе. Нахождение минимума суммы
exp
этих разностей и будет искомым критерием, относительно которого программа будет
подбирать значения параметров E и A, решая при этом CFD задачу.
0
118СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Модуль оптимизации так же позволяет установить начальное значение параметра,
масштаб шага изменения и границы его изменения. Диапазон изменения параметров получен
согласно литературным данным [3; 4; 6; 8; 10] и представлен в таблице 1. Номер индекса
соответствует номеру реакции. Для величины А данные в литературе либо не приводятся, либо
имеют очень широкий разброс. Поэтому пределы были взяты в широком диапазоне.
Таблица 1
Начальные данные и диапазон изменения параметров
Параметр Минимум Максимум Начальное
E Дж/моль 58,4 208,4 133
1,
E Дж/моль 37,5 266,8 152
2,
A , м3/(с·моль) 10-6 106 0,1
1
A , м6/(с·моль2) 10-6 106 0,1
2
После настройки химии необходимо настроить интерфейсы тепломассопереноса.
Общим местом при настройке будет являться необходимость в определении физического
характера пространственных составляющих геометрии – типов зон, которые были определены
на этапе создания геометрии, и граничных условий. Так же общей чертой является
определение начальных значений основных параметров (температура, давление, скорость
потока, концентрация веществ). Начальные значения были оставлены по умолчанию.
Характеристика начальных и граничных условий представлена на рисунке 3. Так как в
процессе реального эксперимента каталитическая область постоянно подогревается
электрическим нагревателем, то в модели на этой границе устанавливается постоянное
значение температуры. Так же для области катализатора добавляется отдельная настройка,
учитывающая тепловые эффекты, связанные с химической реакцией. Область катализатора и
кремниевой ваты моделируется как пористое тело. Величина пористости задаётся в
настройках материала. Для учёта гидравлического сопротивления используется модель
проницаемости Козени-Кармана, диаметр частиц катализатора полагается равным 0,1 мм.
Основные условия протекания процесса представлены на рисунке 3.
После определения физических моделей исследуемых явлений настраивается численный
решатель. В зависимости от типа задачи (стационарная, нестационарная, оптимизация)
используются разные настройки. Основной настройкой является величина невязки по
основным величинам, относительно которых решается гидродинамическая задача (баланс
масс между входом и выходом из реактора, скорость потока, давление и температура). Невязка
показывает разность величин, полученных на текущей и предыдущей итерации расчёта (для
первой итерации относительно начальных условий). Чем меньше невязка – тем ближе искомое
решение. Как только все невязки по основным величинам станут меньше пороговой величины,
решение будет найдено. В данной работе пороговые невязки выставлены по умолчанию
равными 10-3. Так как целью работы является проверка методики, то использование настроек
решателя по умолчанию не является критичным.
119СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 3. Начальные и граничные условия задачи
Перед непосредственным запуском решения так же настраивается сетка конечных
элементов. Существует множество подходов для разбиения расчётной области на элементы в
зависимости от решаемой задачи. Для целей данной работы вполне целесообразно применить
автоматическое построение сетки с разбиением на небольшое количество элементов (в данном
случае 12170 элементов). Любые погрешности, вносимые укрупнением сетки, полагаются не
влияющими на итоговый результат, так как получение точных абсолютных величин долей
продуктов на выходе не является первостепенной целью. Таким образом возможно
сэкономить время, требуемое на поиск решения оптимизационной задачи. Тем не менее при
проведении детального моделирования процесса необходимо проводить факторный анализ на
влияние параметров сетки (количество, форма, размеры, расположение элементов) на
итоговый результат. При этом автоматическая генерация сетки в программе уже делает
некоторую анизотропию параметров элементов, что повышает её качество. В частности,
вблизи стенки сетка моделируется отличными от остального объёма элементами, а от ядра
потока к стенке происходит плавное изменение размера элементов.
После запуска решения в программе возможно отслеживать изменение невязок с каждой
итерацией и найденные значения оптимизационного критерия и искомых параметров,
соответствующих ему. Таким образом получаем график сходимости оптимизационной задачи
(рис. 4). Вертикальная линия в левой части графика показывает изменение критерия от
0,075678 (для начальных данных) к 0,0676 за первые 4 итерации. Пробелы между линиями
соответствуют бесконечному значению критерия (численное решение для данных значений
параметров не сошлось). Далее критерий меняется вокруг значения 0,0676, что может означать
невозможность метода при данных вводных найти другой минимум функции критерия. Тем
не менее, по достигнутому минимальному критерию можно проанализировать качественный
результат используемого подхода. Для этого необходимо сравнить расчётное и
экспериментальное соотношение продуктов на выходе (табл. 2). Не смотря на высокую
120СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
погрешность доля пропана на выходе так же больше, чем у остальных двух углеводородов.
Однако наблюдается превышение доли этана над метаном, в отличие от эксперимента.
Рис. 4. График сходимости оптимизационной задачи
Таблица 2
Экспериментальные и расчётные величины долей продуктов реакции на выходе
Продукт Доля на выходе (эксперимент), % Доля на выходе (расчёт), %
Метан 5,82 1,15
Этан 0,02 0,96
Пропан 0,23 0,92
Учитывая, что за первые 4 итерации наблюдалось качественное изменение критерия (на
10,6%), а также некоторое качественное соответствие в результатах даже при большой
погрешности, можно сказать, что применение данного метода определения кинетики
химической реакции вполне целесообразно. Дальнейшая работа по минимизации критерия
может быть основана на следующих решениях: расширение диапазона изменения искомых
параметров, в частности для A; добавление критерия, связанного со сравнением
экспериментально полученной скорости реакции и расчётной величины скорости, полученной
из кинетического уравнения параллельных реакций; минимизация не суммы критериев по
долям продуктов на выходе, а минимизация каждого из них по отдельности.
Далее, после решения оптимизационной задачи и получения искомых коэффициентов А
и Е для одной величины температуры необходимо так же найти эти значения для других
0
температур, согласно экспериментальным данным. Так же возможно проверить влияние на
эти величины соотношения пропан/водород. После этого возможно построить график
изменения этих величин от температуры и использовать при более детальном моделировании
процесса и поиска некоторой оптимальной температуры процесса по оптимизации выхода
121СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
того или иного продукта. При этом функциональную зависимость величин от условий
процесса можно построить прямо в программе, используя математический модуль.
Исследование выполнено за счет гранта Российского научного фонда № 22-73-10015,
https://rscf.ru/project/22-73-10015/.
Литература
1. Мамонтова Ю.В., Мурыхныч Н.А. Нестабильный газовый конденсат: определение
углеводородного состава методом газовой хроматографии без предварительного
разгазирования пробы: преимущества и недостатки // Вестник Тюменского государственного
университета. 2014. №5. С. 55-62.
2. Сэйгерс М., Гальцова А., Самарин К. Рост добычи газоконденсата в России //
Нефтегазовая вертикаль. 2021. №3-4. С. 80-87.
3. Burke P.A., Ko E.I. Propane hydrogenolysis over supported nickel catalysts: Structural and
support effects // Journal of Catalysis. 1989. Vol. 116(1). Pp. 230-239. https://doi.org/10.1016/0021-
9517(89)90088-2
4. Dalmon J., Martin G.A. Hydrogenolysis of C2H6, C3H8 and n-C4H10 over silica-supported
nickel-copper catalysts // Journal of Catalysis. 1980. Vol. 66(1). Pp. 214-221.
https://doi.org/10.1016/0021-9517(80)90023-8
5. Fletcher D.F. The future of computational fluid dynamics (CFD) simulation in the chemical
process industries // Chemical Engineering Research and Design. 2022. Vol. 187. Pp. 299-305.
https://doi.org/10.1016/j.cherd.2022.09.021
6. Guilleux M. Mechanism and structure sensitivity of propane hydrogenolysis over Ni/SiO2
catalysts // Journal of Catalysis. 1980. Vol. 62(2). Pp. 235-242. https://doi.org/10.1016/0021-
9517(80)90451-0
7. Hettel M., Wörner M., Deutschmann O. Computational Fluid Dynamics of Catalytic
Reactors // Handbook of Materials Modeling. Cham: Springer International Publishing. 2018. Pp.1-
34. https://doi.org/10.1007/978-3-319-50257-1
8. Machiels C. Hydrogenolysis of propane on supported catalysts of nickel, cobalt, iron, and
ruthenium // Journal of Catalysis. 1979. Vol. 58(2). Pp. 253-259. https://doi.org/10.1016/0021-
9517(79)90262-8
9. Raynal L., Augier F., Bazer-Bachi F., Haroun Y., Pereira da Fonte C. CFD Applied to
Process Development in the Oil and Gas Industry – A Review // Oil & Gas Science and Technology
– Revue d’IFP Energies nouvelles. 2016. Vol. 71(3). Pp. 42. https://doi.org/10.2516/ogst/2015019
10. Shephard F. Activity and properties of nickel catalysts in the hydrogenolysis of propane //
Journal of Catalysis. 1969. Vol. 14(2). Pp. 148-167. https://doi.org/10.1016/0021-9517(69)90420-5
11. Silvestri L. CFD modeling in Industry 4.0: New perspectives for smart factories // Procedia
Comput. Sci. 2021. Vol. 180. Pp. 381-387. https://doi.org/10.1016/j.procs.2021.01.359
© Созонов М.В., Зажигалов С.В., Сибаа М., Елышев А.В., 2024
122СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УПРАВЛЕНИЕ РАЗРАБОТКОЙ ПРОГРАММНЫХ
КОМПЛЕКСОВ И ВЫЧИСЛИТЕЛЬНЫМИ ПРОЦЕССАМИ
УДК 004.414.3
Фомин Н.И.
канд. техн. наук, доцент
Институт строительства и архитектуры
Уральский федеральный университет им. первого Президента России Б.Н. Ельцина
г. Екатеринбург, Россия
Летавин Д.А.
канд. техн. наук, доцент
Департамент радиоэлектроники и связи Института радиоэлектроники и
информационных технологий
Уральский федеральный университет им. первого Президента России Б.Н. Ельцина
г. Екатеринбург, Россия
Миронова Л.И.
д-р пед. наук, доцент
Институт строительства и архитектуры
Уральский федеральный университет им. первого Президента России Б.Н. Ельцина
г. Екатеринбург, Россия
СЕРВИС ДЛЯ УПРАВЛЕНИЯ ИЗОБРЕТАТЕЛЬСКОЙ ДЕЯТЕЛЬНОСТЬЮ
СТУДЕНТОВ УНИВЕРСИТЕТА
Аннотация. Актуальность темы статьи обусловлена необходимостью активизации
инновационной деятельности на отечественных промышленных предприятиях для
обеспечения ускоренного технологического суверенитета. В статье представлена структура
университетского сервиса для автоматизации процесса формирования заявки на выдачу
патента, как важной составляющей изобретательской деятельности. Дано описание основных
управленческих функций сервиса (наличие линейки шаблонов элементов заявки; заполнение
формы заявки на выдачу патента; помощь в составлении описания изобретения или полезной
модели; поддержка многопользовательской работы; интеграция с другими системами;
отслеживание статуса заявки на выдачу патента и др.). Структурированы квалификационные
требования к команде разработчиков сервиса, в виде необходимых знаний, умений и
практического опыта.
Ключевые слова: инженерное творчество; управление изобретательской деятельностью
студентов; защита технических решений; процесс формирования заявки на выдачу патента;
функции сервиса для автоматизации процесса.
Одной из задач современной университетской подготовки является одновременно с
формированием профессиональной компетентности, позволяющей решать производственные
и научные задачи, формирование ряда универсальных компетенций. Такие компетенции также
определены в собственных образовательных стандартах университетов, например, в
образовательном стандарте Уральского федерального университета (УрФУ) для программ
бакалавриата в области образования «Инженерное дело, технологии и технические науки»
(Образовательный стандарт УрФУ для разработки и реализации программ бакалавриата в
123СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
области образования «Инженерное дело, технологии» (утв. Ученым советом УрФУ
26.11.2018 г.) (URL: https://urfu.ru/sveden/edustandarts):
– способен осуществлять критический анализ проблемных ситуаций на основе
системного подхода, вырабатывать стратегию действий, в том числе в цифровой среде;
– способен определять круг задач в рамках поставленной цели и выбирать оптимальные
способы их решения, исходя из действующих правовых норм, имеющихся ресурсов и
ограничений и т. п.
Следует обратить внимание на схожесть формулировок данных компетенций в
федеральных государственных образовательных стандартах для различных направлений
подготовки, например, строительство (08.03.01); радиотехника (11.03.01) и др. Ввиду
комплексного содержания таких компетенций их полноценное формирование будет
обусловлено необходимостью разрешения студентом не только традиционных учебных
заданий (задач), но и многофакторных, как правило, отраслевых проблем. Постановка и
разрешение таких проблем различными методами, на наш взгляд, относится к области
инженерного творчества. Следовательно, для формирования универсальных компетенций,
предусмотренных образовательными стандартами, необходимо обеспечить в университете его
масштабное применение.
Надёжным и ценным результатом учебной и профессиональной деятельности, связанной
с инженерным творчеством и поиском инновационных решений отраслевых проблем, является
разработка новых и оригинальных решений и защита их соответствующими патентами.
Важность этой комплексной педагогической задачи в последнее время нарастает из-за
необходимости активизации инновационной (изобретательской) деятельности на
промышленных предприятиях в различных отраслях для обеспечения ускоренного
технологического суверенитета страны.
Во всем мире изобретательская деятельность и патентная защита ее результатов является
одним из ключевых инструментов обеспечения конкурентоспособности и экономического
роста промышленных организаций. Для государства количество патентов, выданных за
определенный момент времени, является индикатором динамики развития промышленности и
(опосредованно) уровня ее технологического суверенитета. Таким образом, патент на
изобретение или полезную модель – это не только индивидуальный показатель
квалификационного уровня специалиста (элемент его профессионального портфолио), но
также, в известной степени, составляющая глобального потенциала развития отрасли, в
которой данной специалист занят.
Процесс составления заявки на выдачу патента требует от изобретателя достаточно
большой методической работы, поэтому далеко не каждое оригинальное техническое решение,
обладающее признаками патентоспособности, доводится до патента.
Порядок формирования заявки предполагает от изобретателя выполнение следующих
действий (часть из них могут быть выполнены в параллельном режиме):
– составление описания изобретения или полезной модели (формула,
последовательность осуществления или применения объекта патентования);
124СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
– анализ существующих аналогов и ранее зарегистрированных патентов;
– формулировка требований к изобретению или полезной модели;
– определение новизны, промышленной применимости и изобретательского уровня.
Кроме этого, инженеру или исследователю при составлении заявки, необходимо
учитывать ряд специфических требований, содержание которых не вполне очевидно даже для
специалистов, ориентированных на техническое творчество и его технологии. Таким образом,
увеличивается как время составления заявки, так и вероятность появления в ней различных
ошибок, которые автору придется устранять на этапах экспертизы заявки в федеральном
институте промышленной собственности (ФИПС).
Проблема и цель
Проблема исследования определяется разрывом между уровнем методического
обеспечения учебной деятельности студента университета в области инженерного творчества
(включая изобретательскую деятельность) и потребностями современных промышленных
предприятий, ориентированных на инновационное развитие. В условиях необходимости
обеспечения ускоренного технологического суверенитета этот разрыв становится еще более
масштабным. Учитывая динамику процессов цифровой трансформации отечественной
экономики, представляется весьма полезным устранять выявленную проблему не только
традиционными технологиями высшей школы, но также разработкой и внедрением комплекса
отечественных программных продуктов, ориентированных на университетскую среду. В
статье представлен вариант одного из таких продуктов, реализующих современные
информационные и коммуникационные технологии.
В качестве одного из цифровых инструментов для устранения недостатков
университетского методического обеспечения предлагается использовать сервис для
автоматизации процесса подачи заявки на получение патента на изобретение. Создание такого
сервиса позволит: автоматизировать большую часть работы, связанной с написанием и
оформлением разделов заявки; снизить время на подготовку элементов заявки; снизить
затраты на сопровождение процесса формирования и подачи заявки патентоведами; повысить
качество содержания заявки, в т. ч. за счет снижения объема формальных ошибок; повысить
мотивацию к патентованию у начинающих изобретателей, а также продуктивность у
изобретателей, уже имеющих патенты.
Все вышеперечисленные обстоятельства определяют актуальность темы статьи.
Таким образом, целью статьи является обоснование разработки и принципиальное
описание сервиса для управления изобретательской деятельностью в университете, а именно,
автоматизации процесса формирования заявки на выдачу патента. Такой сервис должен быть
ориентирован, прежде всего, на студентов и их потребности. Для достижения цели статьи
необходимо решить следующие задачи: выполнить анализ существующих программных
средств для формирования и проверки заявок на выдачу патента; используя университетский
опыт составления заявок, сформулировать пошаговый алгоритм управления процессом
оформления заявки на выдачу патента и оценить возможности его автоматизации с
использованием сервиса; описать функции, выполняемые сервисом; систематизировать
125СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
содержательную сущность компетентности в области изобретательства (знания, умения и
практический опыт) [8] участников команды разработчиков, необходимые для создания
сервиса; структурировать преимущества, которые обеспечиваются сервисом в процессе его
использования.
Методология и методы
Методологической основой послужил спектр работ, опубликованных в последнее время,
по методическому обеспечению отраслевого изобретательства и патентования в
университетской среде, для следующих областей: агроинженерия [14; 28]; архитектура [19];
атомная энергетика [17]; конструкторско-технологическое обеспечение машиностроительных
производств [24; 26]; лесоинженерное дело [5]; наукоемкие технологии [6; 20]; пищевая
инженерия [2]; строительство [1; 3; 22]; технология геологической разведки [15]; технология
машиностроения [13; 16; 18; 25]; транспортные машины [4]; упаковочное производство [29];
экономика [7]; электротехнологии [8].
Также в исследовании применялась теория компетентностного подхода.
Для решения задач проведенного исследования использовались следующие основные
методы исследования: теоретический анализ и обобщение положений педагогической науки
по проблемам профессиональной подготовки студентов в университетах; анализ
образовательных стандартов по техническим направлениям подготовки.
Результаты исследования
Прежде чем приступить к описанию управленческого сервиса, необходимо рассмотреть
существующее программное обеспечение, позволяющее решать задачу формирования заявки
на выдачу патента и ее проверки. Такой анализ позволит оценить возможности современных
программных продуктов и уточнить требования к элементам сервиса по управлению
процессом подачи заявки. Далее представлен ряд распространенных программных продуктов,
которые используются в настоящее время для формирования заявки на выдачу патента и ее
проверки:
– программа PatentWizard (https://neustelsoftware.com/patentwizard/) помогает
изобретателям и патентным поверенным формировать предварительные заявки, обеспечивая
автоматическую проверку заявки по новизне;
– программа PatentOptimizer (https://www.lexisnexis.com/en-us/products/patent-optimizer-
for-legal.page) анализирует правомерность заявки на патент, определяет потенциальные
проблемы и предлагает их возможные решения;
– программа Patent InSight Pro (https://www.patentinsightpro.com/product.html) использует
искусственный интеллект для анализа патентной информации, предоставляет пользователю
сведения о конкурентных технологиях и возможных областях патентования;
– программа PatSnap (https://www.patsnap.com/) представляет собой онлайн-платформу,
обеспечивающую доступ к базам патентных данных и технических решений. Пользователи
могут осуществлять поиск по ключевым словам, анализировать рынок и конкурентную
ситуацию, а также отслеживать патентные заявки;
126СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
– программа ClaimMaster (https://www.patentclaimmaster.com/) обеспечивает помощь в
написании заявок на патент. Автоматически обнаруживает ошибки и предлагает рекомендации
по улучшению формулировок
Анализ представленных программ показал, что при достаточно широких возможностях,
которые они обеспечивают [31], в них отсутствует русскоязычный интерфейс и не обеспечен
учет отечественных требований к содержанию и оформлению элементов заявки на выдачу
патента [30]. Таким образом, данные программные продукты не могут быть использованы
отечественными исследователями или инженерами для подготовки заявок на выдачу
российских патентов.
Данный вывод справедлив для изобретателей (сотрудников и студентов) Уральского
федерального университета (УрФУ). Являясь одним из наиболее мощных центров по
прикладным научным исследованиям в стране, УрФУ культивирует изобретательскую среду
для студентов технических направлений подготовки и транслирует накопленный позитивный
опыт в различных отраслях промышленности. Например, за последние несколько лет в
наиболее престижной линейке учебной литературы университета (серия «Учебник УрФУ»)
выпущено 2 учебника по отраслевому изобретательству, не имеющих современных аналогов
[22; 17]. Ежегодно из УрФУ в ФИПС отправляется около сотни заявок на выдачу патента на
изобретение.
Таким образом, разработка сервиса для управления изобретательской деятельности
студентов будет являться значимым драйвером процесса трансформации новых технических
решений, разработанных в университетской среде, в соответствующие патенты.
Ранее было отмечено, что использование сервиса обеспечит сокращение времени на
подготовку заявки и более профессиональный результат. Вместе с этим необходимо подчеркнуть,
что работа с сервисом, не заменяет процесс творческих исследований, необходимых автору для
получения нового технического решения, самостоятельного формулирования технического
результата, отличительных признаков объекта патентования и т.п.
Сервис для управления изобретательской деятельности – это программа,
обеспечивающая автоматизацию процесса формирования заявки на выдачу патента на
изобретение или полезную модель или заявки на государственную регистрацию программы
для ЭВМ. Две главные функции, которые осуществляются благодаря применению сервиса,
это: предоставление форм и шаблонов (в т. ч. с выбором специальных «отраслевых
словосочетаний») элементов заявки для заполнения автором (авторами); генерирование
взаимосвязанных текстовых блоков (по заполненным формам и шаблонам), из которых
полностью формируется текстовая часть заявки (патент на изобретение, полезную модель,
свидетельство о государственной регистрации программы для ЭВМ).
Вместе с этим необходимо отметить, что в российских университетах число
патентоведов, которые сопровождают изобретательскую деятельность, как правило, невелико.
Поэтому при повышении студенческой изобретательской активности, особенно в конце
календарного или учебного года, университетские патентоведы не всегда имеют возможность
тщательно проработать с авторами содержание каждой заявки. Незамеченные ошибки и
127СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
небрежности увеличивают время прохождение экспертизы заявки в ФИПС и снижают
мотивацию авторов к патентованию своих результатов интеллектуальной деятельности (РИД).
В этом случае сервис может помочь упростить и ускорить процесс подготовки заявок,
позволяя сотрудникам университета и студентам самостоятельно разрабатывать и оформлять
свои РИД.
Как показывает практика, для специалиста, особенно для студента, не имеющего опыта
патентования, процесс составления заявки на выдачу патента может оказаться весьма
непростым. Попытки анализа процесса трансформации идеи в заявку для обучения молодых
изобретателей предпринимаются, начиная с середины прошлого века. Отметим, что в
Советском Союзе методической подготовке начинающих изобретателей уделялось
значительное внимание, поэтому брошюры с кратким, но наглядным описанием этапов
указанного процесса издавались регулярно, например, укажем на работы Шепелева Н.П.,
Кичкина Н.П. и Илленко М.И. [27; 9]. Из относительно новых пособий можно выделить работу
Тарасова И.С. [21]. Также в последнее десятилетие отдельно печатаются пособия и
справочники по оформлению разделов заявки на выдачу патента, с учетом отраслевой
специфики, например, в области строительства [10; 11].
Вместе с этим, известные описания процесса трансформации идеи в заявку не
предназначались для алгоритмизации, с последующей реализацией алгоритма в цифровой
среде. В результате анализа различного методического обеспечения отраслевого
изобретательства и патентования в университетской среде (см. раздел Методология и методы);
разнообразного опыта ряда изобретателей из УрФУ, а также собственный опыт работы над
заявками, был сформулирован пошаговый алгоритм процесса оформления заявки на выдачу
патента.
В таблице 1 представлены укрупненные шаги неавтоматизированного алгоритма
трансформации идеи в заявку на выдачу патента, с соответствующими комментариями в форме
вопросов к автору, для каждого шага алгоритма.
Таблица 1
Содержание неавтоматизированного алгоритма составления заявки на выдачу патента
№
шага Содержание шага
Контрольные вопросы для автора
алго- алгоритма
ритма
Какой объект автор хочет запатентовать (способ, устройство, способ и
Определяем
устройство для его осуществления и т. п.)?
1 идею
Чем данный объект отличается от известных аналогов на рынке?
изобретения
Каковы существенные признаки объекта?
Идея, положенная в основу технического решения, новая?
Встречается ли данная идея (техническое решение) в открытых
Исследуем
2 источниках информации, в т. ч. в патентных базах?
Идею
Нарушает ли техническое решение, базирующееся на этой идее, чьи-
то права?
Какая часть идеи (технического решения) должна быть описана в
Обращаемся
заявке?
3 за помощью к
Достаточно ли информации для формирования элементов заявки или
патентоведу
нужно проводить дополнительные исследования?
128СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Включены ли в описании формулы все отличительные признаки
патентуемого объекта: конструктивные особенности, принцип работы
Описываем идею
и т. п.?
в виде формулы
4 Использованы ли в формуле лаконичные формулировки, нет ли
объекта
избыточной или противоречивой информации?
патентования
Соблюдено ли единство формулировок?
Понятна ли формула изобретения?
Формулируем Дано ли описание области и уровня техники?
описание Дано ли описание объекта, раскрывающее его сущность с полнотой,
5 применения достаточной для осуществления изобретения (полезной модели)
объекта специалистом в данной области техники?
патентования Соответствует ли формула описанию объекта?
Являются ли разработанные чертежи (рисунки схемы, диаграммы и
Формируем т. п.) достаточными для наглядной иллюстрации отличительных
6 графическую признаков патентуемого объекта?
модель объекта Не содержат ли они противоречий?
Представленные чертежи (рисунки, схемы) понятны и наглядны?
Осуществляем Содержит ли заявка необходимые разделы?
7 проверку Соответствует ли текстовая часть заявки графической?
Заявки Достаточно ли объема графической части?
Имеет ли заявка законченную текстовую и графическую часть?
Составляем Нужны ли приложения к заявке, если да, то составлены ли они?
8 заявочный Заполнено ли заявление на выдачу патента? Определен ли
комплект патентообладатель и источник финансирования расходов на
проведение экспертизы заявки, регистрацию и выдачу патента?
Каждый шаг этого алгоритма может быть, в определенной степени, автоматизирован
благодаря применению сервиса, что позволит обеспечить управление процессом за счет
снижения сложности и трудоемкости формирования заявки благодаря уходу от метода проб и
ошибок, к которому, как указано в пособиях по отраслевому изобретательству (см. выше),
неизбежно тяготеют начинающие авторы. Кроме этого, существенно снизится вероятность
возникновения различных ошибок при написании заявки за счет автоматической проверки
действий автора на этапах реализации алгоритма.
Сервис для управления изобретательской деятельностью должен выполнять ряд
основных функций, максимально удовлетворяющих требованиям правил описания
изобретения или полезной модели и составления заявки на выдачу патента. К этим функциям
относятся:
1. Выбор вида патента. Сервис должен позволять выбрать соответствующий вид патента
в соответствии с техническим решением (продуктом), для которого подается заявка. Для
первой версии сервиса предлагается ограничиться только изобретением и полезной моделью,
с последующим расширением данного перечня (программа для ЭВМ, промышленный
образец);
2. Заполнение формы заявки на выдачу патента. Сервис должен обеспечивать
возможность заполнения формы заявки на выдачу патента, включая такие элементы, как
название, область и уровень техники, описание, формула, реферат, графическая часть
(рисунки) заявки, и т. п.;
129СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
3. Проверка формы заявки на соответствие требованиям. Сервис должен обеспечить
проверку форму заявки на соответствие требованиям формальной экспертизы ФИПС,
например: корректное название, единство наименований, объем разделов и т. п.;
4. Создание списка документов. Сервис должен формировать список документов,
необходимых для подачи заявки на выдачу патента, например, заявление, заявка, авторский
договор и анкета (для авторов из УрФУ) и т. п.;
5. Отслеживание статуса заявки на выдачу патента. Сервис должен предоставлять
информацию о текущем статусе заявки в ФИПС, ожидаемую дату рассмотрения и принятия
решения по заявке экспертами ФИПС;
6. Поддержка многопользовательской работы. Сервис должен обеспечивать
возможность поддерживать работу нескольких пользователей (авторов), которые могут
работать над одной заявкой одновременно;
7. Интеграция с другими системами. Сервис должен обеспечивать возможность
интеграции с другими системами, такими, как электронная почта, база патентов и т. д. для
облегчения процесса подачи заявки на патент и ускорения ее рассмотрения патентоведом;
8. Наличие линейки шаблонов элементов заявки (область и уровень техники, описание
объекта, для раскрытия его сущности, формула, реферат и др.), разработанных опытными
изобретателями, а также эталонных примеров текстовой и графической части заявок на патент
(по видам), с учетом отраслевых особенностей (строительство, энергетика, машиностроение,
радиоэлектроника и т. д.). Опыт развития изобретательской деятельности в УрФУ показывает,
что такие шаблоны могут быть весьма полезны, особенно для начинающих изобретателей, для
которых они представляют самостоятельную образовательную ценность;
9. Помощь в составлении описания изобретения или полезной модели. Сервис должен
предоставлять подробные рекомендации по подготовке описания изобретения (полезной
модели), чтобы заявка была максимально понятной и ясной для патентоведа университета и
экспертов ФИПС;
10. Проверка орфографии и грамматики: чтобы избежать ошибок, которые могут
снизить качество заявки; сервис должен обеспечивать проверку орфографию и грамматику
текстовой части заявки.
Все указанные функции помогут автору сформировать качественную заявку на выдачу
патента, которая с большой вероятностью успешно пройдет обе экспертизы ФИПС и принесет
автору заслуженный патент.
Из сформулированных функций сервиса видно, что для его создания требуется команда
специалистов из разных профессиональных областей. В состав команды должны войти:
постановщик задачи, программист, опытный изобретатель, патентовед и несколько
начинающих изобретателей (потенциальных пользователей будущего сервиса) [12]. В таблице
2 систематизированы знания, умения и практический опыт, которыми должны обладать
участники команды по разработке сервиса.
130СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Таблица 2
Необходимые знания, умения и опыт участников команды по разработке сервиса
для автоматизации подачи заявки на выдачу патента
Участник
Знает Умеет Имеет опыт
команды
общие сведения об применить знания постановки задач в
интеллектуальной нормативных документов различных предметных
собственности и ее защите по защите прав областях
интеллектуальной
Постановщик собственности
задачи основы профессиональных составить алгоритм, разработки алгоритмов в
дисциплин (по отраслям) для учитывающий отраслевые разных предметных
обеспечения учета в сервисе особенности областях
технических аспектов патентуемого решения
патентуемого решения
Патентное законодательство оказать помощь работы в патентном
РФ; главы Гражданского изобретателю в отделе университета
кодекса РФ, касающиеся составлении описания
Патентовед защиты авторских прав; изобретения (полезной
отдельные приказы модели)
Роспатента и Минэконом
развития РФ
принципы системного применять стандартные применения приемов
подхода для построения приемы решения преодоления
модели технической изобретательских задач, психологической инерции
проблемы связанные с устранением в процессе анализа и
технического и синтеза решения
физического отраслевых
противоречий изобретательских задач
требования и рекомендации использовать применения методики
по составлению заявки на эвристические приемы поиска аналогов и
получение патента для разработки новых прототипов для решения
технических решений изобретательской задачи
алгоритмы решения применять алгоритмы оформления заявки на
изобретательских задач, решения выдачу патента на
связанных с устранением изобретательских задач, изобретение и полезную
административного связанных с устранением модель
противоречия различных противоречий
Опытный критерии оценки близости использовать Успешных разработок в
изобретатель решения изобретательской информационные области изобретательства
задачи к идеальному шаблоны для для обеспечения
варианту самостоятельного целостной работы
эвристические приемы составления заявки на компонентов сервиса по
разработки новых получение патента формированию
технических решений качественной заявки и
критерии оценки новизны понимания потребностей
решения изобретательских пользователей сервиса,
задач особенно начинающих
алгоритм транс формации изобретателей
разработанного
технического решения в
заявку на выдачу патента на
изобретение (полезную
модель)
отраслевую нормативную
базу
131СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
современные языки создавать веб-приложения в области разработки
программирования и программного
уверенно ими владеет обеспечения
базы данных и системы Использовать приемы аналитической работы
управления базами данных UX/UI дизайна для для обеспечения точности
разработки удобного и и эффективности работы
интуитивно понятного сервиса
интерфейса
методы машинного обучения применять облачные
и искусственного интеллекта технологии для
для создания сервиса обеспечения хранения и
обработки данных
основные методы и обеспечить доступ к Коммуникационных навы
технологии в области сервису через ков для эффективного
информационной корпоративную сеть и взаимодействия команды
безопасности для интернет разработчиков
Программист обеспечения с заказчиками сервиса и
конфиденциальности его пользователями
информации пользователей
сервиса
работы с Application
Programming Interface
(API) для интеграции
сервиса с другими
платформами и
сервисами и улучшения
его функций
разработки
пользовательских
интерфейсов для
создания комфортного в
использовании в учебном
процессе интерфейса
Представленный комплекс знаний, умений и практического опыта определяет сущность
компетентности в профессиональных областях участников проекта и ее следует рассматривать
в качестве минимальных квалификационных требований для успешной разработки сервиса.
Начинающие замотивированные изобретатели будут полезны в команде не только как
пользователи законченного программного продукта, но и как вдумчивые «испытатели» его
промежуточных версий на стадии опытной эксплуатации программного продукта.
Перечислим преимущества использования сервиса для автоматизации процесса
формирования заявки на выдачу патента и конкретизируем, за счет чего эти преимущества
достигаются: экономия времени обеспечивается за счет работы изобретателя в специальных
формах и шаблонах, учитывающих вид патента, тип технического решения (способ,
устройство и т. д.), отраслевую принадлежность патентуемого объекта; уменьшение
вероятности ошибок обеспечивается автоматической проверкой текста на соответствие
требованиям патентного законодательства и правилам составления заявок; сохранение
конфиденциальности обеспечивается интеграцией сервиса в корпоративную сеть
университета, имеющей высокую степень защиты; удобство использования обеспечивается
наличием удобного и интуитивно понятного интерфейса, который помогает технологично
132СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
формировать и редактировать структурные элементы заявки; экономия денежных средств
обеспечивается за счет снижения затрат труда патентоведа на этапный анализ заявки
начинающего изобретателя (формула; раскрытие применения патентуемого объекта; рисунки
(схемы); полная форма заявки); уменьшение рисков отказа в выдаче патента обеспечивается
повышением качества составления заявки за счет реализации в сервисе формальных проверок
(требований формальной экспертизы ФИПС); возможность получения обратной связи от
патентоведа (опытного изобретателя) обеспечивается предоставлением пользователю
обратной связи по заполнению заявки, в которой изобретателю указываются ошибки и
неточности, которые необходимо исправить перед отправкой заявки в ФИПС; повышение
изобретательского опыта пользователя обеспечивается за счет формирования практического
опыта в области составления заявок на выдачу патента, а также получения знаний в области
патентного права.
Все представленные преимущества делают сервис для автоматизации процесса
формирования заявок на выдачу патента полезным и актуальным инструментом для студентов,
исследователей и других сотрудников университета, заинтересованных в защите своих РИД.
Основными преимуществами создания и использования сервиса для управления
изобретательской деятельностью в университете являются: ускорение процесса формирования
студентами заявок на выдачу патента, снижение затрат на подготовку заявок и повышение их
качества. Кроме того, сервис может быть интегрирован с другими системами, такими, как базы
данных патентов (Яндекс Патенты и ФИПС), что позволит быстро проводить анализ
прототипов, аналогов и оценку новизны патентуемого решения. Развитие сервиса связано с
расширением его функциональных возможностей. Например, сервис также может содержать
обучающие материалы по наиболее эффективным методикам изобретательства, с учетом
специфики направления подготовки студента [23].
Вместе с этим необходимо подчеркнуть, что использование сервиса для управления
формированием заявок не заменяет необходимость взаимодействия с университетскими
патентоведами или опытными изобретателями на этапе принятия решения об отправке заявки
в ФИПС.
Литература
1. Абовский Н.П. Методология научного творчества. Научиться исследовать и
изобретать. Красноярск: СФУ, 2011. 268 с.
2. Алексеев Г.В., Леу А.Г. Основы защиты интеллектуальной собственности. Создание,
коммерциализация, защита. СПб.: Лань, 2018. 387 с.
3. Байбурин А.Х., Кочарин Н.В. Методы инноваций в строительстве. СПб.: Лань, 2018.
164 с.
4. Бакатин Ю.П. Техника изобретательства. М.: МАДИ, 2013. 156 с.
5. Глебов И.Т. Методы технического творчества. СПб.: Лань, 2022. 112 с.
6. Деулин Е.А. Основы инженерного изобретательства. М.: Горячая линия Телеком,
2023. 144 с.
133СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
7. Ефимов В.В. Сборник методов поиска новый идей и решений управления качеством.
Ульяновск: УлГТУ, 2011. 194 с.
8. Зуев Ю.Ю. Основы создания конкурентоспособной техники и выработки
эффективных решений. М.: Изд-ий дом МЭИ, 2006. 402 с.
9. Илленко М.И., Колотушкина С.П., Мадатов Н.М., Полонская И.В. Заявка на
изобретение. М.: ВНИИПИ, 1985. 35 с.
10. Ишков А.Д., Степанов А.В. Оформление заявки на выдачу патента на изобретение.
М.: Изд-во МГСУ, 2012. 47 с.
11. Ишков А.Д., Степанов А.В. Оформление заявки на выдачу патента на полезную
модель. М.: Изд-во МГСУ, 2012. 48 с.
12. Миронова Л.И., Фомин Н.И. (2022) Цифровая трансформация строительного
образования: вопросы изобретательства. Педагогическое образование в России. 2022. №2. С. 62-
68.
13. Кане М.М. Основы исследований, изобретательства и инновационной деятельности
в машиностроении. Минск: Вышэйшая школа, 2018. 365 с.
14. Кравченко И.Н., Корнеев В.М., Дорохов А.С., Шамарин Ю.А. Изобретательство и
патентоведение. М.: Изд-во РГАУ-МСХА, 2016. 171 с.
15. Нескоромных В.В., Рожков В.П. Изобретательство и патентоведение при
геологоразведочных работах. Красноярск: СФУ, 2013. 334 с.
16. Пашкевич М.Ф., Жолобов А.А., Мрочек Ж.А. Исследования и изобретательство в
машиностроении. Минск: Адукацыя i выхаванне, 2005. 287 с.
17. Попов А.И., Ташлыков О.Л. Основы изобретательской деятельности (в области
использования атомной энергии). Екатеринбург: Изд-во Уральского ун-та, 2021. 204 с.
18. Ревенков А.В., Резчикова Е.В. Теория и практика решения технических задач. М.:
Форум; Инфра-М, 2017. 383 с.
19. Саркисов С.К. Инновации через призму архитектуры: кто способен изобретать, что
следует изобретать в первую очередь и как создавать инновации. М.: URSS, 2022. 336 с.
20. Соколов Д.Ю. Патентование изобретений в области высоких и нанотехнологий. М.:
Техносфера, 2010. 135 с.
21. Тарасов А.С. Как идею преобразовать в изобретение и получить патент. М.: Изд-во
Нобель Пресс, 2013. 132 с.
22. Фомин Н.И., Лысова Ю.Д. Разработка и защита технических решений в
строительстве. Екатеринбург: Изд-во Уральского ун-та, 2020. 156 с.
23. Фомин Н.И., Миронова Л.И., Коротич А.В. (2023) Анализ изобретательских методик
для разработки патентоспособных решений в архитектуре и строительстве. Академический
вестник УралНИИпроект РААСН. 2023. №1. С. 104-109.
https://doi.org/10.25628/UNIIP.2023.56.1.018
24. Харченко А.О., Карлов А.Г., Харченко А.А., Осипов К.Н. Патентоведение и
изобретательство. Практикум. М.: Центркаталог, 2018. 112 с.
134СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
25. Царенко И.В. Основы изобретательства и инновационной деятельности в
машиностроении. Гомель: ГГТУ, 2019. 80 с.
26. Шевченко Б.А. Основы технологии изобретательства. Старый Оскол: ТНТ, 2015. 323
с.
27. Шепелев Н.П., Кичкин Н.П. Методика выявлений изобретений. М.: Изд-во ЦНИИПИ,
1969. 34 с.
28. Шило И.Н., Романюк Н.Н., Агейчик В.А., Основин В.Н., Нукешев С.О. Практика
целевого изобретательства в агроинженерии. Минск: БГАТУ, 2017. 518 с.
29. Шипинский В.Г. Методы инженерного творчества. Минск: Вышэйшая школа, 2019.
118 с.
30. Genin B.L., Zontov Y.V. Digital Transformation of the Patent Information Services.
Intellectual property law. 2021. №1. Pp. 14-18. https://doi.org/10.18572/2072-4322-2021-1-14-18
31. Youngjung G., Moon-Soo K., Sungjoo L. Service Technology: Definition and
Characteristics Based on a Patent Database. Service Science. 2017. №9(2). Pp. 147-166.
https://doi.org/10.1287/serv.2016.0170
© Фомин Н.И., Летавин Д.А., Миронова Л.И., 2024
135СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.451
Салимов Ф.
старший преподаватель
Бобоев С.
старший преподаватель
Филиал Технологического университета Таджикиста в г.Исфаре
г. Исфара, Таджикистан
ОПЕРАЦИОННЫЕ СИСТЕМЫ В СТРАНАХ СНГ – ТОЧКА ОТСЧЁТА
Аннотация. В статье приведены определение технических параметров операционных
систем ведущих стран СНГ. Приведены примеры операционных систем, работающих на
различных платформах.
Ключевые слова: Astra Linux; Linux; Alt Linux; операционная система; ROSA Linux;
TrueBSD; ARTA OS
Операционные системы на данный момент являются важнейшей частью программного
обеспечения любых компьютерных систем, а с расширением их возможностей и
распространения, многократно возрастает их влияние на формируемое информационное
общество.
В виду отсутствия особого интереса у обычных гражданских структур к созданию
собственных операционных систем и естественного сопротивления данному процессу
монополистов и крупных игроков в сфере информационных технологий, появление
национальных операционных систем идёт с большим скрипом. Если бы не потенциальная
угроза национальной информационной безопасности со стороны зарубежных программных
средств, то дело могло бы закончиться локализацией популярных операционных систем
информационных гигантов.
На данный момент основным локомотивом, тянущим за собой национальные
операционные системы помимо небольшой группы энтузиастов, являются национальные
проекты государств СНГ в сфере информационных технологий и проекты силовых структур
этих стран. Именно они являются основным спонсором и заказчиком этого специфического
программного продукта. Различные экономические санкции в информационной области также
являются хорошим мотиватором, побуждающим государства создавать своё независимое
программное обеспечение.
Крупнейшей информационной державой на территории СНГ является Российская
Федерация, и соответственно в ней сосредоточено наибольшее количество операционных
систем Содружества. На июнь текущего года в Едином реестре российского программного
обеспечения зарегистрированы 31 операционная система (ОС) общего назначения. В качестве
примера можно привести такие интересные российские проекты в данной сфере:
 мобильная операционная система Аврора, включающая проекты с открытым
исходным кодом и компоненты с закрытым исходным кодом и разрабатываемая с 2016 года
российской компанией «Открытая мобильная платформа»;
136СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
 Astra Linux – операционная система на базе ядра Linux, разработчиком и
производителем с 17 декабря 2019 года которой является ООО «РусБИТех-Астра», а одним из
заказчиков является Минобороны РФ;
 операционная система Alt Linux, разрабатываемая компанией «Базальт СПО»,
довольно популярная в образовательной сфере и не только в ней, поскольку одним из её
заказчиков является Минобороны РФ;
 ГосЛинукс компании «Ред Софт» является операционной системой судебных
приставов РФ;
 операционная система Янукс, разрабатываемая по заказу Росатома;
 Заря – популярная операционная система на базе Линюкса, одним из заказчиков
является Минобороны РФ;
 операционная система ROSA Linux также имеет одним из спонсоров Минобороны
РФ.
В Республике Беларусь тоже ведутся разработки отечественных операционных систем.
Этот процесс идёт параллельно с адаптацией операционных систем под местные условия
(завершена сертификация ОС Astra Linux Special Edition в Белоруссии). Можно отметить
следующие интересные прототипы:
 TrueBSD – белорусская операционная система, которая опирается на код FreeBSD,
которая была создана 7 июля 2006 года (https://clck.ru/39a2Gd).
Казахстан, также является лидером в области информационных технологий и разработки
программного обеспечения на территории СНГ. Было бы целесообразно внедрить на
территории Центральной Азии успешный опыт казахстанских программистов.
В качестве примера можно привести удачную разработку операционной системы ARTA.
ARTA OS – операционная система, разработанная и адаптированная для использования
на территории Республики Казахстан. Сайт компании-разработчика – http://www.arta.kz. ОС –
представляет собой красивую сборку на основе Debian Linux.
© Салимов Ф., Бобоев С., 2024
137СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.4
Катермина Т.С.
канд. тех. наук, доцент
Шаров В.А.
студент
Нижневартовский государственный университет
г. Нижневартовск, Россия
РАЗРАБОТКА ПЛАТФОРМЫ ДЛЯ ДИСТАНЦИОННОГО ОБУЧЕНИЯ СТУДЕНТОВ
Аннотация организация образования в онлайн формате с применением современных
разработок в виде электронных образовательных платформ. К электронной образовательной
платформе сформулированы требования. Далее описаны основные этапы разработки
обучающей платформы, такие как: проектирование модулей, разработка и программирование,
тестирование. Сделаны выводы о необходимости разрабатываемой платформы и ее влиянии
на процесс образования.
Ключевые слова: электронный образовательный ресурс; образование, курсы; обучение;
образовательная платформа.
Современное общество уделяет большое внимание информации, её хранению и
доступности. Введенные пандемией корректировки в систему образования привели к
необходимости ввода в образовательный процесс дистанционных технологий для обмена
данными между студентами и преподавателями. Но не все платформы дистанционного
образования имеют одинаковый и удобный функционал, соответствующий требованиям
учреждения. Пользователи могут столкнуться с проблемами технического характера,
например, сложность установки или высоких системных требований, неудобным
интерфейсом или сложным, непонятным, отсутствующим функционалом. Таким образом,
проанализировав действующие платформы, можно сформулировать требования к
разрабатываемой платформе:
­ интуитивно понятный интерфейс;
­ использование элементов фирменного стиля при оформлении;
­ возможность добавления методических материалов;
­ возможность создание курсов;
­ возможность создания тестов;
­ возможность взаимодействия между студентами и преподавателями (видео
конференции, чаты);
­ возможность редактирования курсов, тестов, материалов для организатора;
­ загрузка файлов разных форматов (txt, docx, pdf и др.);
­ предоставление доступа к материалам с любых устройств;
­ обеспечение разных уровней доступа пользователям;
­ формирование отчетности по прохождению курса;
­ возможность самостоятельной записи на курсы и запись по приглашению.
Сформулировав основные требования, выдвигаемые к платформе, можно переходить к
планированию разработки, где первым этапом выступает проектирование модулей, который
138СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
включает в себя: разработку структуры платформы, выбор программных средств для
разработки, написание технического задания.
Далее описывая структуру платформы стоить добавить ее схематичное описание (рис.
1).
Так же стоит более подробно описать каждый из разделов, так в «выпадающем списке»
будут содержаться: раздел мероприятия-ближайшие события организации, раздел об
организации-сведения об образовательной деятельности, лицензии и др., раздел обратной
связи, помогающий связаться с администраторами ресурса и раздел курсы-включающий в
себя перечень образовательных курсов данной организации и доступ к курсам не требующим
авторизации на платформе. Авторизованным пользователям и администраторам должен
предоставляться больший перечень возможностей.
Рис. 1. Схематичное описание структуры платформы
Ниже (рис. 2) представлена схема раздела «курс». На схеме отображено расположение
объектов на странице раздела.
Рис. 2. Схема раздела «Курс»
139СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
На рисунке 2 представлена схема раздела «Курс», который включает в себя следующие
основные элементы:
­ Наименование курса: в данном разделе представлено название курса, являющееся
гиперссылкой для быстрого доступа к содержанию курса;
­ Лекции: здесь представлен доступ к различным методическим материалам,
необходимым для успешного прохождения курса;
­ Задания и оценки: раздел, в котором студенты могут выполнять задания, проверять
свои знания, а также просматривать свои оценки и успехи;
­ Видеоконференция: возможность общения студентов и преподавателей для
обсуждения вопросов, связанных с курсом. Видеоконференция позволяет администратору
конференции модерировать чат, предоставлять доступ к показу экрана, предоставлять
разрешение на отправку файлов в чат конференции. Администратором конференции
выступает преподаватель;
­ Доп. материалы: раздел, предназначенный для дополнительных ресурсов, которые
могут быть полезными для более глубокого понимания темы;
­ Раздел итогового тестирования включает в себя перечень вопросов как в формате
теста с выбором одного или нескольких правильных ответов, так и с вводом ответа в поле.
Тест должен быть сформирован на основании компетенций, содержащихся в курсе.
Эффективное функционирование каждого из этих элементов обеспечивает комфортное
и продуктивное обучение на электронной образовательной платформе. Так, после этапа
планирования можно переходить непосредственно к разработке.
Программирование и Разработка
При разработке электронной образовательной платформы необходимо уделить
внимание выбору языка программирования, архитектуре приложения и созданию базы
данных. Существует несколько популярных языков программирования, таких как Python, Java,
и JavaScript, которые широко используются в области веб-разработки. Выбор языка зависит
от специфики платформы и предпочтений разработчиков.
Одним из ключевых моментов является обеспечение безопасности данных
пользователей. Это включает в себя: защиту от несанкционированного доступа путем
идентификации и аутентификации пользователя, установления разных уровней доступа для
пользователей, регистрация устройств входа, шифрование данных, регулярные аудиты
безопасности.
С учетом растущей угрозы кибератак, безопасность становится одним из приоритетов
при создании образовательных платформ.
Программирование также включает в себя создание удобного интерфейса, который
соответствует требованиям интуитивности и функциональности, установленным в начальном
этапе. При создании интерфейса важным аспектом является использование фирменного
(корпоративного) стиля образовательной организации, для которой разрабатывается
платформа. Обязательными элементами являются: цвета, логотип, шрифт, лозунг или слоган-
данные составляющие способствуют узнаваемости организации и ее престижу.
140СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Тестирование
Этап тестирования играет ключевую роль в обеспечении качества платформы.
Проводятся функциональные, интеграционные и системные тесты для выявления возможных
ошибок и недочетов. Так, например, функциональное тестирование направлено на проверку
соответствия полученного результата разработки исходному техническому заданию.
Интегрированное тестирование проверяет надежность работы всех модулей, объединённых в
группу. Заключительным этапом тестирования выступает системное тестирование, которое
демонстрирует соответствие интегрированной платформы исходным требованиям,
применяется метод «черного ящика», который проверяет только внешние функции программы
не затрагивая код.
Тестирование сбалансированно сочетает методы и подходы для обеспечения стабильной
и высокопроизводительной платформы. Систематическое и внимательное тестирование
обеспечивает стабильность, предотвращает возможные сбои и повышает уверенность в
надежности продукта. Каждый этап тщательно разрабатывается, чтобы выявить
потенциальные уязвимости и гарантировать соответствие высоким стандартам качества.
Такой подход к тестированию обеспечивает пользователям платформы безопасность,
эффективность и комфортное использование, отвечая наивысшим ожиданиям и требованиям
современных пользователей.
Схема тестирования представлена на рисунке 3. Тестирование также включает проверку
совместимости с различными устройствами и браузерами, чтобы обеспечить удобство
использования для всех пользователей.
Влияние разрабатываемой платформы на образовательный процесс
Разработка и внедрение электронной образовательной платформы имеет значительное
влияние на образовательный процесс. Внедрение современных технологий позволяет
улучшить доступность образования, особенно в условиях удаленного обучения.
Разрабатываемая платформа, соответствующая сформулированным требованиям,
способствует [1]:
Удобству и эффективности обучения: интуитивный интерфейс, возможность
взаимодействия между студентами и преподавателями, а также разнообразные методические
материалы сделают процесс обучения более удобным и эффективным.
Гибкости в организации учебного процесса: платформа позволит преподавателям легко
создавать курсы, загружать материалы и проводить тестирование. это открывает новые
возможности для гибкой организации учебного процесса и адаптации к различным
потребностям студентов.
Доступности Обучения: платформа обеспечивает доступ к материалам с любых
устройств, что особенно актуально в условиях современного образования, где мобильность и
гибкость играют важную роль [3].
141СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Этапы тестирования платформы
Возможности Самостоятельного Обучения: система тестирования, самостоятельная
запись на курсы и доступ к дополнительным материалам, таким как дополнительные
материалы и заметки, стимулируют студентов к самостоятельному изучению материала и
развитию собственных академических интересов.
Эффективной Коммуникации: инструменты взаимодействия, такие как видео
конференции и окно обратной связи, создают условия для эффективной коммуникации между
студентами и преподавателями, что важно для поддержания уровня вовлеченности и
понимания материала.
При разработке электронной образовательной платформы, соответствующей
современным требованиям, можно заключить, что такой инструмент является важным
компонентом современной системы образования. Введение современных технологий
позволяет не только улучшить качество обучения, но и сделать его более доступным и гибким
[2].
Важным аспектом успешной разработки платформы является постоянное внимание к
обновлению и совершенствованию функционала с учетом новых требований образовательной
среды и технологических изменений.
142СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Разработка и внедрение такой платформы требует сбалансированного подхода, включая
учет потребностей пользователей, технических аспектов, а также обеспечение безопасности и
эффективности использования. Успешная реализация электронной образовательной
платформы способствует созданию инновационной образовательной среды, отвечающей
вызовам современного общества.
В статье был описан основной функционал разрабатываемой образовательной
платформы для дистанционного обучения с учетом основных требований: платформа должна
предоставлять возможность коммуникации между студентом и преподавателем, возможность
загружать файлы, наличие видеоконференции, просмотр статистики и оценок по пройденному
курсу, возможность создания курсов с лекциями, дополнительными материалами, заданиями
и тестированиями. Так же платформа должна корректно отображаться на любых носителях и
любых операционных системах.
В статье представлены: схематичное изображение страницы курса, схема строения
платформы, схема этапов тестирования разрабатываемой платформы. Так же обозначены
требования к дизайну интерфейса платформы. Дизайн должен обязательно включать в себя
фирменный (корпоративный) стиль образовательного учреждения, под которое
разрабатывается платформа. Интерфейс должен обладать простой и интуитивно понятной
структурой.
Студент, участвующий в программе обучения, должен изучить все разделы, включенные
в учебный курс, и успешно пройти соответствующие тесты для завершения прохождения. По
завершении курса информация о его прогрессе становится доступной как студенту, так и
преподавателю.
Преподаватель не только организует, но и осуществляет контроль над процессом
обучения. В данном приложении создатель учебного курса обладает рядом полномочий,
которые позволяют эффективно управлять практически всеми аспектами взаимодействия со
студентами. Эта особенность способствует качественной организации учебного процесса и
улучшает контроль за самостоятельностью студентов в выполнении заданий.
Литература
1. Смит Дж., Джонс М. Инновации в образовании: Технологии для обучения в цифровую
эпоху». 2019.
2. Джонсон С. Развитие электронных образовательных платформ: вызовы и перспективы
// Журнал современного образования. 2020. № 15(2). С. 45-60.
3. Петрова Е. (2017). Технологии дистанционного обучения: преимущества и
ограничения // Журнал новых образовательных технологий. 2017. № 9(4). С. 87-102.
© Катермина Т.С., Шаров В.А., 2024
143СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
РОБОТОТЕХНИКА И ПРОГРАММИРОВАНИЕ
УДК 623.746.-519
Титова Л.Н.
канд. пед. наук, доцент
Мацилеева А.С.
студент
Башкирский государственный педагогический университет им. М. Акмуллы
г. Уфа, Россия
РАЗВИТИЕ БЕСПИЛОТНИКОВ В РОССИИ
КАК АКТУАЛЬНАЯ ПРОБЛЕМА СОВРЕМЕННОСТИ ОБУЧАЕМЫХ
Аннотация. Данная статья посвящена рассмотрению беспилотников и их применения в
историческом срезе, начиная от самых примитивных – БЛА-мишеней, целью которых была
лишь подготовка кадрового состава армии, до более продвинутых – от разведки до
мультизадачности. В обзоре фигурируют также дроны-камикадзе, что стали новой вехой в
развитии индустрии производства беспилотников.
Ключевые слова: БЛА; беспилотник; барражирующий боеприпас; дрон-камикадзе;
Ланцет.
Мы рассматриваем управление беспилотниками как одно из популярных направлений
в обучении как взрослых, так и детей. Обучаемые на практике постигают основы
электротехники, принципы аэродинамики, учатся программированию. Эти навыки они
смогут применить практически в любой профессии. Тем не менее, гражданские беспилотные
авиационные системы уже имеют успешный опыт применения в России
(https://clck.ru/39aJ3q).
Системная работа по поддержке разработчиков беспилотных технологий ведется в
России с 2010 года. На ранних этапах вопросами БПЛА занимались в основном институты
развития. Остановимся на истории развития управляемых аппаратов.
XX век
В 1933 году в Великобритании был разработан первый дистанционно управляемый БЛА
H.82B Queen Bee. Он служил в качестве мишени для попадания, ознаменовав собой появление
новой индустрии – производство беспилотников. Развитые страны в то время сосредоточились
на разработке БЛА-мишеней и самолётов-снарядов. Впоследствии фокус сместился на
управляемые ракеты. В СССР же разработкой этих средств занимались ведущие
конструкторские бюро: Лавочкина, Мясищева, Туполева, Микояна, Королёва, Бериева.
О том, как велась разработка первых разведывательных БЛА и БЛА-мишеней можно
узнать в книге Матусевич А.Н. Советские беспилотные самолёты-разведчики первого
поколения. Первый экспериментальный образец межконтинентального самолёта-снаряда ТУ-
121 был собран в 1958. Он обладал следующими лётными характеристиками: взлётная масса
– 35 т, высота полёта – 19900–24100 м, дальность полёта – 3880 км. В 1960 работы по данному
144СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
вооружению были прекращены в связи с правительственными указаниями. Та же участь
постигла «Буран» ОКБ им. Мясищева и «Бурю» ОКБ им. Лавочкина. В стадии проекта также
находился ТУ-123, который во многом схож с ТУ-121, но по сравнению с ним должен был
обладать большими габаритами и массой. Была и идея модернизации ТУ-121 – ТУ-133, в
котором предполагалось увеличить дальность полёта до 5000–6000 км. Разработка
беспилотников ударного типа была признана несостоятельной.
Произошла переориентация на разведывательные БЛА и БЛА-мишени. ДБР-1 «Ястреб»
был принят на вооружение в 1964 и введён в серийное производство в том же году. Его
предназначение – осуществление воздушной разведки с помощью таких средств как
аэрофотоаппараты, станция общей радиотехнической разведки, системы привода в заданный
район и спасения разведматериалов. Основой беспилотных самолётов-разведчиков, на
вооружение которых поставлялся «Ястреб», служили немецкие «крылатые» ракеты. БСР
одноразового применения ТБР-1 был спроектирован ОКБ им. Лавочкина, прототипом
которого послужила беспилотная мишень Ла-17 50-ых годов. Но усовершенствование мишени
Ла-17 этим не окончилось и продолжалось в дальнейшем.
Следующей разработкой является многоразовый разведывательный, полностью
возвращаемый БЛА ОКБ им. Туполева Ту-141 «Стриж». Первый полёт был осуществлён в
1974, а серийно изготовлялся с 1979. Параллельно осуществлялась работа и над Ту-143 «Рейс»,
первый полёт которого и развёртывание серийного производства также пришлось на 70-ые
годы. Техническая оснастка представляла собой систему навигации, программируемую
автоматическую систему управления, а также теле- и фотоаппаратуру. Эти два беспилотника
обладают схожими характеристиками. ТУ-141 комплектовался, помимо прочего,
радиостанцией для связи с наземными средствами, но и могла применяться аппаратура
радиационной разведки с передачей данных «Сигма-Р». В свою очередь, ТУ-143 можно
назвать уменьшенной копией ТУ-141, так как он обладает меньшей дальностью полёта,
размером и пр. Ещё на стадии проекта было предусмотрено использование их в качестве БЛА-
мишеней. Сейчас эта функция, пожалуй, единственная, ради которой их можно применять до
сих пор.
В 90-ых была произведена модернизация «Рейса», получившая имя Ту-243. Появилась
новая аппаратура разведки. Было 2 варианта оснащения: фотоаппарат ПА-402 и телевизионная
система «Аист-М» с системой связи «Трасса-М» в первом случае и во втором – инфракрасная
разведка «Зима-М» с «Трассой-М».
Последняя советская разработка разведывательного БЛА – Пчела-1Т. Сама «Пчела»
использовалась вместе с комплексом «Строй-П» для оперативного взаимодействия со
средствами огневого поражения РСЗО «Смерч», «Град», ствольной артиллерии, ударных
вертолётов в условиях огневого и радиоэлектронного противодействия. «Строй-П» с «Пчелой-
1Т» был создан в 1990 ОКБ им. Яковлева и предназначался для разведки данных и передачи
их в виде телевизионного или тепловизионного изображения в реальном времени. В 1997
комплекс принят на вооружение Вооружённых сил Российской Федерации.
145СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
XXI век
Теперь рассмотрим семейство малых БЛА «Элерон», а именно «Элерон», «Элерон-3СВ»
и «Элерон-10СВ». Они разработаны российским предприятием «ЭНИКС». Приняты на
вооружение соответственно в 2003, 2005 и 2007. Предназначены для воздушной разведки. Из
навигации присутствует GPS, ГЛОНАСС и курсовоздушная. Возможна оснастка фото- и
видеокамерой, тепловизором. У «Элерона-3СВ» время полёта составляет 100 минут и взлётная
масса – 5,5 кг, а у первого «Элерона» – 75 минут и взлётная масса – 3,4 кг. Характеристики
«Элерона-10СВ»: макс. взлётная масса – 15,5 кг, макс. дальность полёта – 60 км, время полёта
– 120 минут. Существует ряд модификаций, одной из которых является «Валдай-М».
Преимуществами этих БЛА являются низкая акустическая заметность, увеличенная
скороподъёмность, возможность складывания и раскладывания без применения инструмента,
сменные модули полезной нагрузки, система прогноза продолжительности полёта.
Далее перейдём к комплексу воздушной разведки «Типчак». Он был разработан КБ
«Луч». Проектные работы были ещё в 80-ых годах, а принят на вооружение в 2008. «Типчак»
комплектуется с БЛА-05 (прежнее название 9М62). В состав комплекса «Типчак» входит 4
машины и до 6 БЛА-05. При необходимости возможна замена на БЛА-07 или БЛА-08,
аппаратурой радиотехнической или химической разведки, ретрансляции и др. Характеристики
БЛА-05 / БЛА-07 / БЛА-08: макс. взлётная масса, кг – 70 / 35 / 90, продолжительность полёта,
мин – 120 / 180 / 480. В состав полезной нагрузки БЛА-08 могут входить цифровой
двухспектральный фотоаппарат, гиростабилизированная оптико-электронная система, РЛС
бокового обзора, аппаратура ретрансляции, радиотехнической разведки, радиоэлектронной
борьбы и радиационно-химической разведки.
Стоящие на вооружении БЛА «Искатель» (2011) и «Застава» (2012) не рассматриваются,
так как из отечественного в них только сборка, а разработка израильская.
Семейство «Орланов». Являются одними из самых известных российских
беспилотников. Широкое распространение получил БЛА «Орлан-10», что был создан
компанией «Специальный технологический центр» и применяется с 2010. Свою популярность
также сыскали «Орлан-30» и «Орлан-50». Характеристики «Орлан-10»: макс. взлётная масса
– 18 кг, макс. продолжительность полёта – 16–18 часов. Используется для разведки. «Орлан-
10» не первый в линейке этих беспилотников, а среди них самым тяжёлым является «Орлан-
50».
«Корсар» – российский многоцелевой беспилотный летательный аппарат, разработки КБ
«Луч» в 2015. БЛА может применяться, как в гражданской, так и в военной сфере.
Характеристики: макс. взлётная масса – 200 кг, продолжительность полёта – 450 мин. Главным
преимуществом является открытая архитектура. Комплекс «Корсар» может быть
укомплектован оптико-электронными системами, радиолокационной станцией, цифровой
аэрофотокамерой, метеорологическим оборудованием, а также транспортным модулем.
«Тахион», малый электрический БЛА, был разработан «Ижмаш – Беспилотные системы»
и принят на вооружение в 2015, а проектные работы велись с 2000. Используется для сбора
разведданных. Комплектация стандартная: фотокамера, телекамера, инфракрасная камера,
146СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
тепловизор. Характеристики: макс. взлётная масса – 25 кг, продолжительность полёта – 120
мин.
Тяжёлый ударный беспилотник «Иноходец» разработан в 2011–2015 (разработчик
«Группа Кронштадт») и предназначен для разведки местности, выполнения патрульных и
наблюдательных полётов, огневой поддержки, а также может быть использован в качестве
самостоятельной ударной единицы. Разработка БЛА выполнена по заказу Министерства
обороны Российской Федерации в рамках проекта «Орион», предусматривавшего создание
военной («Иноходец»), гражданской («Орион») и экспортной («Орион-Э») версии. В 2020
принят на вооружение. «Иноходец» может нести разнообразную полезную нагрузку. Взлётная
масса – 1200 кг. Может находиться в воздухе 24 часа и преодолеть расстояние 850 км. Общие
характеристики приблизительно соответствуют американскому Predator. Для «Иноходца»
может быть следующая оснастка вооружением: свободнопадающие бомбы ФАБ-50,
корректируемые авиабомбы с лазерным, тепловизионным или телевизионным наведением
КАБ-20 и КАБ-50, управляемые планирующие бомбы УПАБ-50, малогабаритные крылатые
ракеты Х-50 класса «воздух – земля».
Ударный российский БЛА «Альтаир» разработан ОКБ «Сокол» АО «НПО ОКБ им. М.П.
Симонова». Но есть и другое наименование – «Альтиус-М». Разработка началась ещё в 2012,
а первый полёт в 2016. «Альтаир» является разведывательно-ударным беспилотным
летательным аппаратом и предназначен для длительного (до 48 часов) патрулирования,
разведки, целеуказания, уничтожения наземных целей. На БЛА «Альтаир» установлена
бесплатформенная инерциальная навигационная система БИНС-СП-2, которая позволит
понизить заметность БЛА и увеличить его помехоустойчивость. БИНС-СП-2 полностью
автономна и не требует передачи или получения внешних сигналов от спутников или
наземных станций. Характеристики: макс. взлётная масса – 5000 кг, макс. дальность полёта –
8000 км.
«Охотник» – первый в России ударный тяжёлый БЛА. Разработан ОКБ «Сухого».
Первый полёт был осуществлён в 2019. БЛА выполнен с применением технологии «стелс».
«Охотник» самостоятельно совершает взлёт и возвращается обратно, но он пока не получил
функцию принятия решения на применение оружия – остаётся за человеком. Характеристики:
макс. взлётная масса – 25000 кг, дальность полёта – 5000 км. Аналогом этого БЛА можно
считать американский Reaper MQ-9.
Из интервью с Александром Захаровым, главным конструктором группы компаний Zala
Aero, отвечающей за разработку и серийное производство семейства беспилотников «Ланцет»,
становится ясен вектор развития беспилотников в текущих реалиях жизни.
(https://clck.ru/39otnW).
До появления ланцетов выпускались Zala Aero барражирующий боеприпас «Куб». Его
продолжительность полёта – 30 мин и взлётная масса не более 15 кг, а преимущества: высокая
точность, скрытый запуск, бесшумность, простота в применении.
Малогабаритные дроны-камикадзе, изготовленные из пластиковых и других не
отражающих радиосигнал материалов, сложно обнаружить. Барражирующие дроны остаются
147СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
практически невидимыми для радаров противника. Ну и, конечно, экономическая
составляющая – такой боеприпас стоит намного меньше стандартных видов вооружений, не
уступая им по эффективности. Кардинальное отличие «Ланцета» от предыдущего поколения
и многих иностранных аналогов – ему не нужна никакая спутниковая навигация. Передовое
достижение «Ланцета» – это его автоматическая система распознавания целей. Комплекс
«Ланцет» использует несколько типов систем наведения: координатную, оптико-электронную
и комбинированную. Дрон передаёт изображение цели с помощью телевизионного канала
связи, чтобы подтвердить успешность её поражения. Он способен зависнуть в конкретном
районе, что позволяет оператору выбрать правильное время для максимальной эффективности
атаки. Если цель не получилось обнаружить, беспилотник можно вернуть назад, в отличие от
управляемого снаряда или ракеты. Также «Ланцеты» способны переключаться между целями
и уклоняться от средств противовоздушной обороны (ПВО Ланцета 1/3: взлётная масса 5/12
кг, масса БЧ 1/3 кг, скорость полёта 80–110 км/ч, время полёта 30/50 мин, а также имеется
защита от боевых лазеров ПВО.).
Подводя итог, пилотируемая авиация не исчезнет, хотя доля беспилотных летательных
аппаратов будет расти. На поле боя всё более массово начнут применяться различные
беспилотные системы, но они будут дополнением к пилотируемой технике, ни в коем случае
не заменяя её. По поводу разработки и применения гиперзвуковых БЛА, то на сегодняшний
день сдерживающим фактором широкого применение сверхзвуковых БЛА является
недостаточная надёжность средств разведки выдавать достоверные данные на сверхзвуковых
скоростях. Есть и другие ограничения функционирования радиоэлектронных средств в
сверхзвуковой среде (необходимость повышения частоты времени локации), но это
препятствие в скором времени будет преодолено и уже есть данные о разработке средств
разведки на новых физических принципах (https://clck.ru/39aJCu).
Обобщив данный исторический опыт можно сделать вывод, что конструирование,
программирование беспилотных летательных аппаратов, навыки по управлению ими – всё это
способствует эффективному развитию не только взрослого поколения, но и юного. К
профессионально важным качествам операторов управляемых аппаратов относят
ответственность, сдержанность, педантичность, технический склад ума, развитое логическое
и аналитическое мышление, наблюдательность, внимание к деталям, стрессоустойчивость.
Наряду с этим они должны обладать отличной моторикой, быстрой реакцией и мышлением,
способностью мгновенно принимать решения во время непредвиденных ситуаций,
предупреждая человеческие жертвы, разрушения, материальные потери 13. Все
перечисленные качества должны проявляться в любых профессиональных и средовых
обстоятельствах. В.Д. Небылицин выделил следующие основные характеристики надежности
операторского труда: 1) «долговременную» выносливость (сопротивляемость усталости
к концу дня и особенно при монотонной работе); 2) выносливость к экстренному напряжению
и перенапряжению (например, при авариях необходимо выполнять максимальный объем
работ за минимальные сроки); 3) помехоустойчивость (устойчивость внимания);
4) спонтанная отвлекаемость (устойчивость к внутренним отвлекающим факторам, особенно
148СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
в условиях пассивного наблюдения у операторов-контролеров); 5) реакцию
на непредвиденные раздражители (в случае неожиданного сигнала иногда наблюдается
период «психической рефракторности», когда восприятие сужается и концентрируется лишь
на источнике этого раздражителя, не замечая другие важные сигналы); 6) переключаемость
внимания (сокращение времени на «вхождение» в деятельность по выполнению новой
задачи); 7) устойчивость к действию факторов среды (температуре, давлению, влажности,
вибрации, шуму, ускорению и т. п.)
То есть знания и навыки, которые получат обучаемые являются частью многих
профессий.
© Титова Л.Н., Мацилеева А.С., 2024
149СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 37
Пащенко О.И.
канд. пед. наук, доцент
Нижневартовский государственный университет
г. Нижневартовск, Россия
ОБРАЗОВАТЕЛЬНАЯ РОБОТОТЕХНИКА В СОВРЕМЕННОЙ ШКОЛЕ – ПОДХОДЫ,
ПРОБЛЕМЫ, ПЕРСПЕКТИВЫ
Аннотация. Одним из эффективных средств инженерного образования школьников
признана прикладная наука робототехника, основным предметом изучения которой является
разработка программно-управляемых систем. В связи с этим, в последнее время большое
внимание исследователей уделяется вопросам внедрения робототехники в образовательный
процесс. В статье представлены результаты исследования, целью которого стало поиск
подходов к внедрению робототехники в образовательный процесс детей старшего школьного
возраста. Охарактеризованы подходы внедрения робототехники в образовательный процесс,
проанализированы существующие учебно-методические комплексы по обучению
программирования роботов на платформе Lego и Arduino.
Ключевые слова: робототехника; образовательная робототехника; платформа Lego;
платформа Arduino; дополнительное образование; кружок по робототехнике.
В современном мире интенсивно развиваются электроника, механика,
программирование, создаются благоприятные условия для широкого распространения
программно-управляемых устройств, робототехники. Робототехника – научное,
междисциплинарное направление, возникшее на основе кибернетики и механики, является
одним из самых развивающихся и перспективных направлений сферы информационных
технологий. Современное производство невозможно представить без использования
роботизированных систем, что в свою очередь, требует большого количества подготовленных
специалистов в области создания данных систем. Начинать подготовку таких специалистов,
по нашему мнению, необходимо со школьного возраста, постепенно приобщая ребят к
техническому творчеству, проектированию, изобретательности, тем самым ориентируя на
выбор инженерно-технических профессий. Все это определяет главные стратегические
ориентиры и приоритеты дальнейшего развития современного образования.
В настоящее время существует большое количество исследований, посвященных как
вопросам интеграции робототехники в образовательный процесс, так и особенностям
подготовки специалистов к обучению робототехнике в образовательных учреждениях [6; 20;
22].
В последнее время широкое распространение получило понятие образовательная
робототехника. Образовательная робототехника – это новое междисциплинарное направление
обучения школьников, интегрирующее знания о физике, мехатронике, технологии,
математике, кибернетике и ИКТ, позволяющее вовлечь в процесс инновационного научно-
технического творчества учащихся разного возраста. Она направлена на популяризацию
научно-технического творчества и повышение престижа инженерных профессий среди
150СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
молодежи, развитие у молодежи навыков практического решения актуальных инженерно-
технических задач и работы с техникой [25].
Образовательная робототехника является актуальным и наиболее востребованным
направлением как в системе дополнительного образования детей, так становится частью
учебного процесса современной школы. Она может логично вписаться в учебную и
внеурочную программы общеобразовательной школы. Также робототехника может быть
содержательной частью предметов «Технология» и «Информатика», и не вызывает сомнения
факт, что использование робототехнических устройств на школьных предметах позволит
разнообразить учебную деятельность, повысит у детей интерес к обучению.
Следует отметить, что образовательная робототехника развивается и уже существует
опыт ее внедрения в образовательный процесс современной школы в рамках изучения
предмета «Технология» [24]. В соответствии с новым ФГОС ООО в рамках учебного предмета
«Технология» [16] «Предметные результаты по учебному предмету «Технология» должны
обеспечивать: сформированность представлений о современном уровне развития технологий
и понимания трендов технологического развития, в том числе в сфере цифровых технологий
и искусственного интеллекта, роботизированных систем, ресурсосберегающей энергетики и
другим приоритетным направлениям научно-технологического развития Российской
Федерации…».
Анализ нормативной [7; 16; 17; 18], научно-методической и учебной литературы [8; 12;
19; 20; 27; 29; 30], связанной с проблемой исследования позволил нам выделить основные
подходы к внедрению робототехники в образовательный процесс современной школы.
Необходимо отметить, что нет единой методики обучения робототехнике в школе, и всё
зависит от возможностей той или иной образовательной организации. Существуют
интересные и успешные практики обучения, и чаще робототехника в школе изучается в рамках
внеуроченой деятельности, дополнительного образования.
Основы робототехники можно начинать изучать в начальной школе, и также не менее
актуально ее изучение детьми среднего и старшего школьного возраста. Существует
множество платформ для программирования робототехнических устройств, но в
образовательном процессе современных школ наиболее популярна робототехническая
платформа Lego. Не вызывает сомнения актуальность использования данной платформы в
образовательной робототехнике с детьми младшего и среднего школьного возраста. С Lego-
роботами учащиеся усваивают основные понятия программирования и конструирования,
собирают своих роботов из блоков и программируют их действия. По нашему мнению, для
детей старшего школьного возраста (от 13-15 до 17-18 лет) наиболее актуальна
робототехническая платформа Arduino. Arduino – это платформа для создания электроники
своими руками. Она позволяет освоить программирование на Си-подобных языках, создавать
роботов из подручных средств, бытовой сломанной техники или готовых изделий. С этой
платформой можно решить практически любую техническую задачу: от создания простых
роботов до умных робототехнических устройств. С платформой Arduino можно освоить даже
системы искусственного интеллекта и создать устройства интернета вещей. Это два
151СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
актуальных ИТ-направления, которые сейчас очень активно развиваются и испытывают
нехватку специалистов.
На сегодняшний день обучение школьников программированию на платформе Arduino
затруднено, в связи с недостаточной разработанностью данного вопроса. В связи с этим
актуальной является задача определения подходов к внедрению робототехники на платформе
Arduino в образовательный процесс детей старшего школьного возраста, а также важным
становится разработка учебно-методических комплексов по программированию роботов на
платформе Arduino.
По нашему мнению, обучение программированию роботов на платформе Arduino для
детей старшего школьного возраста должно быть организовано в рамках дополнительного
образования, которое, в соответствии с Федеральным законом «Об образовании в Российской
Федерации» должно «обеспечить адаптацию детей к жизни в современном обществе,
предопределить их профориентацию» [26]. Организовать обучение программированию
роботов на платформе Arduino необходимо через кружковую деятельность, так как именно в
кружке, возможна командная работа, в которой каждый участник выполняет свою задачу,
отстаивает свои идеи, учится взаимодействовать с другими участниками. Все эти качества
личности являются важными характеристиками, определяющими успешность специалиста
инженерно-технической профессии.
Так как на сегодняшний день однозначно решен вопрос об актуальности внедрения
робототехники в образовательный процесс современной школы и активно осуществляется
поиск технологий и методик, в связи с этим, накоплен определенный практический опыт в
области организации обучения робототехнике в рамках дополнительного образования.
Практически все исследователи сходятся во мнении, что формой организации такого
дополнительного образования должен быть кружок. Мнения по поводу используемых
робототехнических платформ разнообразны.
В настоящее время накоплен большой опыт по практике внедрения робототехники в
дополнительное образование детей на основе платформы Lego [1; 2; 11; 27]. К примеру, Морев
А.В. в своем исследовании [11] представил опыт работы технического кружка по
дополнительной образовательной программе «Первый шаг в робототехнику на базе
конструктора Lego Mindstorms EV3» на базе Саратовского областного института развития
образования. В исследовании принимали обучающиеся 9-15 лет. Исследование Ваграменко
Я.А., Игнатова М.Б., Яламова Г.Ю. [2] также посвящено вопросам включения робототехники
в учебный процесс школы через дополнительное образование. Авторами представлена
программа курса по робототехнике с использованием Lego конструкторов. Бурнакова М.В. в
своем исследовании представила интересный опыт обучения основам робототехники в
республиканском детском технопарке «Кванториум «Хакасия»» [1]. Также нельзя не отметить
исследование Филиппова С.А [27], который имеет опыт руководства кружками робототехники
в нескольких школах города Санкт-Петербурга.
Многие ученые и практики считают, что изучение робототехники в старшем школьном
возрасте должно проходить на платформе Arduino [3; 4; 10; 15; 28]. Некоторые исследователи
152СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
считают, что использование данной платформы затруднительно по причине отсутствие
необходимых знаний для конструирования роботов на основе этой платформы. В работе
Самариной А.Е [21] представлены результаты эксперимента по проведению занятий по
робототехнике в физико-математической школе при Смоленском государственном
университете. Описан опыт использования возможности конструктора Scratchduino для
подготовки учащихся к созданию роботов на платформе Arduino.
Существует достаточное количество исследований, посвященных различным аспектам
организации обучения школьников робототехнике на основе Arduino в рамках
дополнительного образования [3-5; 8-10; 15; 23; 28; 31].
В исследовании Петрущенкова А.В., Кузьмина С.В. [15] рассматриваются аспекты
организации деятельности школьников в рамках программы дополнительного образования по
робототехнике на основе Arduino, а именно особенности подготовки проектов к участию в
образовательных соревнованиях. Исследование Шабалина К.В. [31] посвящено вопросам
формирования креативных способностей школьников на занятиях робототехникой при
выполнении технических исследовательских проектов на базе платформы Arduino. В
исследовании Гребневой Д.М. [5] представлен опыт Нижнетагильского государственного
социально-педагогического института в организации и проведении профориентационных
мастер-классов по образовательной робототехнике для обучающихся старшей школы на базе
платформ LegoEducation и Arduino. Интересный опыт представлен в работе Костиковой И.Ю.
и Моднова С.И. [9], а именно показаны результаты исследования по организации работы
кружка «Мир современной инженерии», организованного в детском оздоровительном лагере
им. Горького, расположенном на территории Ярославской области. Свой подход в видении
изучаемого нами вопроса представлено в исследовании Варлашина В.В. и Шмакова О.А. [3],
а именно, ими предложена методика преподавания робототехники на базе платформы Arduino,
отличительной особенностью которой явился отказ от робототехнических конструкторов.
Наша точка зрения совпадает с подходом, представленным в работе Ситникова П.Л. [23],
в соответствии с которым автор, в рамках внеурочных занятий по робототехнике, в качестве
подготовительной работы обязательно рекомендует изучение основ программирования на
языке высоко уровня С++ или его аналога.
В настоящее время разработано достаточное количество рабочих программ кружков по
робототехнике на платформе Arduino. Во многих программах акцент делается на темы,
связанные с проектированием роботов, без предварительной подготовки в вопросах
программирования на Си подобных языках.
По нашему мнению, в программу кружков по робототехнике на платформе Arduino
должен быть включен раздел (модуль) по изучению Си подобных языков программирования.
Это связано с тем, что при изучении предмета «Информатика» в соответствии с ФГОС ООО
[16] содержание раздела «Программирование» предполагает освоение учащимися языка
программирования Pascal. На изучение визуальных языков программирования (часто, на
примере Visual Basic и Gambas) отводится незначительное количество часов (10-14 часов) или
не отводится совсем [13; 14]. А Си подобные языки программирования изучается в рамках
153СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
углубленного изучения предмета информатика, чаще в форме элективных курсов или
дополнительных занятий. Незнание учащимися Си-подобных языков программирования
вызывает сложности в программировании робототехнических устройств на платформе
Arduino.
Из имеющихся учебных материалов, которые можно использовать при организации
кружка, на наш взгляд, можно выделить пособие Копосова Д.Г. [8], посвященное вопросам
программирования роботов на платформе Arduino. В данном пособии подробно
рассматриваются аспекты программирования роботов на платформе Arduino.
Не умаляя важности всех существующих разработок, посвященных организации
обучения проектированию роботов на платформе Arduino, в рамках исследования нами было
принято решение создать учебно-методический комплекс кружка по программированию
роботов на платформе Arduino, который включает программу из двух разделов «Основы
программирования на Си» и «Робототехника на платформе Arduino» и учебно-методические
материалы для учащихся и педагогов.
Подводя итог, следует отметить, что внедрение робототехники в образовательный
процесс современной школы является однозначно актуальным и перспективным
направлением развития современного образования.
Литература
1. Бурнакова М.В. Из опыта обучения основам робототехники в республиканском
детском технопарке «Кванториум Хакасия» // Вестник Хакасского государственного
университета им. Н.Ф. Катанова. 2019. № 4 (30). С. 109-112.
2. Ваграменко Я.А., Игнатьев М.Б., Яламов Г.Ю. Методические рекомендации по
включению программируемых устройств с робототехническими функциями в учебный
процесс (для педагогов дополнительного образования) // Управление образованием: теория и
практика. 2015. № 4(20). С. 58-64.
3. Варлашин В.В., Шмаков О.А. Методика преподавания робототехники на базе
платформы ARDUINO в рамках дополнительного образования в общеобразовательных
учреждениях // Робототехника и техническая кибернетика. 2018. № 2(19). С. 16-20.
4. Винницкий Ю.А. Григорьев А.Т. Scratch и Arduino для юных программистов и
конструкторов, СПб.: БХВ-Петербург, 2018. 176 с.
5. Гребнева Д.М. Из опыта проведения профориентационных мастер-классов по
образовательной робототехнике // Современные проблемы науки и образования. 2020. №1. С.
29.
6. Ионкина Н.А. Особенности отечественного и зарубежного опыта подготовки
педагогов к обучению робототехнике // Вестник Российского университета дружбы народов,
Серия «Информатизация образования». 2018. Т. 15. №1. С. 114-121.
7. Комплексная программа «Развитие образовательной робототехники и непрерывного
IT-образования в Российской Федерации»: утверждена Распоряжением Президента АНО
«Агентство инновационного развития» от 01 января 2001 г. https://clck.ru/39oESM.
154СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
8. Копосов Д.Г. Робототехника на платформе Arduino. 2-е изд, пересмотр, М.: БИНОМ.
Лаборатория знаний, 2020. 176 с.
9. Костикова И.Ю., Моднов С.И. Кружковая работа по технологическому образованию
школьников // Дополнительное профессиональное образование: традиции и инновации: Сб.
статей двенадцатой национальной научно-практической конференции (г. Ярославль, 04 марта
2020 г.). Ярославль, 2020. С. 100-110.
10. Лях В.И., Константинова А.И. Особенности внеурочной деятельности при
преподавании дисциплины «Основы робототехники» в рамках дополнительного образования
школьников // Инновационная наука как основа развития современного государства: Сб.
научных статей по итогам международной научно-практической конференции (г. Санкт-
Петербург, 10-11 ноября 2017 г.). СПб., 2017. С. 125-126.
11. Морев А.В. Формирование компонентов технической культуры на занятиях по
робототехнике в дополнительном образовании детей // Научно-методический электронный
журнал «Концепт». 2019. №6, (июнь). С. 45-56. http://ekoncept.ru/2019/191043.htm
12. Никитина Т.В. Образовательная робототехника как направление инженерно-
технического творчества школьников. Челябинск: Изд-во Челяб. гос. пед. ун-та, 2014. 171 с.
13. Пащенко О.И., Рысаева Т.И. Особенности формирования алгоритмического
мышления при изучении программирования в условиях смешанного обучения // Современное
программирование: мат-лы IV Международной научно-практической конференции (г.
Нижневартовск, 08 декабря 2021 г.). Нижневартовск, 2022. С. 330-338.
14. Пащенко О.И., Скороход Е.Г. Особенности обучения языкам программирования в
профильной школе // Культура, наука, образование: проблемы и перспективы: Мат-лы V
Международной научно-практической конференции (г. Нижневартовск, 09-10 февраля 2016
г.). Нижневартовск, 2016. Ч. II. С. 173-176.
15. Петрущенков А.В, Кузьмин С.В. Организация деятельности школьников в рамках
программы дополнительного образования по робототехнике // Известия Балтийской
государственной академии рыбопромыслового флота: психолого-педагогические науки. 2018.
№ 2(44). С. 89-94.
16. Приказ Министерства просвещения РФ от 31 мая 2021 года №278 «Об утверждении
федерального государственного образовательного стандарта основного общего образования»
https://clck.ru/39oFJ9
17. Приказ Минпросвещения РФ от 09.11.2018 г. №196 «Об утверждении Порядка
организации и осуществления образовательной деятельности по дополнительным
общеобразовательным программам» (с изм. и доп. от 30.09.2020 г.). https://clck.ru/39oEqw
18. Приоритетный проект в области образования «Современная цифровая
образовательная среда в Российской Федерации»: утвержден Правительством Российской
Федерации 25 октября 2016 года. https://clck.ru/39oEvg
19. Прокопов Е.Е., Степанов П.Г. Разработка моделей внедрения робототехники в
образовательный процесс // Современные инструментальные системы, информационные
155СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
технологии и инновации: Сб. научных трудов XV-ой Международной научно-практической
конференции (г. Курск, 19-20 марта 2020 г.). Курск, 2020. С. 237-241.
20. Пустыльник П.Н. Совершенствование методологии обучения бакалавров
технологического образования под влиянием развития образовательной робототехники //
Вестник ТГПУ. 2017. № 4(181). С. 16–21.
21. Самарина А.Е. Возможности конструктора “Scratchduino” для обеспечения занятий
по робототехнике на разных ступенях школы // Научно-методический электронный журнал
«Концепт». 2016. №10, (октябрь). 0,4 п. л. http://e-koncept.ru/2016/16215.htm.
22. Седина Е.С., Соболева Е.В. Обоснование необходимости совершенствования модели
обучения робототехнике как основы стратегии подготовки кадров для профессий будущего //
Научно-методический электронный журнал «Концепт». 2018. №7, (июль). С. 540–551.
23. Ситников П.Л. Использование платформы ARDUINO в образовательной
деятельности // Образование и наука в современных условиях. 2015. № 1(2). С. 134-135.
24. Старцева М.А, Гусева К.С. Робототехника на уроках технологии // Актуальные
проблемы профессионального педагогического и технологического образования в условиях
реализации ФГОС: Мат-лы IV Международной очно-заочной научно-практической
конференции (г. Шадринск, 26 ноября 2015 г.). Шадринск, 2016. С. 79-84.
25. Тузикова И.В. Изучение робототехники – путь к инженерным специальностям //
Школа и производство. 2013. №5. С. 45-47.
26. Федеральный закон Российской Федерации от 29 декабря 2012 г. №273-ФЗ «Об
образовании в Российской Федерации». https://clck.ru/39oFPn
27. Филиппов В.И. Организация занятий по робототехнике во внеурочной деятельности
в основной школе // Информатика и образование. 2016. №6. С. 20-27.
28. Хегай Д.Н, Белов Ф.А. Использование ARDUINO в общеобразовательных
учреждениях в рамках внеурочной кружковой деятельности // Инновационные стратегии
развития педагогического образования: сб. научных трудов Тринадцатой Международной
очно-заочной научно-методической конференции (г. Саратов, 13 апреля 2017 г.). Ч. 2. 2017. С.
147-151.
29. Четина В.В. Особенности внедрения робототехники в образовательный процесс //
Наука и перспективы. 2017. №2. С. 80-89. nip.esrae.ru/14-109
30. Чупин Д.Ю, Ступин А.А, Ступина Е.Е, Классов А.Б. Образовательная робототехника.
Новосибирск: Сибпринт, 2019. 114 с.
31. Шабалин К.В. Формирование креативных способностей школьников при
выполнении проектов на базе платформы ARDUINO // Педагогическое образование в России.
2020. №2. С. 135-140.
© Пащенко О.И., 2024
156СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 519.687.7
Слива М.В.
канд. пед. наук
Нижневартовский государственный университет
г. Нижневартовск, Россия
ПРОГРАММНО-АППАРАТНЫЙ КОМПЛЕКС ДЛЯ ИЗУЧЕНИЯ
ОСОБЕННОСТЕЙ ШАГАЮЩИХ РОБОТОВ
Аннотация. В статье рассматривается подход к созданию программно-аппаратного
комплекса в виде учебного шагающего четырёхногого робота и программного обеспечения
для изучения особенностей шагающих механизмов.
Ключевые слова: Arduino; робот; программно-аппаратный комплекс; Kotlin; Compose.
Современные робототехнические платформы представлены большим количеством
видов: колесные, гусеничные, шагающие, летающие (самолетные, вертолетные, коптеры).
Рассмотрим более подробно шагающих роботов.
Одна из самых устойчивых конструкций на основе шагающей платформы – шестиногий
робот, так как можно передвигать по 3 ноги за одни раз, пока другие 3 стоят на месте. Но такая
платформа и наиболее затратная в плане сервомоторов – от 12 до 18 в зависимости от
количества моторов на одну ногу.
Если рассматривать четырёхногую платформу, то сервомоторов для ее создания нужно
меньше, но с ней в плане перемещения робота может возникнуть ряд сложностей. В
зависимости от конструкции самой платформы, проблема может быть в распределении
нагрузки и устойчивости робота при перемещении одной или нескольких конечностей.
Поэтому возникает необходимость в учебном роботе, с которым можно проводить
эксперименты для изучения особенностей передвижения шагающих роботов.
Для реализации данного проекта была использована готовая модель четырехногой
платформы (https://clck.ru/39aKKL), с внесением изменений для удобного обеспечения
питания от двух аккумуляторов форм-фактора 16340 (RCR123A) с сохранением доступа к
порту для программирования микроконтроллера (рис. 1). Для каждой конечности данной
платформы используются 2 сервомотора модели SG90 (рис. 2).
Одной из особенностей такой платформы является разнообразие вариантов ее сборки в
зависимости от выбранного способа соединения конечностей, что позволяет
экспериментировать с различными итоговыми результатами.
В качестве управляющей системы была выбрана Arduino Nano на основе
микроконтроллера ATmega168P с платой расширения Arduino Nano Shield v3 (рис. 3) для
более удобного подключения всех сервомоторов.
Подключение всех сервомоторов к плате показано схематически на рисунке 4.
157СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Четырехногая платформа с держателем для аккумулятора
Рис. 2. Сервомотор SG90
Рис. 3. Arduino Nano с платой расширения Arduino Nano Shield v3
158СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 4. Схема подключения всех сервомоторов к плате
Для создания программной части для управления роботом было принято решение
использовать мультиплатформенный фреймворк Compose, чтобы унифицировать десктопную
и мобильную версию программного обеспечения, и язык Kotlin.
Графический интерфейс пользователя было решено разбить на 2 части:
 учебная часть, в которой можно свободно манипулировать всеми конечностями робота
для изучения особенностей данной платформы;
 часть для управления передвижением робота, в которой уже будут заложены
комплексные движения сервомоторов для перемещения робота прямо, назад, влево, вправо с
синхронизацией всех конечностей.
Чтобы максимально приблизить интерфейс управления всеми конечностями в учебной
части к реальному роботу, было принято решение сделать несколько рендеров 3d модели и на
их основе реализовать манипуляцию сервомоторами в программе (т. е. свободный поворот
любого сервомотора на нужный угол). Для этого отдельно был сделан рендер основы
платформы в качестве фона (рис. 5) и всех конечностей (с прозрачным фоном, для создания
эффекта свободного вращения при манипуляциях с роботом через учебную часть отдельно
вид сверху и вид сбоку, для разных видов вращений – рис. 6, 7).
Рис. 5. Основа четырёхногой платформы, вид сверху
159СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 6. Конечности робота – вид сверху
Рис. 7. Конечности робота – вид сбоку
Также, для согласования ограничения вращения сервомоторов во избежание
повреждения платформы, были программно ограничены углы поворотов в соответствии с
реальными ограничениями конструкции.
Для передачи управляющих сигналов на платформу было решено использовать два вида
подключения:
 через USB порт для отладки действий;
 через Bluetooth для управления в реальном режиме.
Для первого вида подключения используется библиотека jSSC (https://clck.ru/39aKgW),
которая представляет USB-порт как COM-порт и позволяет отправлять в него любые данные.
Такой вид подключения может использоваться только для десктоп-версии создаваемого
программного обеспечения.
Для второго вида подключения используется встроенная в Android система поддержки
работы с Bluetooth-модулем.
Для реализации функционала удобно использовать элементы теории конечных
автоматов, что позволит упростить понимание кода и его дальнейшую поддержку[2].
В итоге, можно выделить следующий функционал получившегося программно-
аппаратного комплекса:
 возможность варьирования способов крепления конечностей к корпусу;
 возможность свободного вращения любой конечности;
 возможность простого управления роботом через смартфон и десктоп;
160СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
 возможность изучения способов перемещения роботов на основе четырёхногой
платформы.
В качестве перспективы развития проекта можно добавить контроль и коррекцию
состояния робота для улучшения его управляемости и устойчивости [1].
Литература
1. Катермина Т.С., Слива М.В. Контроль и коррекция робототехнических систем
средствами автоматического и программного управления // Системный анализ в
проектировании и управлении: сб. научных трудов XXV Международной научной и учебно-
практической конференции: в 3 ч. (г. Санкт-Петербург, 13-14 октября 2021 г.). СПб., 2021. С.
139-146. https://doi.org/10.18720/SPBPU/2/id21-363
2. Слива М.В. Применение конечных автоматов в робототехнике // Современное
программирование: мат-лы III Международной научно-практической конференции (г.
Нижневартовск, 27-29 ноября 2020 г.). Нижневартовск, 2020. С. 218-221.
© Слива М.В., 2024
161СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
НЕЙРОННЫЕ СЕТИ.
ИНТЕЛЛЕКТУАЛЬНЫЕ ИНФОРМАЦИОННЫЕ СИСТЕМЫ
УДК 004.023
Абрамян Г.В.
д-р пед. наук, профессор
Российский государственный педагогический университет им. А.И. Герцена
Государственный университет морского и речного флота им. адмирала С.О. Макарова
г. Санкт-Петербург, Россия
ОСОБЕННОСТИ, СТРУКТУРА И ФУНКЦИИ ИНТЕЛЛЕКТУАЛЬНОЙ СИСТЕМЫ
ГОРМОНАЛЬНОГО ПРОКТОРИНГА КАЧЕСТВА ПРАКТИЧЕСКОЙ ПОДГОТОВКИ
СПЕЦИАЛИСТОВ НА ОСНОВЕ НЕЙРОТРАНСМИТТЕРЫХ ИНТЕРФЕЙСОВ
БИОЦИФРОВЫХ ПЛАТФОРМ
Аннотация. В статье рассматриваются особенности, структура и функции
интеллектуальной системы гормонального прокторинга качества практической подготовки
специалистов на основе нейротрансмиттерых интерфейсов управления учебным контентом и
поведением обучаемых биоцифровых платформ. Система позволит реализовывать
персонофицированный прокторинг учебно-воспитательных испытаний, обеспечивая
количественное и качественное управление показателями качества воспитания и обучения с
учетом неокортикальных и лимбических гормональных особенностей сознания, мышления и
поведения обучаемых.
Ключевые слова: интеллектуальной система; гормональный прокторинг; качество
подготовки специалистов; нейротрансмиттеры; интерфейсы; биоцифровые платформы.
Качество подготовки специалистов на цифровых платформах, как правило,
обеспечивается за счет целенаправленно-избирательного прокторинга и последующего
отбора. Например, система «персонализированной образовательной траектории в открытых
коллективах – ПОТОК» обеспечивает возможность обучения школьников не только в
основном учебном заведении, но и на цифровых платформах, в технопарках, секциях, других
школах и даже в вузах [14, с. 125]. При этом для каждого обучаемого выстраиваются
индивидуальные маршруты образования и в итоге формируется цифровая
биография/профиль/аватар на основании которых прогнозируется профориентированная
траектория индивидуального развития. Модуль «распределённого оценивания в системе
талантов – РОСТ» при формировании цифровых портфолио обучаемых кроме формируемых
знаний и навыков предполагает учитывать и «достижения» обучаемых, начиная с
дошкольного возраста ребёнка, причем не только в школе и вузе, но и на олимпиадах, в
кружках, спорте и т. д. [11, с. 218; 15, c. 100].
Планируется что в условиях реализации планов четвертой промышленной революции,
проектов биоцифровой конвергенции и идей трансгуманизма каждый человек должен стать
цифровой платформой и соответственно популяционный, социальный, образовательный,
профессиональный отбор и возможная утилизации человека как части цифрового социума
162СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
должна обеспечиваться в основном автоматически с помощью избирательных фильтров и
уровней отбора индивидуальных качеств личности на основе алгоритмов искусственного
интеллекта по сбору, хранению и обработке персонализированной информации о ходе
жизнедеятельности обучаемых, их родителей, преподавателей и их ближайшего окружения в
процессе воспитания и обучения на основе различных цифровых платформ и систем
телекоммуникаций [10, с. 4; 12, с. 69; 13, с. 18].
Цифровые платформы, электронно-образовательная среда, технологии искусственного
интеллекта и персональные данные, полученные в ходе воспитания и обучения, создают
принципиально новые возможности и инструменты как для управления поведением и
сознанием социума как для непрерывного профессионального отбора, так при принятии
решений об ограничении личных прав и свобод обучаемых и их родителей [9, с. 297].
Цифровая трансформации общества предполагает, прежде всего, биоцифровую конвергенцию
естественных/традиционных органов и чувств обработки информации, мышления, сознания,
зрения, слуха с искусственными элементами (электронными чипами, графеноподобными
нановеществами, мРНК инъекциями и растворами и пр.) [3, c. 8; 18, с. 65; 19, с. 64; 20, с. 228].
Для интеграции новых органов и искусственных элементов параллельно необходимо
создавать новые приложения, развивать разнообразные по функциям сети на уровне
физических тел и новых встроенных в тела искусственных персональных гаджетов-органов
обучаемых, микро- и метавселенные лично обучаемых, учебных коллективов/групп в основе
которых должны лежать достаточно мощные вычислительные ресурсы – нейронные сети и
инструменты сбора, накопления анализа, управления, передачи и использования большими
персональными данными [4, с. 213; 5, с. 92; 7, с. 320; 8, с. 21].
Примером таких больших данных в настоящее время являются данные пользователей
цифровых платформ: социальных, коммуникационных, развлекательных, игровых и учебно-
познавательных, например сетей фейсбука, инстаграм, ютуб, тик-ток и др. Персональные
данные пользователей цифровых платформ и социальных сетей могут быть представлены
различными способами [6, с. 32]. Как правило, традиционная письменная и устная речь
пользователей цифровых платформ и социальных сетей заменяется короткими, не особо
понятными и связанными фразами, «статусами», символами, смайликами, инфо-и деловой
графикой, картинками и фотографиями. Такой контент, его форма и современные интерфейсы
работы в электронной среде цифровых платформ и социальных сетей ориентированы в
основном на обращение к архаично-примитивной так называемой лимбической системе
подсознания / мышления пользователей, в том числе обучаемых и преподавателей.
Управление интерфейсами в таких лимбически ориентированных сетях осуществляется в
основном на основе примитивных тактильных операций – выбора режимов из меню или
«тыкания» пальцами или стилусом по контенту.
Между тем качество и цели естественного образовательного процесса развития сознания
обучаемых по-прежнему требуют активизации и реализации более сложных интерфейсов и
процессов обращения к системам неокортекса обучаемых. Как следствие у обучаемых часто
возникает двойственность лимбического и неокортикального способов обработки
163СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
поступающей информации, ее понимания и идентификации, интерпретации потоков данных,
отношения к окружающим воспитательным и образовательным процессам. Зачастую это
приводит к тому, что регулирование сознания и управление поведением обучаемых со
стороны преподавателей или родителей осуществляется как правило на границе/балансе
между понятиями «надо» и «хочу».
При использовании цифровых платформ, электронных сред и нейронных сетей у
преподавателей, работодателей в лице владельцев корпораций и правящих элит появились
уникальные возможности для сбора и анализа детальной и порой даже скрытой от понимания
самих обучаемых, родителей, учителей персональной информации, которую можно
эффективно использовать для профессиональной ориентации, управления и манипулирования
сознанием, мышлением и эмоциями как обучаемых, так и преподавателей, а также для
принятия решений об различных ограничений, например прав и свобод в зависимости от
текущего социального рейтинга в социуме [17, с. 71]. Многофункциональные фильтры и
многоуровневые контентные сетки современных нейронных сетей искусственного интеллекта
позволяют фиксировать, сохранять и использовать персональные особенности обучаемых,
например эмоциональные характеристики: 1) реакции глаз и рук, 2) паузы и задержки
движений, 3) типы движений, в том числе зрачков и пальцев, 4) особенности изучения
контента, поведения, дыхания, работы сердца и др., 4) повороты головы, 5) жесты, 6) тексты
и символы, 7) изображения, 8) звуки, 9) температуру частей тела и далее строить персональные
цифровые профили / аватары – виртуальные модели обучаемых и преподавателей [2].
Цифровые аватары – виртуальные модели обучаемых конструируются в виде достаточно
сложных и многомерных сеток, каждый уровень которых описывает индивидуальные
особенности цифрового профиля обучаемых. При этом в процессе эксплуатации этих
многомерных цифровых аватаров – персональных сеток и сами сетки продолжают непрерывно
учиться и сопровождать каждого своего обучаемого как клиента-пользователя, изучая его
особенности, как бы «присасываясь» все шире и глубже к личности, изучая его особенности и
реакции с целью прогнозирования и «предугадывания» его дальнейшего поведения, с целью
непрерывного манипулирования поведением, сознанием и мышлением.
Для изучения потребностей/склонностей/предпочтений/желаний обучаемых, родителей,
преподавателей цифровые платформы, как правило, используют различные по
продолжительности познавательные/учебные/развлекательные видеоролики, а игровой
«лимбический» контент и юмор ориентирован в основном на подсознание. При этом чем
меньше время просмотра такого учебно-игрового или развлекательного «лимбического»
контента, тем как правило меньше возможностей «включения» логических и рассудочных
инструментов неокортекса сознания обучаемых и тем естественно больше возможностей для
манипуляции сознанием и поведением обучающих. Таким образом, вне зависимости хочет ли
обучаемый просматривать учебный материал или нет все развлекательные и игровые учебные
ролики цифровых платформ могут достаточно просто манипулировать обучаемым на уровне
лимбической системы мышления, при этом не оставляя возможности например для
164СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
критического анализа и понимания контента, тем самым уменьшаются шансы «включения»
неокортикальной системы обучаемых.
Современная нейронная сеть может достаточно быстро и точно собирать, фиксировать и
понимать информацию о том, какие именно познавательные/учебные/игровые ролики и
контент вызывают у обучаемых наибольшее/наименьшее желание их просмотреть, вызывают
наибольший/наименьший позитив/негатив. Управление позитивными и негативными
состояниями эмоционально-гормонального фона приводит к выделению в организме
обучаемых /родителей / преподавателей нейротрансмиттерами/нейромедиаторами
биологически активных химических веществ: 1) аминокислот, 2) катехоламинов,
3) моноаминов на основе которых осуществляется изменение трансмембранного тока ионов
на основе деполяризации мембран и возникновения передачи электрохимических импульсов
в мозге при просмотре/прослушивании контента /или изменения потенциала действия в
мышцах слушателя в процессе просмотра/прослушивания контента, 2) различных гормонов –
дофамина, опиоидов, эндорфинов, окситоцина, каннабиноидов, серотонина и др.
Психика, эмоции и поведение обучаемых, родителей и преподавателей это прежде всего
гормональная система и она неизбежно адаптируется и перестраивается со временем. Частое
и непрерывное переключение учебного контента приводит е неизбежному и тотальному
чередованию психических и эмоциональных состояний обучаемых/преподавателей и как
следствие ведет к постоянным эмоциональным и гормональным стрессам/ударам на
сознание/мышление и подсознание обучаемых.
Особенности гормональной регуляция поведения и репродуктивные функции, как
правило, передаются обучаемым по наследству и при правильном использовании этих систем
мозг значительно экономит энергию. Если же на практике, например в процессе потокового
игрового, познавательного или развлекающего контента обучаемым предлагать готовые
алгоритмы поведения и мышления, то мозг практически сразу получит «инъекцию» оценки
«качества» контента – эндогенных каннабиноидов (анандамида и/или 2-
арахидоноилглицерина). Лимбическая система сознания/мышления у обучаемых отвечает в
основном за формирование и подкрепление как положительных состояний – удовлетворения,
удовольствия, вознаграждения, смеха, так и отрицательных – зависимости, агрессии, страха,
эффекта плацебо и др. Под влиянием специально подобранного потокового учебно-
познавательного, развлекающего или игрового контента цифровых платформ лимбическая
система сознания / мышления обучаемых может непрерывно требовать получения
эмоционального удовольствия, вознаграждения, например в виде смеха и/или юмора.
Таким образом, для повышения качества воспитания и практической подготовки
обучаемых с использованием цифровых платформ целесообразно разрабатывать
интеллектуальные системы гормонального прокторинга качества практической подготовки
специалистов на основе нейротрансмиттерых интерфейсов биоцифровых платформ с учетом
характера особенностей функционирования индивидуальных нейротрансмиттеров
обучаемых. На базе интеллектуальной системы может реализовывать качественное и
количественное управление параметрами мозговой деятельности: 1) торможением,
165СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2) возбуждением, 3) поощрением и/или наказанием поведением / сознанием обучаемого, в том
числе чувствами удовлетворения/неудовольствия, предвкушения и/или ожидания
удовольствия и/или удовлетворения, 4) лимбической системой сознания – инстинктивно-
рефлекторными инструментами регулирования раздражений и инстинктивно-гормональными
(половыми, центрами агрессии и пр.), 5) режимами бодрствования и/или сна,
6) понижением/повышением мышечного тонуса организма, 7) зависимостями /стрессами
/депрессиями/ состояниями тоски/печали при которых например блокируется выработка
нейротрансмиттеров (дофамина, окситоцина, эндорфина, каннабиноидов, серотонина др.),
8) эффективностью репродуктивных контактов при решении в том числе биологических
задач: 8.1) питания, 8.2) доминирования в учебном социуме, 8.3) регулирования межполовых
отношений и процессов размножения.
Изучая персональные данные – тактильное, физическое, речевое, мыслительное
поведение и реакции пользователей-обучаемых нейронные сети цифровых платформ могут
изучать и анализировать особенности и качество индивидуальной системы
нейротрансмиттеров/нейромедиаторов обучаемых, тем самым сети цифровых платформ могут
все более эффективно учится управлять и манипулировать гормональными и эмоциональными
системами обучаемых. Например, цифровая платформа предоставляет учебный
видеоигровойконтент и по поведению обучаемого изучает/анализирует насколько этот
контент понравился обучаемому, досмотрел ли он его до конца, как обучаемый отреагировал
на него и таким образом интеллектуальная система учится выдавать обучаемым именно тот
учебно-игровой контекст который гарантированно обеспечит выделение у пользователей
требуемых нейромедиаторов «гормонов счастья» – эндорфинов, окситоцина, серотонина,
эндоопиоидов идр.
На практике интеллектуальная система гормонального прокторинга качества
практической подготовки специалистов на основе нейротрансмиттерых интерфейсов
управления дофамином позволит выделить и мотивировать обучаемых, которые уже ждут
какого-либо вознаграждения оказывая влияние на: 1) формирование мотивации, 2) чувства
удовольствия, 3) ощущения/периоды ожидания наград/ желаний/ положительных
событий/воспоминаний о приятном, 4) эмоциональные реакции, сопровождающие
двигательную активность. Выделению дофамина в организме обучаемых способствует:
1) получение субъективно приятного опыта, более быстрое достижение учебной цели и/или
предвкушение этого момента, например, мысли о достижении задуманного или триумфе,
2) возможности эффективного обучения и самообучения, в том числе и на своих ошибках; при
этом нужно учитывать что нехватка дофамина может приводить у обучаемых к
игнорированию собственного негативного опыта, вызывать чувство привязанности/любви,
3) развитию тактильных ощущений, 4) употреблению любимой пищи содержащей, например
тирозин – мясо, бобовые (соя, чечевица, фасоль), орехи, сыр, творог, 5) организация отдыха
либо физическая активность, например полноценный сон, занятие спортом, пробежки. Нужно
учитывать, что выработку дофамина блокирует злоупотребление жирной и сладкой пищей,
которые приводят к перееданию и пищевой зависимости. Однако в процессе
166СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
автоматизированного управления дофамином нужно учитывать, что он: 1) повышает
артериальное давление, частоту и силу сердечных сокращений обучаемых, 2) расслабляет
гладкую мускулатуру желудка и кишечника, 3) увеличивает фильтрацию жидкости, кровоток
в почках, ускоряет выделение натрия с мочой.
Интеллектуальная подсистема гормонального прокторинга и управления эндорфинами
цифровых платформ: 1) способствуют формированию образного мышления, ассоциаций и
творческих фантазий обучаемых, 2) обеспечивают значительную стрессоустойчивость и
поощрение обучаемых; обучаемый благополучно преодолевший опасную учебную ситуацию,
получает поощрение в виде стимуляции центров удовольствия и чувство эйфории,
3) обеспечивают регуляцию возбуждения и торможения мозговой активности. В начальной
фазе учебного стресса должна быть активирована подсистема, усиливающая продуктивное
мышление, а на последующей стадии активизируется торможение и организм переходит в
режим сбережения энергии. Выделению эндорфинов способствует: 1) позитивное мышление
обучаемых – приятные мечты, удовольствия, вкусная и любимая еда, состояние блаженства,
2) ультрафиолет, под действием которого увеличивается концентрация эндорфинов в
организме обучаемых.
Интеллектуальная подсистема гормонального прокторинга и управления окситоцином
(который вырабатывается в центральной нервной системе (гипоталамусе) и поступает в
гипофиз) цифровых платформ способствует выделению факторов наибольшей эмоциональной
привязанности и стрессоустойчивости обучаемых. Выделению окситоцина способствуют
тактильные прикосновения, в том числе и в различных гаджетах, чувство доверия, боль, в том
числе хроническая, любимая пища, физические упражнения и хорошее расположение духа.
Проблемы с выработкой окситоцина могут вызывать отсутствие у обучаемого дружбы/любви,
депрессия и изоляция, например от одноклассников и социума.
Интеллектуальная подсистема гормонального прокторинга и управления серотонином
цифровых платформ способствует выработке серотонина, который: 1) способствует хорошему
настроению, 2) улучшает память, 3) внимание, 4) восприятие, 5) ускоряет и облегчает
движения, 6) обеспечивает полноценный сон. При этом нужно учитывать что формированию
и выделению серотонина у обучаемых способствуют: 1) триптофан содержащийся в молочных
продуктах, сыре, финиках, сливах, инжире, томатах, сое, черном шоколаде, 2) магний,
который содержится во фруктах, орехах, бобовых и цельных зернах, 3) Витамин D (солнечный
свет).
Интеллектуальная подсистема гормонального прокторинга и управления
эндоканнабиноидами цифровых платформ может играть роль активизаторов «живых
существ» в организме обучаемых, например, во многих аспектах нейронных функций,
включая контроль/координацию движений, обучения, памяти, эмоций, мотивации, поведения,
привыкания, модуляции боли, а также для регуляции физиологических и когнитивных
процессов, настроения, аппетита, активности иммунной системы, болевых ощущений и др.
Таким образом нейромедиаторы и эмоции обучаемых тесно связаны с системами питания,
физическими нагрузками и образом жизни.
167СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Используя интеллектуальные подсистемы гормонального прокторинга и управления
учебным, игровым и познавательным контентом цифровые платформы могут собирать
информацию о обучаемых, анализировать лимбическую, гормональную и неокортекальную
системы и на основе этого могут находит информационные «уязвимости / чувствительности /
неустойчивости / эмоциональные дыры», через которые можно получать доступ к активностям
персональных нейромедиаторов обучаемых. Между тем искусственная активизация
нейромедиаторов может привести к тому, что обучаемый, может постепенно разучиться
получать удовольствие от традиционных занятий и стимулов. Например, некоторые
обучаемые уже даже на стадии открытия цифровой платформы развлечений сети TikTok уже
чувствуют внутреннюю радость.
Интеллектуальные подсистемы гормонального прокторинга и управления цифровых
платформ смогут подбирать именно такой режим и содержание подачи контента под
влиянием, которого осуществляется непрерывная и управляемая искусственная активизация
организма внутренними нейромедиатороми, например дофамином. Таким образом, находясь
в таких учебных сетях обучаемые смогут попадать в непрерывную зависимости от сетевого
учебного контента, а подсистемы постепенно все глубже и шире будут учиться создавать все
более проникающий контент и таким образом будет происходить искусственное
интеллектуальное управление естественным гормональным фоном обучаемых на фоне
действия естественных гормонов без химического ведения непосредственно самих
химических веществ заменителей нейромедиаторов. Обучаемые при этом будут
самостоятельно учится получать удовольствие от обучения и воспитания, так как постепенно
будут «подсаживаться» на гормональную эндохимическую зависимость от качества и
востребованности игрового, познавательного и учебного контента, причем и дома и на учебе,
и в транспорте. Риски, однако, заключаются в том, что при этом обучаемые могут постепенно
разучится получать удовольствие от традиционных способов организации образовательных
процессов и учебных сред, которые раньше доставляли удовольствие, а на смену новым
стимулам и состояниям может приходить и чувство опустошения и выгорания от цифровых
экосистем условиях реализации биоцифровой конвергенции и идей трансгуманизма в школах
и вузах [1, с. 1302; 2, c. 194; 16, с. 126].
Литература
1. Абрамян Г.В. Современные тенденции, риски и информационные угрозы
персонализации обучения в условиях цифровизации образования и вирусной пандемии //
Информатика: проблемы, методы, технологии: Мат-лы XXIII Международной научно-
практической конференции им. Э.К. Алгазинова (г. Воронеж, 15-17 февраля 2023 г.). Воронеж,
2023. С. 1302-1311.
2. Абрамян Г.В. Риски и угрозы электронного обучения в условиях экосистемы
цифрового образования //Современное образование: традиции и инновации. 2023. №2. С. 194-
200.
168СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
3. Гладилина И.П., Ермакова И.Г. Цифровая трансформация образования: зарубежный и
отечественный опыт // Современное педагогическое образование. 2021. №3. С. 8-12.
4. Жедигеров Д.Ж., Абрамян Г.В. Система учебной навигации студентов и
преподавателей университета на основе спутниковой системы GLONASS и облачных
сервисов NAVITEL // Информационно-телекоммуникационные системы и технологии:
Всероссийская научно-практическая конференция (г. Кемерово, 16-17 октября 2015 г.).
Кемерово, 2015. С. 213.
5. Кицела К.И., Соколов М.А., Тенишев Р.Д., Абрамян Г.В. Технология отбора
мобильных программ-клиентов для обмена личными сообщениями в информационно-
образовательной среде вуза // Информационно-телекоммуникационные системы и
технологии: Всероссийская научно-практическая конференция (г. Кемерово, 16-17 октября
2015 г.). Кемерово, 2015. С. 92.
6. Копыльцов А.А., Копыльцов А.В. Обработка слабо формализованной информации,
поступающей от технических систем // Вестник Нижневартовского государственного
университета. 2013. №1. С. 32-36.
7. Копыльцов А.А., Копыльцов А.В. Цифровые образовательные ресурсы и их роль в
современном образовании // Современное образование: содержание, технологии, качество.
2020. Т. 1. С. 320-322.
8. Копыльцов А.В. Оценка качества программного обеспечения. СПб.: ЛГОУ, 2000. 80 с.
9. Кусаинова А.С. Инструменты и методы оценки функционирования IT-
инфраструктуры высшего учебного заведения // Вестник университета Туран. 2016. № 4(72).
С. 297-300.
10. Мынбаева А.К. Обзор новейших теорий образования: Педагогика 2.0, Образование
3.0 и Хьютагогика (Эвтагогика) // Вестник Казахского национального университета. Серия
Педагогические науки. 2019. Т. 61. №4. С. 4-16.
11. Савельев С.Д., Абрамян Г.В. Информационная модель распределенной
автоматизированной информационной системы кадрового учета в финансовом университете
при Правительстве РФ на основе удаленного вызова процедур «Тонкий клиент» //
Информационно-телекоммуникационные системы и технологии: Всероссийская научно-
практическая конференция (г. Кемерово, 16-17 октября 2015 г.). Кемерово, 2015. С. 218.
12. Сафиуллин А.Р., Александров А.А. «Умный город»: ключевые характеристики в
условиях четвертой промышленной революции // Цифровая экономика и Индустрия 4.0:
новые вызовы: Труды научно-практической конференции с международным участием. 2018.
С. 69-80.
13. Ситдиков А.А., Буснюк И.Ю., Тупий Е.О., Абрамян Г.В. Информационная модель
оптимизации инфокоммуникаций в вузе на основе интерактивной системы взаимодействия
студентов и преподавателей // Информационно-телекоммуникационные системы и
технологии: Всероссийская научно-практическая конференция (г. Кемерово, 16-17 октября
2015 г.). Кемерово, 2015. С. 18
169СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
14. Шагай М.А., Абрамян Г.В. Современные тенденции и особенности управления
качеством обучения в системе среднего образования Ленинградской области в
информационной среде // Информационно-телекоммуникационные системы и технологии:
Всероссийская научно-практическая конференция (г. Кемерово, 16-17 октября 2015 г.).
Кемерово, 2015. С. 125.
15. Шумкова И.Г., Абрамян Г.В. Особенности, значение и принципы формирования
информационно-образовательного пространства вуза на основе интернет-ресурса "СПБ
ГИПИСР" // Информационно-телекоммуникационные системы и технологии: Всероссийская
научно-практическая конференция (г. Кемерово, 16-17 октября 2015 г.). Кемерово, 2015. С.
100.
16. Янкевичус А.А., Абрамян Г.В. Система оптимизации штатов на основе
дифференциации сотрудников технических служб сервиса и консультирования пользователей
персональных компьютеров в педагогическом университете // Информационно-
телекоммуникационные системы и технологии: Всероссийская научно-практическая
конференция (г. Кемерово, 16-17 октября 2015 г.). Кемерово, 2015. С. 126.
17. Denisova A.L., Lopatnikov A.N. Digital transformation and corporate strategy //
Upravlenie. 2022. Т. 10. №2. P. 71-79.
18. Levina A.I., Galanova A.A. Digital transformation of business: approaches and definitions
// Technoeconomics. 2022. Т. 1. № 1(1). P. 65-74.
19. Maydanova S.A., Ilin I.V. Digital transformation strategy development in an enterprise
architecture context // Technoeconomics. 2023. Т. 2. №1 (4). P. 64-75.
20. Xiaohe X. Digital transformation trends of china's insurance industry after the covid-19
pandemic // Tomsk State University Journal of Economics. 2021. №54. P. 228-238.
© Абрамян Г.В., 2024
170СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.056
Правиков Д.И.
канд. техн. наук
Лазорин Д.С.
студент
Российский государственный университет нефти и газа (НИУ) им. И.М. Губкина
г. Москва, Россия
О ПОДХОДАХ К ОБЕСПЕЧЕНИЮ ИНФОРМАЦИОННОЙ БЕЗОПАСНОСТИ
ЦИФРОВЫХ ДВОЙНИКОВ
Аннотация. Научная работа посвящена рассмотрению всевозможных вариаций
применения цифровых двойников для цифровой трансформации нефтегазовых предприятий
на территории Российской Федерации. Проведён анализ существующих технологий,
задействованных на предприятиях, предложены новые решения в сфере применения
цифровых двойников в нефтегазовой отрасли. Также рассмотрены подходы и методы
обеспечения информационной безопасности цифровых двойников на самом производстве.
Ключевые слова: цифровой двойник; информационная безопасность; физический
объект; цифровизация.
Процессы цифровой трансформации постепенно внедряются в самые различные сферы
человеческой деятельности. Промышленное производство является основным двигателем
экономической составляющей стран. Новейшим и перспективным элементом или
инструментом цифровой трансформации является цифровой двойник, благодаря которому
появляется возможность собирать данные, производить их обработку, анализировать
технологическую цепочку, состояние оборудования, затем на основе этого моделировать
исходы оптимальных сценариев. Цифровой двойник позволяет поддерживать работу
дорогостоящего оборудования на постоянном уровне, что многократно снижает
экономические затраты, повышая результативность производства в целом. Стремительное
развитие технологий уже сейчас приводит к оптимизации процессов в существующих
системах различных компаний. Данная технологическая тенденция всё больше вызывает
интерес у индустриальных гигантов вкладывать средства в подобные решения. Это позволит
им приобрести новые преимущества и сохранить конкурентоспособность на рынке, благодаря
процессам цифровизации. Нельзя отрицать, что происходит трансформация глобального
энергетического сектора. Именно цифровые технологии и технологии больших данных станут
основой и двигателем в изменении данного сектора. Цифровая трансформация открывает
возможности для реализации современных индустриальных стратегий: выход на новый
рынок, создание каналов продаж, приносящих доход компании [3; 4; 6; 8; 9; 16].
До недавнего времени в нефтегазовой отрасли терминология цифровых двойников была
нетехнической и неполной [5]. Она использовалась только как коммерческий термин без
точного определения цифрового двойника. Для большинства отраслей доступность и
монетизация данных были основным мотивом для цифровизации, но руководители
нефтегазовой отрасли не видели преимуществ в изменении своей бизнес-модели [13]. Помимо
того факта, что нефтегазовая промышленность требовала очень ответственных и сложных
171СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
операций, показатели прибыли от продажи нефти были высокими. Исходя из этого
нефтегазовые компании начали поздно внедрять некоторые цифровые технологии. Не было
проверенных решений для использования цифровых двойников с очевидными
преимуществами по сравнению с известными методами, которые уже работали долгие годы.
В нефтегазовой отрасли есть данные, полученные за десятилетия использования
физического оборудования и активов, с небольшой стандартизацией между производителями,
что не обеспечивает простого доступа к этим данным и их вычислениям, которые можно
решить с помощью облачного хранилища и использования открытых программных платформ.
Недавние работы направлены на то, чтобы изменить этот сценарий: лидеры отрасли внедряют
новые решения в создание открытых и функционально совместимых систем, переводя отрасль
в новую эру цифровизации за счет использования цифровых двойников и открытых облачных
платформ данных для стандартизации [18].
Цифровой двойник (ЦД, Digital twin) – это виртуальная модель реального объекта,
процесса или системы, которая позволяет получить полную информацию о состоянии объекта
в режиме реального времени. В основе ЦД лежит технология Интернета вещей (IoT), которая
позволяет собирать данные о реальном объекте и передавать их на сервер, где они
анализируются и преобразуются в цифровую модель.
В нефтегазовом секторе ЦД используются для контроля и управления процессами
добычи, транспортировки и переработки нефти и газа [12]. Внедрение ЦД на производство
значительно повышает эффективность и безопасность процессов, а также уменьшает риски
аварийных ситуаций.
Исходя из вышеперечисленного можно выделить основные преимущества
использования цифровых технологий в нефтегазовом секторе:
1) Расширение сырьевой базы.
2) Увеличение объёмов добычи нефти.
3) Снижение удельной себестоимость добычи нефти.
4) Повышение производительности предприятий.
5) Снижение количества непредвиденных аварий и чрезвычайных ситуаций.
Основные направления цифровой трансформации нефтегазового сектора. Необходимо
рассмотреть перспективные направления, которые помогут совершить цифровую
трансформацию нефтегазового сектора. Обеспечение управления жизненным циклом
цифровых активов (цифровых прав). Данное направление характеризуется появлением новых
бизнес-взаимодействий и структур за счёт использования современных технологий с
аналитическими данными. Это позволяет принимать определённые стратегические решения и
повышать гибкость работы. Цифровая экосистема. Цифровые двойники являются
интегрированным решением в систему. Они осуществляют связи между технологическим
оборудованием и самой системой предприятия, тем самым ускоряя процессы и снижая
эксплуатационные затраты. Современные условия непредсказуемы, наблюдаются самые
различные потрясения на мировом рынке: нестабильная экономика, появление
альтернативных источников энергии. Следовательно, перспективы развития нефтегазового
172СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
комплекса должны учитывать вышеперечисленные ситуации. Рыночные сдвиги в мировом
энергетическом и отечественном комплексе, усиление конкуренции за доступ к ресурсам
требуют новых решений от научной и практической области. Современный этап
характеризуется комплексным и целенаправленным характером внедрения цифровых
технологий в нефтегазовый сектор [2; 7; 11; 14; 17]. Однако в нефтяной отрасли существует
ряд барьеров на пути развития технологий и цифровой трансформации:
1) Недостаточно развитая законодательная база об интеллектуальной собственности,
которая снижает возможность привлечения средств на начальных стадиях научно-
исследовательских и опытно-конструкторских работ.
2) Недостаточный объём бюджетного финансирования научных наработок и
исследований.
3) Недостаточная взаимосвязь науки и бизнеса.
4) Отсутствие поддержки малых нефтесервисных компаний, что снижает
конкурентоспособность и не приводит к апробации новых технологий.
5) Ограничения в технических нормативных документах. Это снижает
заинтересованность компаний реализовывать новые технологии самостоятельным образом.
Интеграция цифрового двойника для обслуживания оборудования в нефтегазовой
компании. Накопленные объёмы данных за последние года характерная черта для
углеводородной отрасли. На протяжении всего жизненного цикла каждого реализуемого
проекта появляется огромное количество информации об активах и не только. Появляется
проблема разбросанных данных по различным программным приложениям, базам данных и
бумажным файлам в организации и на рабочей площадке. В результате информация о
принимающихся решениях, часто бывает ошибочной, устаревшей, неполной,
непоследовательной [https://clck.ru/39jTZH; 10; 15]. Способность цифровых двойников
интегрировать данные в реальном времени, благодаря наличию связи с физическим объектом
для его мониторинга и управления, является важным показателем [1]. Планово-
предупредительный и своевременный ремонт с использованием цифрового двойника
позволит сократить экономические затраты на их выполнение. Профилактическое
обслуживание позволит заблаговременно устранять неисправности, ошибки, что снизит
количество выходов из строя оборудования. Предлагаемые решения за счёт внедрения
цифровых двойников позволят моделировать сценарии отказов в работе, что снизит
негативное воздействие на окружающую среду. Тем самым упрощается и процесс
обслуживания оборудования. Исходя из вышеперечисленного, своевременная обработка,
структуризация данных в режиме реального времени позволит оптимизировать производство,
сократить время простоя оборудования и денежные издержки.
Благодаря внедрению цифрового двойника появляется возможность дистанционного
управления. Зачастую скважины с насосами для добычи нефти и газа располагаются в
довольно труднодоступных местах. Дистанционное управление упрощает мониторинг и
экономит время персонала. Цифровые технологии после сбора и обработки данных помогают
формировать модели в различных вариациях, что позволяет оценивать состояние
173СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
оборудования в режиме реального времени и своевременно проводить профилактические
осмотры. Цифровой двойник улучшает процесс технического обслуживания, что является
значительно важной составляющей на современных предприятиях. На основе получаемых
данных с технологического оборудования появляется возможность создавать различные
аналитические модели, которые будут сигнализировать о поломке оборудования, что позволит
вовремя скорректировать его работу.
Целью данной научной работы является рассмотрение существующих подходов к
обеспечению информационной безопасности цифровых двойников и формулированию
предложений по выбору средств противодействия различным угрозам, прежде всего угрозе
искажения цифрового двойника. Задачи, которые были поставлены: проанализировать
текущее состояние цифровизации отечественного нефтегазового сектора, подходы и методы
обеспечения информационной безопасности производства, предложить варианты по выбору
средств противодействия угрозам, направленных на цифровой двойник.
Специфические свойства цифровых двойников. Необходимо рассмотреть
специфические свойства и общие требования, относящиеся к технологии цифровых
двойников. При обеспечении информационной безопасности выделяют наиболее важное
свойство: целостность (неразрывная связь компонентов цифрового двойника).
Однако сейчас все системы, начиная от автомобиля до умного производства являются
киберфизическими. Происходит выход за рамки термина «целостность». Это также
необходимо учитывать. Помимо сказанного, другим свойством является актуальность
цифрового двойника. Это свойство обеспечивает проверку на соответствие тому устройству,
комплексу или физическому объекту, который управляется или мониторируется с помощью
технологии цифрового двойника.
Подходы и методы обеспечения информационной безопасности цифровых двойников.
Уже в ранее проведённой научной работе нами были рассмотрены и проанализированы
существующие подходы к обеспечению информационной безопасности цифровых двойников
[1]. Были проанализированы следующие технологии: блокчейн, транспортное, симметричное
шифрование, «умный» сертификат, токенизация, концепция многоуровневой платформы.
Выяснено, что использование современных технологий защиты информации в рамках
актуальных для цифровых двойников моделей угроз и нарушителя нацелено на решение
частных задач. Ни один из существующих подходов и методов не обеспечивает полноценной
безопасности цифровых двойников.
Также был сделан запрос в российскую нефтепроводную компанию ПАО «Транснефть»,
связанный с применением искусственного интеллекта на производстве. Представители
компании представили ответ в рамках IV Научно-практической конференции молодёжи ПАО
«Транснефть» в ноябре 2022 года. Краткое изложение ответа: на технологическом
производстве используется огромное количество современных датчиков, которые собирают
непрерывный поток информации в режиме реального времени. Внедрение искусственного
интеллекта происходит постепенно, наблюдаются успешные шаги в данном направлении
компании. При отклонении потока информации от заданных значений срабатывает система,
174СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
которая как раз и работает на основе искусственного интеллекта. Информация с оборудования
мгновенно передаётся специалистам, от решения которых зависит дальнейшая работа
производственной цепочки.
Технология цифрового двойника позволяет нам смотреть вперёд. Необходимо
заниматься изучением данного вопроса, подготавливать специалистов уже сегодня, чтобы
через несколько лет люди без опаски смогли работать с новыми технологиями. Развитие
нефтегазовой отрасли неизбежно, так или иначе требуются новые решения, которые смогут
улучшить производство.
Таким образом, цифровые двойники – это новое решение для технологических систем.
Текущие исследования демонстрируют, что IoT находится в критической стадии развития,
однако нет систематических исследований по вопросам безопасности коммуникации IoT на
основе цифровых двойников. Необходимо обеспечить комплексный подход к обеспечению
информационной безопасности цифровых двойников. Стоит обратить особое внимание на
концепцию многоуровневой платформы, так как она включает в себя реализацию
комплексного подхода, состоящего из низкоуровневых способов защиты канала связи при
помощи криптографических алгоритмов до высокоуровневых задач. Реализованный веб-сайт
(https://securedt.ru) с полноценной и актуализирующийся информацией о научной работе, а
также контактами для дальнейшего взаимодействия помогает получать обратную связь от лиц,
заинтересованных в данном вопросе.
Литература
1. Лазорин Д.С., Правиков Д.И., Щербаков А.Ю. О подходах к обеспечению
информационной безопасности цифровых двойников // Вестник современных цифровых
технологий. 2022. №11. С. 48-55.
2. Agrawal A., Thiel R., Jain P., Singh V., Fischer M. Digital Twin: Where do humans fit in?
// Automation in Construction. 2023. Vol. 148. 104749.
https://doi.org/10.1016/j.autcon.2023.104749
3. Attaran M., Celik B.G. Digital Twin: Benefits, use cases, challenges, and opportunities //
Decision Analytics Journal. 2023. Vol. 6. 100165. https://doi.org/10.1016/j.dajour.2023.100165
4. Bellavista P., Bicocchi N., Fogli M., Giannelli C., Mamei M., Picone M. Requirements and
design patterns for adaptive, autonomous, and context-aware digital twins in industry 4.0 digital
factories // Computers in Industry. 2023. Vol. 149. 103918.
https://doi.org/10.1016/j.compind.2023.103918
5. Cameron D., Waaler A., Komulainen T. Oil and Gas digital twins after twenty years. How
can they be made sustainable, maintainable and useful? 2018. P. 9-16.
https://doi.org/10.3384/ecp181539
6. Deng S., Ling L., Zhang C., Li C., Zeng T., Zhang K., Guo G. A systematic review on the
current research of digital twin in automotive application // Internet of Things and Cyber-Physical
Systems. 2023. Vol. 3. P. 180-191. https://doi.org/10.1016/j.iotcps.2023.04.004
175СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
7. Hickey B., Gachon C., Cosgrove J. Digital Twin – A Tool for Project Management in
Manufacturing // Procedia Computer Science. 2023. Vol. 217. P. 720-727.
https://doi.org/10.1016/j.procs.2022.12.268
8. Jia W., Wang W., Zhang Z. From simple digital twin to complex digital twin part II: Multi-
scenario applications of digital twin shop floor // Advanced Engineering Informatics. 2023. Vol. 56.
101915. https://doi.org/10.1016/j.aei.2023.101915
9. Levaniuk D. Application of digital twins for maintenance in the gas and oil sector.
Lappeenranta–Lahti University of Technology LUT, 2022, pp. 7-37.
10. Levina A., Kalyazina S., Levaniuk D., Zaitsev A. Application of Digital Twins for Digital
Transformation of Oil and Gas Enterprises // Ilin I., Jahn C., Tick A. (eds) Digital Technologies in
Logistics and Infrastructure. ICDT 2021 Lecture Notes on Data Engineering and Communications
Technologies. 2023. Vol. 157 Springer, Cham. https://doi.org/10.1007/978-3-031-24434-6_13
11. Panarotto M., Isaksson O., Vial V. Cost-efficient digital twins for design space exploration:
A modular platform approach // Computers in Industry. 2023. Vol. 145. 2023. 103813.
https://doi.org/10.1016/j.compind.2022.103813
12. Priyanka E.B., Thangavel S., Gao Xiao-Zhi, Sivakumar N.S. Digital twin for oil pipeline
risk estimation using prognostic and machine learning techniques // Journal of Industrial Information
Integration. 2022. Vol. 26. 100272. https://doi.org/10.1016/j.jii.2021.100272
13. Schneider M. Digitalization of Production, Human Capital, and Organizational Capital //
The impact of digitalization in the workplace: an educational view. 2018. P. 39-52.
https://doi.org/10.1007/978-3-319-63257-5_4
14. Semeraro C., Olabi A.G., Aljaghoub H., Alami A.H., Al Radi M., Dassisti M., Abdelkareem
M.A. Digital twin application in energy storage: Trends and challenges // Journal of Energy Storage.
2023. Vol. 58. 106347. https://doi.org/10.1016/j.est.2022.106347
15. Sircar A., Nair A., Bist N., Yadav K. Digital twin in hydrocarbon industry // Petroleum
Research. 2023. Vol. 8. Issue 2. P. 270-278. https://doi.org/10.1016/j.ptlrs.2022.04.001
16. Sommer M., Stjepandić J., Stobrawa S., von Soden M. Automated generation of digital twin
for a built environment using scan and object detection as input for production planning // Journal of
Industrial Information Integration. 2023. Vol. 33. 100462. https://doi.org/10.1016/j.jii.2023.100462
17. Tripura T., Desai A.S., Adhikari S., Chakraborty S. Probabilistic machine learning based
predictive and interpretable digital twin for dynamical systems // Computers & Structures. 2023. Vol.
281. 107008. https://doi.org/10.1016/j.compstruc.2023.107008
18. Wanasinghe T., Wroblewski L., Petersen B., Gosine R., James L., De S., Oscar, Mann
G.K.I., Warrian P. Digital Twin for the Oil and Gas Industry: Overview, Research Trends,
Opportunities, and Challenges // IEEE Access. Pp. 104175-104197.
https://doi.org/10.1109/ACCESS.2020.2998723
© Правиков Д.И., Лазорин Д.С., 2024
176СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 338.27
Катермина Т.С.
канд. тех. наук, доцент
Макамбеджан А.А.
студент
Нижневартовский государственный университет
г. Нижневартовск, Россия
ОПЫТ ИСПОЛЬЗОВАНИЯ НЕЙРОННЫХ СЕТЕЙ
В ПРЕДСКАЗАНИИ ВРЕМЕННЫХ РЯДОВ
Аннотация. В данной статье рассматривается возможность прогнозирования временных
рядов при помощи рекуррентных нейронных сетей применительно к задаче предсказания
объемов продаж для розничной торговли. Описывается процесс подготовки набора данных
для обучения нейронной сети, построение архитектуры и выбор параметров нейронной сети,
а также анализ полученных результатов.
Ключевые слова: искусственный интеллект; нейронные сети; сети LSTM;
прогнозирование; временные ряды.
Возможность прогнозирования является одной из неотъемлемых и незаменимых
возможностей человеческого интеллекта. Человек использует прогнозирование на
широчайшем спектре задач: от самых примитивных и базовых, до сложных высокоуровневых
задач. В то же время, этот процесс в некоторых случаях может производиться и без
вмешательства человека методами, эконометрики, математической статистики,
интеллектуального анализа данных. В частности, прогнозирование временных рядов успешно
реализуется методами глубокого обучения [3, с. 245; 4, с. 95; 6, с. 85].
В данной работе представлен опыт использования глубоких нейронных сетей при
решении задачи прогнозирования для поддержки принятия решений в розничной торговле.
Процессы в розничной торговле отличаются высокой интенсивностью, из чего следует,
что постоянно требуется принимать решения об организации и поддержке логистики, закупки,
хранения товаров. Менеджер по закупкам должен иметь информацию о том, какой спрос будет
в обозримом будущем на тот или иной товар, и, исходя из этого, каких можно ожидать продаж
и сколько нужно закупить необходимого товара.
К задачам менеджера по продажам розничной торговли можно отнести:
1. организацию бесперебойного процесса закупок и продаж товара. Менеджер должен
следить за количеством товара на складе и обеспечивать его своевременную закупку;
2. обеспечение своевременного изменения цен на определенные категории товаров. В
течение года спрос потребителей подвергается изменениям, в связи с чем присутствует
необходимость в регулярной переоценке;
3. анализ покупательского спроса и результатов продаж товара, на основании которого
создается план дальнейшей работы с определенными категориями товара;
4. достижение плановых показателей по продажам.
Предсказание количества проданных товаров упрощает задачу планирования для
компании, так как менеджеру будет с некоторой погрешностью известно, какую прибыль
177СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
получит организация за данный промежуток времени и сколько продукции нужно будет
доставить на склад.
Выбор набора данных для обучения модели.
Как уже упоминалось выше, в данной работе предполагается обучение модели с
применением нейронных сетей. Отдельно нужно описать выбранный для обучения набор
данных.
Выбранный датасет – Predict Future Sales.
Этот набор данных содержит ежедневные данные о продажах, предоставленные одной
из крупнейших российских компаний-разработчиков программного обеспечения – фирмой
«1С» за период с 1 января 2013 г. по 31 октября 2015 г. (https://clck.ru/39aMmB). Этот датасет
идеально подойдет для реализации информационной системы поддержки принятия решений
менеджера магазина розничной торговли, так как имеет практически все необходимые данные
для этого.
Описание содержания:
1. sales_train.csv: тренировочный набор. Ежедневные данные о продажах с января 2013
г. по октябрь 2015 г;
2. test.csv: тестовый набор, по которому НС будет предсказывать продажи этих
магазинов и товаров на ноябрь 2015 года;
3. sample_submission.csv: образец файла отправки в правильном формате;
4. items.csv: дополнительная информация о товарах/продуктах.
Поля данных:
1. ID: идентификатор, представляющий кортеж (магазин, товар) в тестовом наборе;
2. shop_id: уникальный идентификатор магазина;
3. item_id: уникальный идентификатор продукта;
4. item_category_id: уникальный идентификатор категории товара;
5. item_cnt_day: количество проданных товаров;
6. item_price: текущая цена товара;
7. date: дата в формате дд/мм/гггг;
8. date_block_num: последовательный номер месяца, используемый для удобства.
Январь 2013 г. – 0, февраль 2013 г. – 1, октябрь 2015 г. – 33.
9. item_name: название предмета.
Перед обучением нейронной сети набор данных был исследован на предмет выбросов,
данный были нормализованы.
Выбор архитектуры нейронной сети и обучение модели
Для моделей с временными рядами часто выбирают рекуррентную нейронную сеть, так
как она позволяет работать с последовательными данными.
Однако у рекуррентных нейронных сетей есть склонность к искажению результатов
предсказания временных рядов, длина которых превышает некоторое количество, так как
появляется «проблема долгосрочной зависимости». Другими словами, простая рекуррентная
178СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
нейронная сеть не способна находить связь между информацией, если расстояние между
элементами ряда слишком велико.
Лучше всего данную проблему способна решить длинная цепь элементов краткосрочной
памяти – LSTM, которая является разновидностью архитектуры рекуррентных нейронных
сетей [8, с. 138]. LSTM настолько хорошо справляется с прогнозированием временных рядов,
что даже способна обучаться на более чем 1000 шагах без серьезных потерь в точности, но
также стоит учитывать и сложность построенной сети.
Также необходимо предотвратить переобучение нейронной сети. Для этого можно
прибегнуть к слою dropout. Он стирает некоторый процент связей между нейронами, чтобы
сеть училась решать схожие задачи из данной области, а не только запоминать идеальные веса
для работы с обучающим набором данных. Данный слой будет иметь коэффициент отсева
равный 0,3. Завершит вычисления полносвязный слой с линейной функцией активации
(linear), который и выведет результат предсказания. Созданием самой нейронной сети
займется класс LSTMNet, которому и будут переданы параметры нейронной сети такие как:
размерность входных (input_dim) и выходных данных (output_dim), размерность скрытого
слоя (hidden_dim) и количество рекуррентных слоев в LSTM (stacked_layers).
Архитектура нейронной сети представлена на рисунке 1.
Для разработки модели была выбрана библиотека находятся torch, в частности класс nn.
nn.LSTM имеет следующие параметры:
1. input_size – количество ожидаемых входных данных. Тип данных int;
2. hidden_size – размер скрытого слоя. Тип данных int;
3. num_layers – количество рекуррентных слоев. Тип данных int, по умолчанию 1;
4. bias – если равен True, то слой использует веса смещения b_ih и b_hh, если False, то
нет. По умолчанию True, тип данных bool;
5. batch_first – если равен True, то входные и выходные тензоры предоставляются как
(batch, seq, feature) вместо (seq, batch, feature), если False, то нет. По умолчанию False, тип
данных bool;
6. dropout – если не равен нулю, то создает после каждого рекуррентного слоя dropout с
введенным коэффициентом. По умолчанию равен 0, тип данных float;
7. bidirectional – если равен True, то LSTM становится двунаправленной. По умолчанию
False, тип данных bool;
8. proj_size – если больше 0, то будет использоваться LSTM с введенным количеством
проекций. По умолчанию равен 0, тип данных int.
179СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Архитектура нейронной сети для прогнозирования продаж
Значение параметров: input_size = 1, hidden_size = 30, num_layers = 2, dropout = 0.3,
batch_first = True. Остальные значения по умолчанию.
1. nn.Dropout имеет следующие параметры:
2. p – вероятность обнуления элемента. Тип данных float, по умолчанию 0.5;
3. inplace – если равен True, то операция будет проводится на месте, если False, то нет.
Тип данных bool, по умолчанию False.
Изменениям подвергся только параметр p, который приравняли к 0.3. Inplace остался
равным False.
nn.Linear имеет перечисленные ниже параметры:
1. in_features – размер входной выборки;
2. out_features – размер выходной выборки;
3. bias – если равен True, то слой будет обучаться аддитивному смещению.
При создании слоя in_features и out_features был приравнен к 1, bias остался значением
по умолчанию.
Обучение нейронной сети
Обучение проходило методом «скользящего окна» [1, с. 10; 2]. Другими словами,
нейронная сеть получает 33 элемента и на основании полученных данных попытается
предсказать 34. Далее окно сдвигается на один элемент и это действие повторяется до тех пор,
пока окно не дойдет до конца временного ряда. Действие данного алгоритма изображено на
рисунке 2.
180СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 2. Метод скользящего окна
Для того, чтобы модель для получения наилучших результатов могла корректировать
такие параметры, как веса и смещение, нужно подобрать подходящий оптимизатор. Одним из
лучших вариантов является Adam. Данный метод вычисляет скорость обучения параметров в
ходе обучения исходя из оценок первого и второго моментов градиентов. Он прост в
реализации, обладает достаточной вычислительной эффективностью и хорошо подходит для
решения задач с большим объемом данных.
В качестве функции ошибки в данной работе используется средняя квадратичная ошибка
(MSE). Она представляет собой разницу между ожидаемыми значениями и предсказанными,
которую возвели в квадрат и усреднили по всему датасету. Из-за возведения в квадрат данная
функция очень чувствительна к огромным ошибкам, что позволяет сразу их замечать.
Как уже было сказано выше, обучение нейронной сети – сложный и ресурсозатратный
процесс и чаще всего модели обучаются на больших датасетах, поэтому, чтобы было проще с
ними работать, большие наборы данных обычно делят на маленькие партии – батчи, на
которых поочередно обучается нейронная сеть [5, с. 15; 7, с. 174]. Каждый батч состоит из
фиксированного числа элементов. Размером батча для данной нейронной сети было выбрано
число 2048.
Важно также определить количество полных проходов – эпох – нейронной сети по
набору данных в процессе обучения. Дело в том, что чтобы оптимизировать обучение модели
и построить кривую под датасет одной эпохи недостаточно. Не слишком большим и не
слишком маленьким количеством эпох будет 21.
Результаты обучения
Результаты обучения представлены на рисунке 3.
Рис. 3. Результаты обучения нейронной сети LSTMNet
Как видно на рисунке 3, начиная с 0 и до 20 эпохи ошибка стремительно уменьшается и
лучший результат зафиксирован на 20 эпохе.
181СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
График точности нейронной сети по показателю отклонения на тестовых и проверочных
данных можно увидеть на рисунке 4.
На рисунке 4 по оси X расположены эпохи, а по оси Y – показатель отклонения. Traincost
– это точность обучения на тренировочном наборе данных, а validcost – на проверочном. На
графике видно, что показатель отклонения тренировочного набора примерно равен тому же
показателю тестового набора и при этом близок к нулю. Следовательно, вероятность ошибок
в прогнозировании модели минимальна.
Рис. 4. Точность нейронной сети по показателю отклонения
Глубокие нейронные сети могут применяться в таких областях, где высокая
интенсивность процессов сочетается с доступностью большого количества данных для
обучения. В частности, процессы розничной торговли часто сопровождаются накоплением
данных как для текущих операций, так и для последующего их изучения, выявления
закономерностей и т.д. Логично использовать эти данные и для предсказаний временных
рядов, в частности, объемов продаж, как описано в данной работе.
Литература
1. Горшенин А.К., Кузьмин В.Ю. Анализ конфигураций LSTM-сетей для построения
среднесрочных векторных прогнозов // Информатика и ее применения. 2020. Т. 14. №1. С. 10-
16.
2. Ехлаков Р.С., Судаков В.А. Прогнозирование стоимости котировок при помощи LSTM
и GRU сетей // Препринты ИПМ им. М.В. Келдыша. 2022. №17. С. 1-13.
3. Катермина Т.С., Туманов В.И., Зинченко С.С. Использование нейронных сетей для
определения COVID-19 // Современное программирование: Мат-лы IV Международной
научно-практической конференции (г. Нижневартовск, 08 декабря 2021 г.). Нижневартовск,
2022. С. 243-247.
4. Катермина Т.С., Сибагатулин А.Ф. Применение методов искусственного интеллекта к
задаче диагностики заболеваний дыхательных путей // Computational Nanotechnology. 2022. Т.
9. №2. С. 92-103.
182СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
5. Катермина Т.С., Лазоренко Е.В. Элементы искусственного интеллекта для задачи
определения положения автотранспортного средства на изображении // Computational
Nanotechnology. 2022. Т. 9. №3. С. 9-18.
6. Кузнецов Р.С., Тумарова Т.Г. Прогнозирование котировок акций ПАО Газпром с
использованием нейронных сетей LSTM / Р.С. Кузнецов // Вестник Института экономики
Российской академии наук. 2023. №3. С. 84-98.
7. Разинкин В.Б., Катермина Т.С. Распознавание лица по фотографии // International
Journal of Advanced Studies. 2018. Т. 8. №1-2. С. 171-180.
8. Чигринец, А.А. Оптимизация параметров нейронной сети LSTM для прогнозирования
временных рядов // Нейрокомпьютеры и их применение: тезисы докладов (г. Москва, 23 марта
2018 г.). М., 2018. С. 138-А.
© КатерминаТ.С., Макамбеджан А.А., 2024
183СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.85
Татарникова Т.М.1
д-р техн. наук, профессор
Мокрецов Н.С.1
аспирант
1Санкт-Петербургский государственный электротехнический
университет «ЛЭТИ» им. В.И. Ульянова (Ленина)
г. Санкт-Петербург, Россия
МЕТА-ОБУЧЕНИЕ И САМООБУЧЕНИЕ В МОДЕЛЯХ НЕЙРОННЫХ СЕТЕЙ
Аннотация. Цель статьи заключается в рассмотрении актуальных подходов построения
моделей нейронных сетей, способных к самообучению, то есть изменению своей структуры
даже после завершения этапа обучения. Продемонстрированы две архитектуры,
использующие разные методы обучения сети: распространение ошибки и эволюционные
стратегии. Описываются результаты выполнения таких архитектур и их способность к
самообучению.
Ключевые слова: нейронные сети; обучение нейронных сетей; обратное
распространение; эволюционные методы; самообучение.
В последнее время исследования в области машинного обучения и интеллектуального
анализа данных привели к появлению широкого спектра алгоритмов, которые изучают общие
функции на основе опыта. По мере развития машинного обучения оно начало успешно
переходить от академических исследований к различным практическим приложениям.
Например, общие методы, такие как деревья принятия решений и искусственные нейронные
сети, в настоящее время используются в различных коммерческих и промышленных
приложениях.
Мета-обучение и самообучение – захватывающее направление исследований в области
машинного обучения. Подобно традиционным алгоритмам машинного обучения, различные
методы, выводят общие функции на основе опыта.
Чтобы проиллюстрировать полезность обучения ради обучения, стоит сравнить
машинное обучение с обучением человека. Люди сталкиваются с непрерывным потоком
учебных задач. Они не просто усваивают концепции или двигательные навыки, они также
усваивают предвзятость (bias), то есть учатся обобщать. В результате люди часто способны
правильно обобщать на основе крайне небольшого числа примеров – часто достаточно всего
одного примера, чтобы научить нас чему-то новому.
А более глубокое понимание компьютерных программ, улучшающее их способность к
обучению, может оказать большое практическое влияние на область машинного обучения и за
ее пределами. За последние годы в этой области был достигнут значительный прогресс в
разработке теории обучения, а также новых практических алгоритмов, некоторые из которых
привели к впечатляющим результатам в реальных приложениях. Далее представлены пара из
наиболее интересных новых исследовательских подходов. Его цель состоит в том, чтобы
исследовать полезность и осуществимость компьютерных программ, которые могут научить
тому, как учиться, как с практической, так и с теоретической точки зрения.
184СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Пластичность Хебба. В отличие от искусственных нейронных сетей, биологические
агенты обладают гораздо высшим уровнем адаптивного поведения [4]. Хотя механизмы,
лежащие в основе этого, до конца не изучены, синаптическая пластичность играет
фундаментальную роль [5]. Например, многие животные могут быстро ходить после рождения
без какого-либо явного надзора или сигналов вознаграждения, легко адаптируясь к своему
телу происхождения. Были предложены различные механизмы регулирования пластичности,
которые могут быть объединены в два основных семейства идеального типа: сквозные
механизмы, которые включают нисходящую обратную связь, распространяющую ошибки [7],
и локальные механизмы, которые полагаются исключительно на локальную активность для
регулирования динамики синаптических связей.
Говоря более формально, метод распространения ошибки и эволюционные алгоритмы.
Отличия в том, как в них вычисляются изменения весов для улучшения результирующей
функции на каждом шаге обучения. При использовании метода распространения ошибки, на
каждом шаге обучения происходит следующее: (1) входные данные пропускаются через веса
нейронной сети, получается значение результирующей функции (2) вычисляется градиент
функции ошибки по отношению к весам, сигнализирующий алгоритму о том, в каком
направлении надо двигать матрицу весов, для минимизации функции ошибки. Суть
происходящего на шаге обучения, при использовании эволюционных методов, заключается в
генерации популяции моделей (чаще всего, случайным образом), далее при каждой из них
вычисляется функция ошибки по текущему входу и остаётся та, веса которой лучше остальных
приблизили модель к минимизации функции ошибки. На следующей итерации, оставшаяся
модель является базовой, и следующая популяция будет порождаться от неё.
Зачем нам несколько методов, почему не выбрать какой-нибудь из них и пользоваться
только им? Помимо неких «идеологических» факторов, определяющих видение направления
развития нейронных сетей различными исследователями, у каждого из этих подходов есть
свои плюсы и минусы. К основным плюсам метода распространения ошибки относятся:
 Эффективность. Обратное распространение часто более эффективно с точки зрения
вычислений по сравнению с эволюционными методами, особенно для больших нейронных
сетей. Он использует информацию о градиенте для обновления весов, обеспечивая более
быструю конвергенцию во время тренировки.
 Точная настройка. Это позволяет точно настраивать веса на основе конкретного
набора данных, что делает его адаптируемым к различным доменам.
К минусам:
 Локальные минимумы. Обратное распространение может застрять в локальных
экстремумах, что повлияет на способность модели находить глобальный минимум функции
потерь.
 Чувствительность к инициализации. Производительность обратного распространения
может быть чувствительна к начальным весам нейронной сети.
185СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Для эволюционных методов преимуществами являются:
 Глобальная оптимизация: Эволюционные методы исследуют более широкое
пространство поиска и могут находить глобальные оптимумы, что делает их менее склонными
застревать на локальных минимумах.
 Нет необходимости в градиентах: Эволюционные алгоритмы не требуют вычисления
градиентов, что делает их применимыми к недифференцируемым или сложным целевым
функциям.
 Параллелизм: Эволюционные методы часто поддаются распараллеливанию, что
позволяет эффективно исследовать различные решения одновременно.
Основные минусы:
 Вычислительные затраты. Эволюционные алгоритмы могут быть дорогостоящими с
точки зрения вычислений, особенно для сложных задач или больших нейронных сетей.
 Отсутствие градиентов. Несмотря на то, что в плюсах присутствует пункт о выгоде
отсутствия градиентов, что может быть решающим фактором для выбора модели, но
отсутствие информации о градиенте может привести к более медленной сходимости и
меньшей эффективности по сравнению с методами, основанными на градиенте.
Таким образом, выбор между обратным распространением и эволюционными методами
часто зависит от конкретной рассматриваемой проблемы. Обратное распространение хорошо
подходит для задач, где ценна информация о градиенте и критична вычислительная
эффективность, в то время как эволюционные методы могут быть более подходящими для
задач со сложными, недифференцируемыми или плохо понятыми целевыми функциями.
Непластичность сетей и их неспособность менять веса после этапа обучения частично
могут быть объяснены тем, что они традиционно имеют фиксированную нейронную
архитектуру, к тому же и статический набор синаптических весов. В описываемом далее
подходе ищутся правила пластичности, которые работают со случайно инициализированными
сетями исключительно на основе процесса самоорганизации. Для достижения этой цели были
оптимизированы правила Хебба для конкретных весов, которые позволяют агенту находить
высокоэффективные веса для нетривиальных задач обучения с подкреплением без какого-
либо явного вознаграждения в течение срока его службы. Для демонстрации подхода были
выбраны две задачи. В задаче перемещения агента в трехмерной среде сеть Хебба способна
адаптироваться к повреждениям в морфологии моделируемого агента, которые не подавались
в модель во время обучения, в то время как сеть с фиксированным весом не может этого
сделать. В отличие от сетей с фиксированным весом, веса сетей Хебба непрерывно
изменяются в течение жизни агента. Эволюционировавшие правила пластичности приводят к
появлению аттрактора в фазовом пространстве весов, что приводит к быстрому сближению
сети с высокоэффективными динамическими весами.
Самая ранняя предложенная версия чисто локального механизма известна как
пластичность Хебба (Hebbian plasticity), которая в своей простейшей форме утверждает, что
синаптическая сила между нейронами изменяется пропорционально соотношению активности
между ними [3]. В описываемом подходе используется обобщенная ABCD-модель Хебба [9]
186СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
для управления синаптической силой между искусственными нейронами относительно
простых сетей прямой связи. В частности, веса агента случайным образом инициализируются
и обновляются в течение его жизненного цикла. На каждом временном шаге происходит
следующее:
Δ𝑤 = η (𝐴 𝑜 𝑜 +𝐵 𝑜 +𝐶 𝑜 +𝐷 ), (1)
𝑖𝑗 𝑤 𝑤 𝑖 𝑗 𝑤 𝑖 𝑤 𝑗 𝑤
где 𝑤 – вес между нейронами i и j;
𝑖𝑗
o – выход(значение) нейрона;
η – параметр скорости обучения;
𝑤
𝐴 – параметр корреляций;
𝑤
𝐵 – параметр пресинаптической составляющей;
𝑤
𝐶 – параметр постсинаптической составляющей;
𝑤
𝐷 – индивидуальное ингибирующее/возбуждающее смещение каждого соединения в
𝑤
сети;
То есть параметры, которые будут обучаться нейросетью: η , 𝐴 , 𝐵 , 𝐶 , 𝐷 .
𝑤 𝑤 𝑤 𝑤 𝑤
В отличие от предыдущих работ, основывающихся на похожей идее, такой подход не
ограничивается равномерной пластичностью [2] (т.е. каждое соединение обладает одинаковой
степенью пластичности) или ограничивается только оптимизацией значения пластичности для
конкретного соединения [6]. Вместо этого, основываясь на способности недавних реализаций
стратегии эволюции масштабироваться до большого числа параметров [8], метод позволяет
каждому соединению в сети иметь разные правила и скорость обучения.
Для оптимизации используется подход эволюционной стратегии, так как они достигают
конкурентоспособных результатов по сравнению с другими подходами к обучению с
глубоким подкреплением при решении множества различных задач [8].
Преимущество этих методов оптимизации «черного ящика» в том, что они не требуют
обратного распространения градиентов. Используется адаптированная версия эволюционной
стратегии [8], чтобы не оптимизировать веса напрямую, а вместо этого найти набор
коэффициентов Хебба, которые будут динамически управлять весами сети в течение ее
жизненного цикла на основе входных данных из окружающей среды. Для получения
оптимальных локальных правил обучения, случайным образом инициализируются веса сети
политик w и коэффициенты Хебба h, путем выборки из равномерного распределения:
w ∈ U[-0.1,0.1] и h ∈ U[-1,1] соответственно. Это позволяет нам обучать h, который, в свою
очередь, определяет обновления весов сети политик на каждом временном шаге с помощью
уравнения (1).
На каждом эволюционном шаге t мы вычисляем зависящую от задачи функцию
приспособленности (fitness function) – 𝐹(ℎ ). Создаётся популяция моделей с размером n,
𝑡
путем выборки нормального шума ε = N (0,1) и добавления его к текущему наилучшему
𝑖
решению ℎ . Далее, мы обновляем параметры решения на оценке функции приспособленности
𝑡
каждого из i ∈ n возможных решений:
𝑛
𝛼
ℎ = ℎ + ∑𝐹(ℎ +𝜎ε )ε , (2)
𝑡+1 𝑡 𝑛𝜎 𝑡 𝑖 𝑖
𝑖=1
187СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
где 𝛼 – степень обновления параметров для каждой популяции;
𝜎 – коэффициент добавляемого шума к кандидатам каждой популяции;
В качестве демонстрации работы данного подхода, используется сравнение результатов
модели Хебба и модели статических весов для задачи перемещения агента в трехмерном
пространстве. Детали задачи заключались в том, что выбирались три варианта морфологии
(форма, в зависимости от повреждений) четвероногого робота таким образом, чтобы
имитировать эффект частичного повреждения одной из его ног. Выбор этих морфологий
предназначен для создания задачи, с которой было бы трудно справиться нейронной сети, не
способной адаптироваться. Во время тренировки как статические веса, так и сети Хебба
работают по одной и той же схеме: на каждом этапе обучения, веса оптимизируются в
соответствии с алгоритмом эволюционной стратегии, где функция приспособленности
состоит из среднего пройденного расстояния двух морфологий, стандартной и с
повреждениями на поверхности. правая передняя нога. Третья морфология (повреждена на
левой передней ноге) исключена из цикла обучения, чтобы впоследствии оценить обобщение
сетей. Задача считается решённой, если робот смог сдвинуться с начальной точки на 100
единиц в направлении заданной по условиям задачи оси.
Из пяти эволюционных прогонов как сеть Хебба, так и статическая сеть нашли решения
для наблюдаемых морфологий во всех прогонах. Однако, сеть со статическими весами была
неспособна найти единственное решение, которое справлялось бы с поставленной задачей и
при использовании повреждённой морфологии, которая была недоступна при обучении, в то
время как сети Хебба удалось найти такое решение. Однако характеристики сетей Хебба,
оцененные по неучавствующей в обучении морфологии, имеют высокую дисперсию.
Понимание того, почему одни решения Хебба обобщают, а другие нет, открывает путь для
дальнейших исследований; предполагается, что для получения решения, способного к
надежному обобщению, агент должен быть обучен разнообразному набору морфологий с
рандомизированными повреждениями. Чтобы проверить, насколько хорошо обобщаются
разработанные решения, сравниваются пройденное расстояние, усредненное за 100 запусков,
для сетей Хебба и сетей со статическими весами. В таблице 1 собраны данные о наиболее
эффективных решениях для каждой из морфологий [8].
Таблица 1
Сравнение результатов статической модели и сети Хебба
Учувствовало в
Морфологии агента Модель Пройденное расстояние Решено
обучении
Без урона Да Хебба 1051 ± 113 Да
Без урона Да Статическая 1604 ± 171 Да
Правая нога Да Хебба 1019 ± 116 Да
Правая нога Да Статическая 1431 ± 54 Да
Левая нога Нет Хебба 452 ± 95 Да
Левая нога Нет Статическая 68 ± 56 Нет
Поскольку сеть со статическими весами не может адаптироваться к окружающей среде,
она эффективно решает морфологию, которая участвовала во время тренировки, но терпит
неудачу при той, которой не было. С другой стороны, сеть Хебба способна адаптироваться к
188СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
новой морфологии, что приводит к эффективной самоорганизации синаптических весов сети.
Кроме того, начальные случайные веса сети могут быть выбраны даже из других
распределений (например, N(0,0.1)), отличных от того, которое использовалось при
обнаружении коэффициентов Хебба, и агент все равно достигает сопоставимой
производительности.
Несмотря на то, что данный подход приближает решение проблемы устойчивости
нейронных сетей, по результатам в таблице 1 видно, что при работе в известных условиях,
статическая модель отрабатывает значительно лучше. Кроме того, в современных реалиях
большее предпочтение отдаётся не эволюционным методам, а с распространением ошибки.
Метод МТТТ. Учитывая минусы предыдущего подхода, хотелось бы рассмотреть
другой подход [10], построенный на обратном распространении ошибки. В нем предлагается
переопределить обучение с учителем как парадигму обучения с двумя циклами, где
внутренний цикл использует обучение без учителя над отдельными экземплярами, прежде чем
делать окончательные прогнозы. Одновременно внешний цикл изучает задачу без учителя,
используемую внутренним циклом, стремясь улучшить свои окончательные прогнозы.
При реализации данного подхода используются такие инструменты, как трансформеры
[1], линейное внимание и самовнимание (attention и self-attention) [1]. Механизм внимания –
это способ, с помощью которого нейронная сеть может учитывать различные части входного
сигнала. Это позволяет сети получать более полное представление о входе и делать более
точные прогнозы.
Например, в контексте обработки естественного языка механизм внимания используется
для того, чтобы модель могла учитывать контекст слов в предложении. Например, при
переводе предложения «модель минимизирует функцию ошибки», сеть может использовать
внимание, чтобы понять, что слово «ошибки» относится к слову «функцию», а не к слову
«модель».
Трансформеры – тип нейронной сети, который использует механизм внимания для
обработки последовательностей данных. Они состоят из нескольких слоев, каждый из которых
состоит из механизма внимания. Каждый слой внимания принимает на вход векторы слов из
предыдущего слоя и производит векторы слов для следующего слоя. Такая архитектура имеет
ряд преимуществ по сравнению с другими типами нейронных сетей. Они более устойчивы к
ошибкам, более эффективные с точки зрения вычислительных ресурсов и могут обучаться на
больших наборах данных.
Обучение во время тестирования (TTT – Test-time training) – алгоритмическая платформа
машинного обучения, в которой каждый тестовый экземпляр определяет свою собственную
задачу обучения, используя задачи обучения без учителя, такие как реконструкция. Этот
процесс направлен на повышение производительности в конкретных экземплярах за счет
оптимизации для задачи с обучением без учителя. Ключевой вопрос заключается в том,
распространяется ли это улучшение на основную задачу, представляющую основной интерес.
Если улучшение в задаче обучения без учителя применимо к основной задаче, то такие
задачи считаются согласованными (aligned) [11]. Описываемый подход, MTTT (Meta Test-
189СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Time Training), фокусируется на изучении согласованной задачи обучения без учителя. Это
включает в себя мета-обучение или двухуровневую оптимизацию, когда внутренний цикл
обучается без учителя на каждом обучающем примере, а внешний цикл согласовывает задачу
без учителя с основной задачей на всем обучающем наборе.
MTTT упрощается до линейной модели в ее базовой форме, с внутренним циклом,
похожим на прямой вывод с использованием линейного внимания. В случае линейных
трансформаторов каждый уровень внимания заменяется внутренним контуром. Распространяя
это на нейронные сети, MTTT превосходит линейные модели, особенно в сценариях, где
трансформаторы сталкиваются с ограничениями памяти и времени. Внутренний цикл,
напоминающий обычное обучение, разбивает экземпляры на токены, явно обрабатывая их как
данные.
Рассмотрим внутренний цикл. Архитектура для TTT имеет общий экстрактор с двумя
выходными головами (последний слой нейросети, вычисляющий значение для заданной
функции, в стандартных архитектурах она одна). Задача обучения без учителя имеет голову g,
а основная задача – голову h. На этапе тестирования модель обучается по задачи обучения с
учителем, поэтому у голов есть общий экстрактор f. Благодаря этому TTT может обновлять
общие признаки (shared features), тем самым помогая основной задаче, если она использует те
же признаки, что и задача обучения без учителя. В принципе, TTT совместим с любой задачей
обучения без учителя. В качестве примера выбрано конкретное семейство задач обучения без
учителя общего назначения и не зависящее от предметной области – реконструкции. Для задач
реконструкции экстрактор признаков f представляет из себя энкодер, а голова g – декодер,
вместе эта конструкция называется автоэнкодером и представляет из себя композицию
функций g и f, формально g ◦ f [1].
Используя стандартный процесс, называемый токенизацией, каждый X разбивается на
последовательность из n токенов: 𝑋 = (𝑥 ,…,𝑥 ). Базовой единицей реконструкции является
1 𝑛
каждый отдельный токен 𝑥 . Целью реконструкции является сам 𝑥 , но входные данные
𝑖 𝑖
преобразуются с помощью заданной функции 𝜙, например, добавление шума. Для каждого
входного значения X оптимизируются параметры f, обозначенные как W [10]:
𝑛
1
𝑙(W|X) = ∑||𝑔(𝑓(𝜙(𝑥 )|𝑊)− 𝑥 ||2, (3)
2𝑛 𝑖 𝑖
𝑖=1
Для основной задачи мы также преобразуем ее входные данные 𝑥 с помощью заданной
𝑖
функции 𝜓, для симметрии 𝜙 задачи обучения без учителя. Далее мы создаем выходные
данные основной задачи, применяя h◦f индивидуально к каждому 𝜓(𝑥 ). Для удобства мы
𝑖
перегружаем h, f и 𝜙 так, чтобы они могли создавать выходную последовательность из
входной последовательности [10]:
𝑋 = ℎ(𝑓(𝜓(𝑋)|𝑊 ) = (ℎ(𝑓(𝜓(𝑥 )|𝑊 )),… , ℎ(𝑓(𝜓(𝑥 )|𝑊 ))) (4)
𝑜𝑢𝑡 𝑇 1 𝑇 𝑛 𝑇
Токенизация позволяет нам повторно использовать различные части (токены) X,
рассматривая их как фрагменты данных, а X как набор данных. Это переводит единицы
измерения для TTT «на один уровень ниже» их традиционного смысла в машинном обучении,
где 𝑥 является это фрагментом данных, а набор X датасетом.
𝑖
190СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Теперь рассмотрим внешний цикл. Как отмечалось выше, TTT не учувствует в
изменении W для кодера f, преобразования ψ и ϕ, декодер g и голову основной задачи h. В
0
целом, эти важные компоненты должны быть определены вне сферы применения ТТТ.
Сначала явно выражаются доступные для изучения параметры, которые считались заданными
в рамках внутреннего цикла. Этими параметрами являются g, h, ψ и ϕ, которые мы обозначим,
как, θ , θ ,θ и θ . Сгруппируем их вместе с W в θ = (θ , θ , θ ,θ ,W ), поскольку все они
g h ψ ϕ 0 g h ϕ ψ 0
будут обучаться в описываемом внешнем цикле. Обозначим функцию потери для внешнего
цикла, как L . например, потерю перекрестной энтропии. В тривиальном случае, при T = 0, т.е.
T
без TTT, конечная потеря предсказания равна в точности L.
Во время обучения внешний цикл вычисляет L индивидуально для каждого помеченного
обучающего экземпляра X, затем оптимизирует среднее значение L по всему обучающему
набору с помощью стохастического градиентного спуска. Как оказалось, это удивительно
эффективно на практике.
По итогу, внутренний цикл отражает регулярное (не мета) обучение с точки зрения трех
качеств: описательный (применима ли наша эквивалентность линейному вниманию на
практике), предписывающий (задаёт направление для новых методов с более высокой
производительностью), предиктивный (объясняет ли эмпирическое поведение новых
методов).
Длительное время исследователи рассуждали насчёт того, что идея обучения
самообучению (learning to learn) должна быть неотъемлемой частью искусственного
интеллекта. В большинстве предыдущих работ по обучению самообучению делается попытка
обобщения по наборам данных или задачам, а не по экземплярам входных данных. Их
внутренний цикл извлекает информацию из всего набора данных за раз, а не из одного
экземпляра, поэтому внешнему циклу требуется набор датасетов или задач. Поскольку трудно
собрать миллионы датасетов или задач, их внешний цикл трудно масштабировать. Но для TTT
каждый экземпляр сам по себе является задачей и определяет свою собственную проблему
обобщения, поэтому MTTT – решение канонической проблемы контролируемого обучения,
переформулированной как обучение самообучению. Его внутреннему циклу нужен только
один экземпляр, поэтому внешнему циклу нужна только коллекция экземпляров – набор
данных в традиционном смысле, что облегчает масштабирование.
Заключение. В данной статье рассмотрены две самообучающиеся модели нейронных
сетей. Описан подход, вдохновлённый таким свойством биологического мозга, как «правило
Хебба», заключающееся в том, что увеличение синаптической эффективности возникает в
результате постоянно повторяющейся стимуляции пресинаптической клеткой
постсинаптической клетки [3]. Подробно описана разница, плюсы и минусы, между двумя
основными подходами обучения нейронной сети – эволюционные стратегии и
распространение ошибки. Сети Хебба полагаются на эволюционные стратегии, порождая на
каждой итерации поколение моделей от предка (лучшая модель с прошлого эволюционного
шага) и отбором лучшего представителя для установления его предком уже следующего
поколения. Данная архитектура показывает, что обученная модель способна во время
191СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
исполнения (после обучения) приспосабливаться к изменениям, которые она не видела в
процессе обучения. Однако, отстаёт по эффективности от статических моделей для входных
данных, которые предоставлялись на момент обучения.
Также рассмотрена архитектура МТТТ, основанная на распространении ошибки.
Внутренний цикл модели обучается решать задачу без учителя, в то время как внешний цикл
выполняет основную задачу, рассмотренную в данной статье – самообучение. Данный подход
открывает путь к новым методам с более высокой производительностью, в результате
обучения выявляется поведение внутреннего цикла без настройки гиперпараметров.
Эти методы не только подчеркивают разнообразие подходов к самообучению, но и
поднимают важные вопросы о будущем развитии и применении искусственного интеллекта.
Литература
1. Amatriain X. Transformer models: an introduction and catalog. 2023. 56 p.
https://doi.org/10.48550/arXiv.2302.07730
2. Ba J., Hinton G.E., Mnih V., Leibo J.Z., Ionescu C. Using fast weights to attend to the recent
past // In Advances in Neural Information Processing Systems. 2016. С. 4331-4339.
3. Hebb D.O. The organization of behavior; a neuropsychological theory. Wiley, 1949. 305 p.
4. Macphail E.M. Brain and intelligence in vertebrates. Oxford University Press, 1982, 385 с.
5. Martin S.J., Grimwood P.D., Morris R.G. Synaptic plasticity and memory: an evaluation of
the hypothesis // Annual review of neuroscience. 2000. № 23(1). P. 649–711.
6. Miconi T., Clune J., Stanley K.O. Differentiable plasticity: training plastic neural networks
with backpropagation // ArXiv e-prints. 2018. https://arxiv.org/abs/1804.02464.
https://doi/org/10/48550/arXiv.1804.02464
7. Sacramento J., Costa R.P., Bengio Y., Senn W. Dendritic cortical microcircuits approximate
the backpropagation algorithm // ArXiv e-prints. 2018. https://arxiv.org/abs/1810.11393.
https://doi.org/10.48550/arXiv.1810.11393
8. Salimans T., Ho J., Chen X., Sidor S., Sutskever I. Evolution Strategies as a Scalable
Alternative to Reinforcement Learning // ArXiv e-prints. 2017. https: //arxiv.org/abs/1703.03864.
https://doi.org/10.48550/arXiv.1703.03864
9. Soltoggio A., Durr P., Mattiussi C., Floreano D. Evolving neuromodulatory topologies for
reinforcement learning-like problems // IEEE Congress on Evolutionary Computation. 2007. P. 2471-
2478.
10. Sun Y., Li X., Dalal K., Hsu C., Koyejo S., Guestrin C., Wang X., Hashimoto T., Chen X.
Learning to (Learn at Test Time) // https://arxiv.org/abs/2310.13807.
https://doi.org/10.48550/arXiv.2310.13807
11. Sun Y., Wang X., Liu Z., Miller J., Efros A., Hardt M. Test-time training with self-
supervision for generalization under distribution shifts // In International Conference on Machine
Learning. 2020 С. 9229-9248.
© Татарникова Т.М., Мокрецов Н.С., 2024
192СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.76
Артемьев В.С.
старший преподаватель
Панков Д.В.
студент
Российский биотехнологический университет (РОСБИОТЕХ)
г. Москва, Россия
ПРОБЛЕМЫ МАСШТАБИРУЕМОСТИ АЛГОРИТМОВ ОБУЧЕНИЯ
ПРИ РАБОТЕ С ЗАДАННЫМИ НАБОРАМИ ДАННЫХ
Аннотация. С изменением объёмов данных в нашем мире масштабируемость
алгоритмов обучения стала ключевой проблемой в области машинного обучения. От
обработки крупных наборов данных в медицинской диагностике до анализа
многотерабайтных наборов данных в области финансов и интернета необходимость
эффективного обучения больших объёмов данных становится все более актуальной. В данной
статье мы в основном рассматриваем проблемы, связанные с масштабируемостью алгоритмов
обучения, и рассматриваем их решения.
Ключевые слова: анализ данных; масштабируемость обучения; гиперпараметры.
Одной из основных проблем масштабируемости является доступ к экономическим
ресурсам. Обучение работе с большими наборами данных требует снижения вычислительной
мощности и памяти, что может быть недоступно для многих исследователей и организаций.
Развитие облачных вычислительных и распределенных вычислительных систем делает
более доступными вычислительные ресурсы для масштабируемого обучения.
С объёмом получения данных также увеличивается время, необходимое для обучения
модели. Это может замедлить процесс разработки и исследований. Применение методов
параллельного и распределенного обучения, а также оптимизация алгоритмов обучения
позволяют сократить время обучения. С получением объема данных становится все труднее
удостовериться в их репрезентативности. Может возникнуть проблема смещения данных,
если обучающая выборка не отражает реальные условия.
Активное обучение и методы сбора и анализа данных позволяют поддерживать
репрезентативность данных. Обучение на больших объемах данных может включать более
сложные модели. Однако более сложные модели требуют больше вычислительных ресурсов
и могут страдать от переобучения [1, c. 341].
Более эффективные и компактные модели, такие как структура сетей с указанием
параметров, позволяют решить эту проблему. Проблемы масштабируемости алгоритмов
обучения при работе с заданными наборами данных являются актуальными вызовами для
исследователей и инженеров в области машинного обучения. Решение этих проблем требует
прогресса, и они будут продолжать оставаться в центре внимания развитию этой области.
Несмотря на сложность, разработка более масштабируемых методов обучения помогает
сделать машинное обучение более эффективным и доступным для задач широкого круга и
приложений.
193СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Многие задачи машинного обучения требуют работы с данными, которые распределены
по географическим регионам или находятся в разных источниках. Объединение и обработка
таких данных становится блоком блоков.
Разработка методов федеративного обучения и алгоритмов обучения с поддержкой
распределенных вычислений, позволяющих решать проблемы работы с распределенными
данными.
В некоторых приложениях данные могут быть неоднородными по своей природе, что
затрудняет обучение взаимодействующих моделей. Разработка методов, способных работать
с независимыми данными, включая текст, изображения, числа и категориальные признаки,
помогает повысить масштабируемость обучения [3, c. 643].
Проблемы масштабируемости алгоритмов обучения в условиях больших объёмов
данных являются сложными и многогранными. Решение этих проблем требует объединения
усилий инженеров и промышленности. Несмотря на всю сложность, масштабируемость
остаётся одним из ключевых аспектов машинного обучения и продолжает оставаться в центре
внимания развития в этой области. Разработка эффективных методов масштабируемого
обучения помогает сделать машинное обучение более доступным и применимым в
большинстве регионов мира, что, в свою очередь, способствует развитию инноваций и
поддержанию качества жизни.
Задачи определяют свою роль в современных информационных технологиях. Они
охватывают широкий спектр областей, от компьютерного зрения до речи и биометрии. Однако
модели обучения для эффективного решения ряда сложных проблем. В данной статье мы
рассмотрим некоторые из наиболее актуальных проблем исследования в этой области и
рассмотрим пути их решения [2, c. 345].
Проблема недообучения возникает, когда модель неспособна выявить закономерности в
данных из-за их сложности или ограниченности. С другой стороны, происходит переобучение
тем, что модель выдает обучающимся данные слишком хорошо, и появляется возможность
обобщения новых данных.
Применение методов регуляризации и расширения данных, а также разработка более
сложных архитектурных сетей, которые могут помочь справиться с биологическими
заболеваниями.
Для эффективного обучения модели необходимы качественные и репрезентативные
данные. В некоторых областях, таких как медицинская диагностика, сбор достаточного
количества данных может быть организован блоком.
Методы активного обучения и переноса обучения позволяют более эффективно
использовать данные и обучать модели на небольшом наборе данных. Шумные данные,
содержащие ошибки и выбросы, могут в значительной степени влиять на качество моделей
обучения. В задачах определения того, где точность играет решающую роль, это особенно
актуально.
Разработка алгоритмов фильтрации и очистки данных, а также изучение моделей,
устойчивых к шуму, для улучшения качества измерения. Обучение предпочтительным
194СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
моделям требует больших вычислительных ресурсов, что может быть недоступно для многих
исследователей и организаций. Разработка методов оптимизации и сокращения моделей, а
также облачные вычисления делают обучение доступным даже при ограниченных ресурсах.
Проблемы с обучением по этим аспектам представляют собой серьёзные задачи, а также
порождают дополнительные возможности для исследований и инноваций. Решение этих
проблем требует постоянного внимания и инженеров в области машинного обучения и
компьютерного зрения. Несмотря на сложность, развитие в этой области приводит к созданию
более точных и эффективных систем, которые положительно влияют на нашу повседневную
жизнь и промышленность [4, c. 345].
Одной из первых и, возможно, наиболее очевидных проблем масштабируемости
является доступность вычислительных ресурсов. Обучение работе с большими объемами
данных требует мощных вычислительных кластеров и графических процессоров. К
сожалению, такие ресурсы могут быть ограничены для многих исследователей и организаций.
Для решения этой проблемы активно разрабатываются методы оптимизации и
алгоритмы, которые максимально эффективно используют доступные ресурсы. Это включает
в себя оптимизацию процесса обучения и алгоритмов, позволяющих работать на маломощных
устройствах.
С определением объемов данных время, требуемое для обучения моделей, также
увеличивается. Это может замедлить процесс исследований и разработку новых алгоритмов.
Важным направлением является разработка методов параллельного и распределенного
обучения. Это позволяет ускорить процесс обучения с использованием вычислительных
кластеров и группировки устройств.
С получением объема данных становится все труднее удостовериться в их
репрезентативности. Может возникнуть проблема смещения данных, если обучающая
выборка не отражает реальные условия.
Активное обучение и методы сбора и анализа данных позволяют поддерживать
репрезентативность данных. Эти методы позволяют систематически определять и
регулировать размещение данных.
Обучение на больших объемах данных может включать более сложные модели. Однако
более сложные модели требуют больше вычислительных ресурсов и могут страдать от
переобучения.
Более эффективные и компактные модели, такие как структура сетей с указанием
параметров, позволяют решить эту проблему. Также исследуются методы передачи обучения,
которые позволяют использовать знания, полученные на одной задаче, на других задачах.
Одной из первых и, возможно, наиболее очевидных проблем масштабируемости
является доступность вычислительных ресурсов. Обучение работе с большими объемами
данных требует мощных вычислительных кластеров и графических процессоров. К
сожалению, такие ресурсы могут быть ограничены для многих исследователей и организаций
[5, c. 307].
195СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Для решения этой проблемы активно разрабатываются методы оптимизации и
алгоритмы, которые максимально эффективно используют доступные ресурсы. Это включает
в себя оптимизацию процесса обучения и алгоритмов, позволяющих работать на маломощных
устройствах.
С определением объемов данных время, требуемое для обучения моделей, также
увеличивается. Это может замедлить процесс исследований и разработку новых алгоритмов.
Важным направлением является разработка методов параллельного и распределенного
обучения. Это позволяет ускорить процесс обучения с использованием вычислительных
кластеров и группировки устройств.
С получением объема данных становится все труднее удостовериться в их
репрезентативности. Может возникнуть проблема смещения данных, если обучающая
выборка не отражает реальные условия. Активное обучение и методы сбора и анализа данных
позволяют поддерживать репрезентативность данных. Эти методы позволяют систематически
определять и регулировать размещение данных.
Обучение на больших объемах данных может включать более сложные модели. Однако
более сложные модели требуют больше вычислительных ресурсов и могут страдать от
переобучения.
Более эффективные и компактные модели, такие как структура сетей с указанием
параметров, позволяют решить эту проблему. Также исследуются методы передачи обучения,
которые позволяют использовать знания, полученные на одной задаче, на других задачах. С
увеличением сложности моделей и размера данных возрастает число гиперпараметров,
которые нужно настраивать. Это требует большого количества вычислительных ресурсов и
времени [6, c. 145].
Разработка методов автоматической настройки гиперпараметров, таких как оптимизация
на основе байесовских методов, может упростить этот процесс, который является
неотъемлемой частью процесса машинного обучения. Они определяют настройки моделей,
влияя на их поведение и производительность. Однако проблемы, связанные с
гиперпараметрами, являются одними из самых сложных и недооцененных аспектов в
машинном обучении.
Прежде чем погрузиться в проблемы, давайте разберёмся в определении
гиперпараметров. Они задают параметры обучения и влияют на поведение модели.
Примерами гиперпараметров могут быть скорость обучения в градиентном спуске, глубина
деревьев в случайных лесах или размер мини-пакетов в нейронных сетях.
Одной из главных проблем связанных с гиперпараметрами является их отбор. В
зависимости от количества гиперпараметров и их вариаций, поиск наилучших комбинаций
может быть вычислительно затратной задачей. Это также может привести к переобучению на
тестовых данных, если процесс отбора не выполняется правильно [7, c. 81].
Для решения этой проблемы используются методы кросс-валидации и поиска по сетке,
которые позволяют оценить производительность модели для различных комбинаций
гиперпараметров. Гиперпараметры могут образовывать большое пространство поиска,
196СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
особенно в сложных моделях. Это означает, что нужно исследовать множество комбинаций,
что может быть вычислительно дорого и времязатратно.
Применение методов оптимизации гиперпараметров, таких как оптимизация на основе
байесовских методов, может ускорить поиск оптимальных значений гиперпараметров, не
всегда воздействуют независимо друг от друга. Изменение одного гиперпараметра может
повлиять на производительность другого. Это усложняет задачу оптимизации.
Применение адаптивных методов настройки гиперпараметров, которые учитывают
взаимодействие между ними, может помочь найти более устойчивые настройки.
Вычислительные ресурсы могут быть ограничены, особенно в задачах с большими
данными. Это может ограничить возможности по поиску оптимальных гиперпараметров.
Использование методов аппроксимации гиперпараметров и снижение размерности
пространства гиперпараметров может ускорить поиск на ограниченных ресурс
Поиск оптимальных гиперпараметров не всегда полностью воспроизводимый процесс.
Результаты могут зависеть от начальных условий и случайных инициализаций. Для
обеспечения воспроизводимости можно использовать фиксированные сиды для
инициализации случайных генераторов и логирование всех настроек эксперимента.
Поиск оптимальных гиперпараметров может быть долгим и затратным с точки зрения
времени. В некоторых задачах, особенно в исследовательской области, это может замедлить
прогресс. Применение распределенных вычислений и параллельного обучения может
существенно ускорить процесс оптимизации гиперпараметров.
Методы машинного обучения и искусственного интеллекта становятся мощными
инструментами для обработки и анализа нейронных данных. Алгоритмы классификации,
кластеризации и обработки текста могут применяться к любым типам данных.
Гибридные методы, комбинирующие в себе различные техники обработки данных,
могут быть эффективны при работе с неоднородными данными. Например, можно
использовать тематический анализ для извлечения ключевых тем из текста, а затем
проанализировать связь с числовыми данными.
Неоднородные данные представляют собой вызов, но и обладают огромным
потенциалом для извлечения знаний и информации. Современный инструмент использования
таких методов обработки данных, таких как машинное обучение и искусственный интеллект,
мы можем успешно преодолевать вызовы, связанные с индивидуальными данными. Нужно
понимать природу таких данных, учитывать их разнородность и выбирать соответствующие
подходы к их обработке и анализу [8, c. 49].
В будущем, с развитием технологий и появлением новых методов, работа с идентичными
данными станет более доступной и эффективной. Это открывает новые горизонты для
исследований и бизнеса, что приводит к появлению ценных инсайтов из самых надежных
источников и источников данных.
Проблемы, связанные с гиперпараметрами в машинном обучении, представляют собой
сложные вызовы, которые требуют внимания исследователей и практиков. Однако с
современными методами оптимизации, адаптивными подходами и распределенными
197СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
вычислениями, мы можем справляться с этими вызовами более эффективно. Понимание и
правильное решение проблем, связанных с гиперпараметрами, играют ключевую роль в
создании успешных и надежных моделей машинного обучения.
При оптимизации гиперпараметров с использованием кросс-валидации или других
методов оценки производительности модели существует риск информационной утечки. Это
происходит, когда информация из тестового набора данных просачивается в процесс выбора
гиперпараметров, что может привести к переоценке производительности модели. Для
предотвращения информационной утечки необходимо строго разделять обучающий,
валидационный и тестовый наборы данных. Также можно использовать методы, которые
оценивают производительность на валидационной выборке с использованием только
информации обучающей выборки.
Сложные модели, такие как нейронные сети с большим количеством слоев и параметров,
могут иметь десятки или сотни гиперпараметров. Настройка всех этих гиперпараметров может
быть крайне трудоемкой задачей. В этом случае важно использовать методы оптимизации
гиперпараметров, такие как оптимизация на основе байесовских методов, которые могут
эффективно находить оптимальные настройки для сложных моделей.
Проблемы, связанные с гиперпараметрами в машинном обучении, являются серьезными
вызовами, с которыми сталкиваются исследователи и инженеры. Нахождение правильных
настроек гиперпараметров может существенно повлиять на производительность модели.
Несмотря на сложности, современные методы оптимизации и настройки гиперпараметров
позволяют справиться с этими проблемами и создать модели, которые работают наилучшим
образом. Однако важно помнить, что оптимизация гиперпараметров – искусство, которое
требует понимания данных и задачи, а также внимательного и тщательного подхода к
процессу настройки моделей.
В задачах обучения с учителем требуется наличие аннотированных данных, и их
создание может быть трудоёмким и дорогостоящим процессом, особенно при работе с
большими объёмами данных.
Активные исследования в области обучения без учителя и самообучения могут снизить
зависимость от аннотированных данных. С увеличением доступа к большим объёмам данных
возникают серьёзные вопросы о конфиденциальности и этике. Разработка технологий
обеспечения конфиденциальности данных, включая методы шифрования и обучения на
зашифрованных данных, будет иметь большое значение.
Проблемы масштабируемости алгоритмов обучения при работе с заданными наборами
данных представляют собой сложные и многогранные вызовы, которые требуют внимания
исследователей и инженеров. Несмотря на сложности, решение этих проблем является
ключевым фактором для дальнейшего развития области машинного обучения и его успешного
применения в различных областях. Необходимо продолжать исследования и инновации,
чтобы сделать машинное обучение более масштабируемым, доступным и эффективным
инструментом для решения сложных задач.
198СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Литература
1. Артемьев В.С., Савостин С.Д. Аналитика и методы математического моделирования
искусственного интеллекта в автоматизации контроля и испытаний // Аграрная наука – 2022:
мат-лы Всероссийской конференции молодых исследователей (г. Москва, 22-24 ноября 2022
г.). М., 2022. С. 340-343.
2. Артемьев В.С., Савостин С.Д. Системы автоматизированного управления
безопасностью ресурсов в вопросах цифровизации // Аграрная наука – 2022: мат-лы
Всероссийской конференции молодых исследователей (г. Москва, 22–24 ноября 2022 г.). М.,
2022. С. 344-347.
3. Артемьев В.С., Савостин С.Д. Моделирование организационно-технологических
систем и комплексов при генерации новых потоков // Вавиловские чтения – 2022: Сб. статей
Международной научно-практической конференции (г. Саратов, 22-25 ноября 2022 г.).
Саратов, 2022. С. 642-646.
4. Артемьев В.С., Савостин С.Д. Системы автоматизированного управления при
использовании алгоритма IDST // Развитие отраслей АПК на основе формирования
эффективного механизма хозяйствования: сб. научных трудов IV Международной научно-
практической конференции (г. Киров, 16 ноября 2022 г.). Киров, 2022. С. 310-313.
5. Артемьев В.С., Назойкин Е.А., Савостин С.Д. Автоматизация методов контроля
кооперации в системах математического моделирования // Развитие отраслей АПК на основе
формирования эффективного механизма хозяйствования: сб. научных трудов IV
Международной научно-практической конференции (г. Киров, 16 ноября 2022 г.). Киров,
2022. С. 307-309.
6. Артемьев В.С., Мокрушин С.А., Назойкин Е.А., Савостин С.Д., Эксплуатация
автоматизированных систем и технологий в существующих аспектах цифровой
трансформации для агрохолдингов // Развитие отраслей АПК на основе формирования
эффективного механизма хозяйствования: сб. научных трудов IV Международной научно-
практической конференции (г. Киров, 16 ноября 2022 г.). Киров, 2022. С. 143-146.
7. Artemyev V., Nazoikin E., Pankov V. Construction and regulation of static characteristics
for control objects // Machine Science. 2022. Vol. 11. No. 2. P. 80-85.
8. Artemyev V., Mokrushin S., Savostin S. Processing of time signals in a discrete time domain
// Machine Science. 2023. Vol. 12. No. 1. P. 46-54.
© Артемьев В.С., Панков Д.В., 2024
199СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.94
Рзаева С.С.
д-р философии по физике, доцент
Азербайджанский государственный экономический университет
г. Баку, Азербайджан
Мамедли Р.Э.
канд. физ.-мат. наук
Нижневартовский государственный университет
г. Нижневартовск, Россия
Зейналов Р.М.
д-р философии по математике
Институт систем управления
г. Баку, Азербайджан
МОДЕЛИРОВАНИЕ ДИНАМИКИ НЕЙРОНОВ
НА ОСНОВЕ МОДЕЛЕЙ НЕЙРОНОВ С ПОМОЩЬЮ MATLAB
Аннотация. В данной работе с помощью программы MATLAB изучено моделирование
потенциала действия с помощью графического интерфейса пользователя (GUI) на основе
модели нейрона Ходжкина-Хаксли, занимающей важное место в теоретической нейронауке.
В данной работе мы подавали различные токи на клетку, смоделированную
математической моделью Ходжкина-Хаксли, и определяли наиболее подходящие значения
тока для проводимых исследований. Мы оценивали его по амплитуде, частоте тока и
случайному пиковому значению тока. Мы старались получить оптимальные рабочие значения
для проведения экспериментальных работ.
Ключевые слова: модель; нервная клетка; ток; напряжение на мембране, стимуляция;
реакция
Introduction. The nervous system has the most complex known biological structure. Nerve
cells (neurons) and the networks they form constitute the nervous system. How information is stored
in this complex structure, by what mechanism inter-neuron information transmission and coding is
carried out, and how advanced functions of the brain such as learning and perception occur are among
the most important questions that neuroscience is trying to answer and still cannot fully shed light on
[5-7]. In addition to electrophysiological recording techniques that can be performed down to the
level of a single cell to understand the events occurring in the nervous system, imaging methods such
as PET (Positron Emission Tomography), fMRI (functional Magnetic Resonance Imaging), MEG
(Magneto encephalogram) are also used to determine the relationship between the physiological
structure and functions of the system [1; 4; 8]. This new interdisciplinary branch of science combines
natural sciences such as Electrical Engineering, Physics, Mathematics and Computer Sciences, and
Neurology and Physiology.
The aim of computational neuroscience is to model the nervous system at micro and macro
scales using experimentally obtained data and to provide predictions and recommendations for future
experimental studies [2; 3; 10].
Calculation of a space clamped axon. The nervous system has the most complex known
biological structure. Nerve cells (neurons) and the networks they form make up the nervous system.
200СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
A neural network is a computer program that models interconnected nerve cells (neurons) in the
human brain. Figure 1 shows the structure of neural networks [2; 3].
First of all, let me mention that each neural network consists of 3 layers: input layer, hidden
layer and output layer. In the input layer, x1, x2, ..., x8 data, and w11, w12, ..., w54 on the axes show
their weights. Artificial neural networks have one or more hidden layers (in this example there is only
one hidden layer) and the neurons are located in this layer. Neurons, or nerve cells, are the elementary
processing units in the brain and central nervous system. The neurons form an intricate network of
connections. This complex network of neurons receives processes and transmits information from
one part of the body to another. When a neuron receives an appropriate stimulus, it produces electrical
impulses called action potentials that travel along its cable-like structure.
Fig. 1. A typical neuron consists of three functionally distinct parts
In a nerve cell called a neuron, currents can pass through the cell membrane from inside to out
or from outside to in. Inside and outside the neuron is an electrolytic fluid which is a good conductor
and the membrane acts as a dielectric separating the two electrolytes.
Fig. 2. RC circuit diagram as a combination of a neuron membrane resistor and a capacitor
From Kirchhoff’s voltage law, we can write the differential equation for VC and solve it to find
all the parameters that describe the RC circuit. The membrane potential Vm of a neuron is given by
201СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
here cm is the membrane capacity per unit area, Jext is the synaptic input current density, and Jc is
the current density through ion channel c. The mechanism for the generation of an electrical signal
by a neuron is conceptually simple [9]. When a neuron receives a sufficient stimulus from another
neuron, the permeability of the cell membrane changes. As a result of changes in membrane
permeability, sodium ions first enter the cell, and potassium ions leave the cell. The movement of
ions across the membrane constitutes an electrical current signal that propagates along the axon to
the end points. These membrane currents depolarize the cell so that the interior of the cell becomes
positive and a neuronal voltage signals is generated. These short voltage pulses are called spikes or
action potentials and have duration of less than a few milliseconds and a peak of about +20 mV. The
action potential propagates along an axon without a change in shape.
Fig. 3. Action potential produced by an external current pulse at a temperature of 18.5oC.
The plot was created using the Hodgkin-Huxley Model
Литература
1. Dayan, P., Abbott, L.F. Theoretical Neuroscience: Computational and Mathematical
Modeling of Neural Systems, The MIT Press, 2001.
2. Gray`s anatomy. 39th ed. Editor-in-chif Susan Standring. Elsevier Ltd, USA 2005, 1627 p.
3. Junqueira LC, Carneiro J. Basic histology. McGraw Hill Companies. New York, Chicago,
2003. 515 p.
4. Koch C. Biophysics of computation: information processing in single neurons, Oxford
University Press, 1998.
5. Perkel D.H., Bullock T.H. Neural coding // Neurosciences Research Program Bulletin. 1968.
№6. P. 221-348.
6. Schwartz E. Computational neuroscience. Cambridge, Mass: MIT Press, 1990.
202СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
7. Sejnowski T.J., Koch C., Churchland P.S. Computational neuroscience // Science. 1988. №
241(4871). P. 1299-1306.
8. Terminologia Histologica. Международные термины по цитологии и гистологии
человека с официальным списком русских эквивалентов. М.: ГЭОТАРМедиа, 2009. 272 с.
9. Зейналов Р.М., Мамедли Р.Э. К адаптивному управлению дискретными
динамическими объектами в неопределенных условиях // Современное программирование:
Мат-лы III Международной научно-практической конференции (г. Нижневартовск, 27-29
ноября 2020 г.). Нижневартовск, 2020. С. 172-174.
10. Хэм А., Кормак Д. Гистология. IV том. Москва: Мир. 1982. 242 с.
© Рзаева С.С., Мамедли Р.Э., Зейналов Р.М., 2024
203СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.8
Терин Д.В.
доцент
Форостин М.Л.
студент
Саратовский государственный технический университет им. Гагарина Ю.А.
г. Саратов, Россия
ИСПОЛЬЗОВАНИЕ КВАНТОВОЙ СВЁРТОЧНОЙ НЕЙРОННОЙ СЕТИ
ДЛЯ ВЫДЕЛЕНИЯ И ОПОЗНАВАНИЯ ОБЪЕКТОВ
Аннотация. В работе рассматриваются современный подход опознавания объектов
внутри изображений с помощью квантовых систем искусственного интеллекта, применяющий
концепцию машинного обучения путём квантовых свёрточных нейронных сетей и идеи
квантовых вычислений. Свойство квантовых вычислительных систем, которое должно дать
преимущество в эффективности вычислений это более быстрые матричные преобразования и
ускоренное получение градиента системы для оптимизации параметров под функцию
стоимости. В работе рассмотрены алгоритмы квантовых систем искусственного интеллекта
для обработки изображений и потенциальные области их применения.
Ключевые слова: нейронные сети; квантовое обучение; искусственный интеллект;
машинное обучение.
В последние годы наблюдается значительный рост инвестиций в область квантовых
вычислений с целью использования их принципов для решения проблем, которые невозможно
решить с помощью традиционных вычислительных методов. Пересечение квантовых
вычислений и глубокого машинного обучения представляет особый интерес, поскольку в
последние годы в обеих областях наблюдается значительный рост. Исследователи подчеркнули
потенциал квантовых вычислений, способных произвести революцию в современных методах
в таких областях, как безопасность и сетевая связь. Применение принципов квантовых
вычислений к моделям глубокого машинного обучения потенциально может значительно
повысить их производительность и позволить решать классически неразрешимые проблемы.
Таким образом, растет интерес к исследованию возможностей на пересечении этих двух
областей, обычно называемых квантовым глубоким машинным обучением.
Результат выделения и опознавания объекта получается путем использования
полносвязного слоя после того, как размер данных был эффективно уменьшен за счет
многократного применения этих слоев. Для достижения оптимальных результатов
несоответствие между полученным результатом и фактическим результатом (функция
стоимости) можно использовать для обучения модели с использованием методов
оптимизации, таких как градиентный спуск. В последние годы было проведено несколько
исследований, которые объединяют принципы квантовых вычислений и модель свёрхточных
нейронных сетей (далее СНС) для решения реальных проблем, которые иначе трудно решить
с помощью традиционных методов машинного обучения с использованием квантовых СНС.
Существует подход к эффективному решению задач квантовой физики путем включения
204СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
структуры СНС в квантовую систему, а также методология повышения производительности
за счет включения квантовых принципов в задачи, ранее решаемые СНС [1, с. 21].
Свёрточная нейронная сеть. Свёрточные нейронные сети (СНС) – подкласс
искусственных нейронных сетей, которые широко используются в задачах распознавания
изображений и обработки звука. Они обладают способностью идентифицировать конкретные
особенности и закономерности в заданных входных данных, что делает их мощным
инструментом в области компьютерного зрения. Возможность идентификации функций
достигается за счет использования двух типов слоев в СНС: свёрточного слоя и
субдискретизирующего слоя.
Свёрточный слой применяет набор фильтров или ядер к входному изображению, в
результате чего создается карта объектов, которая представляет входное изображение с
примененными фильтрами. Эти слои можно объединять для создания более сложных моделей,
которые позволяют изучать более сложные функции изображений.
Субдискретизирующий слой, с другой стороны, уменьшает пространственный размер
входных данных, упрощая их обработку и требуя меньше памяти. Они также помогают
сократить количество параметров и ускорить процесс обучения. Используются два основных
типа субдескритизации: по максимальной функции и по минимальной функции. При
максимальной функции принимается максимальное значение из каждой карты объектов, а при
средней функции принимается среднее значение. Слои субдескритизации обычно
используются после свёрточных слоев, чтобы уменьшить размер входных данных перед их
подачей в полносвязный слой.
Полносвязные слои – один из самых основных типов слоев в СНС, в котором каждый
нейрон связан с каждым другим нейроном предыдущего слоя. Обычно они используются в
конце СНС, когда цель состоит в том, чтобы использовать функции, полученные предыдущими
слоями, для прогнозирования. Например, если СНС используется для опознавания
изображений животных, последний полностью связный слой может взять функции,
полученные на предыдущих слоях, и использовать их для опознавания изображения как
содержащего собаку, кошку, птицу и т. д.
Рис. 1. Свёрточная нейронная сеть
205СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Свёрточные нейронные сети являются мощными инструментам для задач анализа
изображений, и различные архитектуры и модификации могут использоваться для повышения
производительности при работе с различными наборами данных. Данный метод широко
используются в задачах анализа изображений и показал свою эффективность в достижении
высокой точности. Однако по-прежнему существуют проблемы и области для улучшения,
такие как выделение памяти для больших входных изображений и переоснащение для
небольших наборов данных. Различные исследования пытались решить эти проблемы, такие
как введение новых архитектур и алгоритмов для уменьшения количества параметров,
увеличения скорости сходимости и приведения вводных данных в наиболее подходящую
форму (https://clck.ru/39fvqR).
Квантовая нейронная сеть для опознавания объектов. Модель квантового
машинного обучения. Квантовое машинное обучение обобщает методы обучения
классических нейронных сетей таким образом, чтобы квантовый параллелизм можно было
использовать для ускорения работы сети. Идея создания квантовой нейронной сети состоит в
том, чтобы заменить классические сигналы, поступающие на вход узлов, квантовыми
состояниями с амплитудой и фазой. В то же время на выходе из узла также должно
формироваться квантовое состояние, зависящее от линейной суперпозиции входящих
состояний.
Обучение с учителем основано на намеренном присвоении каждого входного вектора из
обучающего набора желаемому выходному вектору. При этом настройте веса сети –
последовательность преобразований, направленных так, выходной вектор был максимально
приближен к вектору искомого результата. То есть квантовая схема производит квантовую
оптимизацию параметров по функции стоимости разницы векторов. В известных моделях
квантовых нейронных сетей настройки сети состоят из последовательностей классических
операций измерения и подготовки процесса.
Веса в случае квантовой нейронной сети представляют собой комплексные числа над
некоторой последовательностью квантовых вентилей (логических операторов для квантовых
систем), которые могут быть изменены по мере обучения сети, так что каждое входное
квантовое состояние взвешивается по амплитуде и сдвигается по фазе. Такой метод
вычисления называется квантовой схемой. Поскольку текущие квантовые компьютеры не
позволяют сохранять в себе квантовую информацию квантовой схемы, хранение весов
происходит в форме кодирования классическими битами [2]. Описанный метод обучения
продемонстрирован на рисунке 2.
Зная функцию стоимости и передавая выходные слои квантовой схеме, она проводит
оптимизацию градиентным спуском путём алгоритма фазового сдвига. Оптимизированные,
квантовой схемой параметры задаются в слои нейронной сети, начиная со входного
Использование алгоритма фазового сдвига даёт нейронной сети заметное ускорение при
обучении и является главным преимуществом квантового машинного обучения [4, с. 165].
206СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 2. Квантовая нейронная сеть
Квантовая свёрточная нейронная сеть. Основное нововведение, которое квантовая
свёрточная нейронная сеть (КСНС) добавляет в модель стандартной свёрточной нейронной
сети является добавление нового слоя фильтрации данных – вероятностного слоя. Этот слой
принимает участие в следующих операциях:
1. Изображение разбивается на блоки размера N × N;
2. Для каждого блока осуществляется кодирование входного сигнала к квантовому
состоянию, которое осуществляется сдвигом фазы комплексного числа из основного
состояния;
3. Квантовые вычисления преобразуют над входные данные в случайную квантовую
цепь;
4. Проводится измерение квантовой системы для получения разных цветовых (или
иных) каналов изображения в стандартном битовом представлении;
5. Полученные каналы используются другими слоями нейронной сети [3, 165 с.];
Схема нейронной сети, указанная на рисунке 1, в таком случае принимает вид: рисунк 3.
Использование вероятностного слоя является необходимостью, когда в качестве вводных
данных подаются данные, полученные из явлений, подвергающимися законами из квантовой
физики (признаки этих данных подчиняются закону Хайзенберга).
Примерами подобных данных являются распознавание атомов и молекул, поскольку
положение и энергетический импульс электронов в их электронной орбите описывается
волновой функцией. В таком случае входными данными может быть снимок молекулы, то
вероятностный слой будет возвращать все варианты образования и сочетания электронов. В
свою очередь из этого нейронная сеть сможет легче и точнее описать свойства этой молекулы.
Помимо вышеописанного техника квантового обучения путём квантовой оптимизации
фазовым сдвигом из раздела 2.1 так же может быть применена, на том же устройстве, которое
уже используется для получения вероятностного слоя чтобы получить дополнительное
ускорение обучения.
207СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 3. Квантовая свёрточная нейронная сеть
Проблемы интерпретации квантовой информации неквантовыми вычислительными
устройствами, а также появление алгоритмов квантовой оптимизации, позволившая успешно
находить оптимальное решение для задач экспоненциальной сложности за полиномиальное
время с использованием квантовой суперпозиции состояний вычислительного регистра
повлекло за собой появление квантовых свёрточных нейронных сетей. Подобные инновации
связаны с большим скачком в развитии квантовых вычислений за последние 10 лет. Квантовые
свёрточные нейронные сети всё ещё существенно уступают неквантовому аналогу по
точности и отклонению в большей части обычных задач по выделению и распознаванию
объектов из потока визуальной информации [3, с. 18].
В данной работе были рассмотрены идеи, опираясь на которые учёные рассчитывают на
достижение превосходства над обычным машинным обучением. Так же был описан класс
задач, для которых был создан новый квантовый свёрточный слой для свёрточных нейронных
сетей. За пределами работы остались математическое обозначение описанных алгоритмов и
идей, а также их программная реализация. Результат от подобных алгоритмов может быть
оценён на обычном компьютере, модулирующим квантовый.
Литература
1. Джонстон Э., Хэрриган Н., Химено-Сеговиа М. Программирование квантовых
компьютеров. Базовые алгоритмы и примеры кода. Нью Йорк, 2022.
2. Камаев И. Нейросети. М.: Авторская книга, 2023. 31 с.
3. Петров В. Курс квантового машинного обучения. М., 2021. 18 с.
4. Яроцкий В. Квантовые вычисления / пер. с англ. М.: ДМК Пресс, 2021. 165 с.
© Терин Д.В., Форостин М.Л., 2024
208СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.032.26
Казиахмедов Т.Б.
канд. пед. наук, доцент
Шишкин М.А.
студент
Нижневартовский государственный университет
г. Нижневартовск, Россия
МЕТОДЫ ИЗВЛЕЧЕНИЯ СМЫСЛА ТЕКСТОВ
(КАК НАУЧИТЬ ЭВМ ПОНИМАТЬ СМЫСЛ СЛОВ)
Аннотация. Распознавание текстов является немаловажной функцией в реалиях
современного мира, где подавляющее количество источников информации содержится в
текстовых документах: журналах, книгах, исторических текстах и т.д., которые могут быть как
физическими, так и цифровыми. Основной задачей распознавания текста компьютером (ЭВМ)
является поиск его смысла, которая достигается, как вариант, с помощью нейронных сетей,
где происходит процесс машинного обучения, включающий в себя поиск ключевых слов,
токенизацию текста, лемматизацию, кластеризацию, классификацию и множество других
операций, результатом выполнения которых окажется обученная модель, способная за
короткий срок получить основной смысл электронного текста.
Ключевые слова: методология; машинное обучение; нейронная сеть; распознавание
текста; обработка данных; классификация; лемматизация.
Процесс обучения компьютера понимать текст и извлекать из него полезные данные, в
том числе и сам смысл, предполагает использование таких технологий, как нейронные сети,
бинарные деревья, морфологический анализ предложений, поиск семантической связи между
словами, лемматизацию и стемминг слов. Нейронная сеть бывает разных типов. Например,
сверточные нейронные сети могут использоваться для обработки картинок и видео. Они
могут классифицировать данные на графических данных по заданным параметрам, включая
распознавание текста на картинке, однако, использование сверточной нейронной сети для
поиска слов на изображениях является неэффективным методом, поскольку этим занимается
другая система. Метод оптического распознавания символов (OCR) является более
эффективным методом поиска текста на картинке. Процесс распознавания текста на
изображении выглядит следующим образом: сначала изображение преобразуется в черно-
белый формат, где белое это фон, а черное это буквы. Затем происходит поиск символов и
последующее сопоставление букв в вероятные комбинации и сопоставление со словарем. Если
слово было найдено в словаре, значит оно отмечается как распознанное, иначе происходит
определение программой наиболее вероятного варианта [3].
Данную технологию можно использовать для преображения больших текстовых данных,
представленных в формате jpg, png и т. д., в обычный электронный текст, в котором уже
появляется возможность искать и извлекать смысл с помощью рекуррентной нейронной сети.
Рекуррентная нейронная сеть – особый класс нейронных сетей, обладающих памятью и
узлами обратной связи, которые позволяют ей лучше распознавать закономерности в данных.
РНС расширяет обычные нейронные сети, добавляя соединения, которые возвращают
скрытый слой нейронной сети для следующего нейрона. Такое соединение называется
209СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
рекуррентным. Повторяющиеся соединения обеспечивают видимость не только текущей
выборки данных, но и ее предыдущего скрытого состояния. Рекуррентную сеть с обратной
связью можно визуализировать как множество копий нейронной сети, причем выходные
данные одной служат входными данными следующей. В отличие от традиционных нейронных
сетей, рекуррентные сети используют свое предыдущее состояние для обработки входного
вектора, вместо того, чтобы каждый раз производить вычисление с нуля [6].
Рис. 1. Оптическое распознавание текста
Рис. 2. Однослойная РНС
Области применения рекуррентных нейронных сетей
РНС часто используется для обработки последовательных данных для запоминания и
классификации слов в предложении. Использование рекуррентных нейронных сетей включает
обработку естественного языка, распознавание речи, машинный перевод, моделирование
языка на уровне символов, классификацию изображений, распознавания имен объектов,
создание субтитров к изображениям и т. д. Также рекуррентную нейросеть можно
использовать для непоследовательных данных. Помимо этого, рекуррентные нейронные сети
210СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
вполне применимы для генерации последовательностей, имитирующих такие вещи, как книги
и музыку.
Преимущества и недостатки РНС
Главным преимуществом рекуррентной нейросети можно отметить масштабируемость,
так как РНС можно расширять на более длинную последовательность, что не получится
сделать у остальных типов искусственных нейронных сетей. Еще одним плюсом является
возможность обрабатывать последовательности переменной длины. К недостаткам РНС
можно отнести тот факт, что она может слишком легко переобучиться, в отличии, например,
от полносвязной нейронной сети. Если результат проверочного набора сначала возрастал, а на
следующей эпохе начал уменьшаться, значит, что нейронная сеть переобучилась.
Переобучение чревато тем, что конечная точность работы нейросети будет заметно меньше,
чем могло бы получиться при других параметрах. Для устранения данной проблемы можно
снизить количество эпох при обучении нейросети, поменять размер мини выборки и
количество нейронов функции РНС.
Сравнение рекуррентной и полносвязной нейронной сети
Полносвязные нейронные сети являются более простой формой нейросетей, где каждый
нейтрон полностью соединен с каждым нейтроном в последующем слое. В отличие от
полносвязных и сверточных нейронных сетей, РНС обладает скрытыми слоями, сохраняющие
внутреннее состояние, что в свою очередь позволяет использовать информацию о
предыдущих входных данных для обработки последующих.
Создание простой рекуррентной нейронной сети
Создать РНС можно средствами языка программирования Python, а также используя
платформу keras, созданную специально для работы с нейросетями. Для обучения
рекуррентной нейросети используются разворачивание во времени и обратное
распространение ошибки, где количество слоев в развернутой сети зависит от длины
последовательности входных данных. При разработке РНС стоит учитывать проблему
исчезающего градиента, в котором сигнал об изменении слоев уменьшается при передаче от
слоя к слою, а также тот факт, что сети с большим количеством слоев сложнее и дольше
обучаются. Решением перечисленных проблем считается переход на более сложные
архитектуры рекуррентных сетей LSTM (Long-Short Term Memory) и GRU (Gated Recurrent
Unit), либо использовать одномерные сверточные нейронные сети.
Рис. 3. Архитектура LSTM и GRU
211СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
LSTM и GRU имеют возможность сохранять память и состояние от предыдущих
активаций, а не заменять всю активацию, как это делает обычная РНС, позволяя им
запоминать функции в течение длительного времени и позволяя осуществлять обратное
распространение через несколько ограниченных нелинейностей, что снижает вероятность на
возникновение исчезающего градиента [6].
Кластеризация текста
Кластеризация текста автоматически распределяет похожие по смыслу текстовые
документы из большого набора данных в один кластер. Тоже самое происходит с
документами, смысл которых отличается, то есть, выполняется группировка отличающихся
друг от друга документов. Данный метод позволяет провести анализ тематики целой группы
текстов и выявить в нем основные темы [4].
Семантический анализ текста
Семантическим анализом называется процесс обработки смысла и содержание
текстовых данных, используя методы компьютерной лингвистики и морфологии. При таком
анализе текста также используются нейронные сети. Алгоритм семантического анализа текста
состоит из нескольких этапов. Во-первых, весь текст разбивается на предложения,
словосочетания и слова. Во-вторых, каждому слову добавляется часть речи, к которому оно
относится, а также род, падеж, число и остальные грамматические характеристики. В-третьих,
и что самое важное, между всеми словами в предложении ищется конкретная связь.
Семантический анализ часто используется при классификации текстов и извлечении
информации, а также является одним из основных инструментов, при создании алгоритмов
машинного перевода текста и анализа его тональности [1].
Рис. 4. Пример семантического представления текста
Лемматизация и стемминг
Лемматизация и стемминг относятся к разбивке, тегированию и реструктуризации
текстовых данных на основе корневой основы, либо окончания. Оба процесса сортировки
могут предоставлять разные ценные данные. Стемминг представляет собой алгоритмы по
усечению окончаний. Также существует более продвинутый алгоритм, который использует
рекурсию для урезания более сложных конструкций. В свою очередь метод лемматизации
выполняет обратное преобразование: заменяет грамматическое окончание суффиксом или
212СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
окончанием начальной формы. Также лемматизация включает определение части речи слова
и применение различных правил нормализации для каждой части речи. Определение части
речи происходит до нахождения основы, поскольку для некоторых языков правила стемминга
зависят от части речи данного слова [2].
Рис. 5. Лингвистический процессор
Представление текста в виде бинарного дерева
Искать смысл в текстах можно с помощью его представления в виде бинарных деревьев.
Сложный текст может быть преобразован в виде дерева, используя методы синтаксического
анализа текстов, который описывает структуру предложений и словосочетаний. Бинарные
деревья можно построить с применением специальных парсеров – своего рода являющимися
инструментами синтаксического анализа. Слова в бинарных деревьях представлены в виде
узлов, а связь между словами – ребрами дерева. Данная связь определяет, какое из слов
является подлежащим, а какое сказуемым, и так со всеми остальными частями речи. Помимо
поиска смысла в текстах, бинарные деревья часто используются при определении ключевых
слов в предложении и их взаимосвязей, а также при обработке естественного языка с целью
получения машинного перевода текста и определения его тональности [5].
Были рассмотрены основные методы распознавания текстов компьютером и извлечения
основного смысла, среди которых были методы использования сверточной и рекуррентной
нейронной сети, кластеризации, лемматизации текста, определения тональности текста,
семантического анализа, а также использования бинарных деревьев. При изучении
рекуррентных нейронных сетей были рассмотрены преимущества и недостатки, области
применения, сравнение с другими нейросетями и основной принцип работы данной
нейросети. Каждый метод по-своему уникален, способный анализировать большие текстовые
данные и искать в них основной смысл.
Литература
1. Аношин П.И. Автоматический анализ текстов. Синтаксический и семантический
анализ // Евразийский научный журнал. 2017. № 6. С. 211-213
213СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2. Вершинин Е.В., Тимченко Д.К. исследование применения стемминга и лемматизации
при разработке систем адаптивного перевода текста // Наука. Исследования. Практика: сб.
статей международной научно-практической конференции (г. Санкт-Петербург, 25 декабря
2019 г.). Калуга, 2020. С. 77-79.
3. Колясников Д.В. Разработка метода оптического распознавания символов //
Информационно-измерительные диагностирующие и управляющие системы. Диагностика:
сб. статей международной научно-практической конференции (г. Курск, 11-13 мая 2016 г.).
Курск, 2016. С. 62-65.
4. Котельников Е.В., Плетнева М.В. Анализ тональности текстов на основе
генетического алгоритма и совместной кластеризации слов и документов // Известия
Российской Академии Наук. Теория и системы управления. 2016. № 1. С. 115.
5. Сайгак К.О., Сахибназарова В.Б. Разработка и анализ алгоритма сортировки на основе
использования бинарных деревьев // Молодежный научный форум: технические и
математические науки. 2016. № 9. С. 121-125.
6. Федотов П.В. рекуррентные нейронные сети на основе кратко-долговременной памяти
// Современные информационно-экономические технологии: тенденции и перспективы
развития: сб. статей международной научно-практической конференции (г. Ростов-на-Дону,
26-27 ноября 2015 г.). Ростов-на-Дону, 2015. С. 144.
© Казиахмедов Т.Б., Шишкин М.А., 2024
214СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 622.691
Шопанова Г.Е.
аспирант
Султанов Н.З.
д-р техн. наук, профессор
Российский государственный гуманитарный университет
г. Москва, Россия
ПРИМЕНЕНИЕ МЕТОДОВ НЕЧЕТКОГО МОДЕЛИРОВАНИЯ
ДЛЯ РЕШЕНИЯ ЗАДАЧ АВТОМАТИЗАЦИИ ПРОЦЕССОВ ПОДОГРЕВА ГАЗА
НА ГАЗОРАСПРЕДЕЛИТЕЛЬНОЙ СТАНЦИИ
Аннотация. В трубопроводном транспорте природного газа является необходимыми
распределение и редуцирование природного газа перед подачей конечному потребителю. Для
организации этих процессов на газораспределительной станции устанавливают узлы
подогрева газа, которые играют роль в целях борьбы с образованием газовых гидратов. В
настоящей статье рассматривается решение задачи об организации контроля над подогревом
газа с помощью разработки автоматизированной системы, которая полностью построена на
методах нечеткой логики.
Ключевые слова: нечеткая логика; редуцирование; природный газ; подогрев газа.
Потребление населением большого объёма газа требует надежных методов
транспортировки и распределения этого энергоресурса. Одним из важных способов доставки
газа конечным потребителям является трубопроводный транспорт природного газа.
Технология транспортировки природного газа немыслима без газораспределительных
станций (ГРС). На ГРС происходят главные технологические процессы, позволяющие
безопасно подавать природный газ конечному потребителю. Газораспределительная станция
– технологические конструкции, которые предназначены для снабжения природным газом от
магистральных и промысловых газопроводов потребителей, таки как газовые и
нефтепромысловые объекты, газокомпрессорные станции, жилые районы, электростанции,
промышленные и коммунальные предприятия.
Работа ГРС обеспечивает:
1) очистку природного газа от жидких и твердых примесей;
2) подогрев природного газа;
3) редуцирование природного газа;
4) измерение расхода природного газа;
5) одоризацию природного газа;
6) транспортировку природного газа потребителям.
Для повышения надежности ГРС и снижения экономических затрат необходима ее
полная автоматизация. В связи с этим было выбрано в качестве объекта технологические
процессы ГРС, где рассмотрены существующие системы автоматизации, узел подогрева. ГРС
выполняет и обеспечивает очистку природного газа от механических примесей, пыли и влаги;
подогрев природного газа; редуцирование и поддержание постоянного давления на выходе
ГРС; измерение расхода и регистрацию объемов потребления газа; одоризацию газа перед
215СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
подачей потреблителю. На рисунке 1. показана блок-схема ГРС, где описанны процедуры
последовательно в каждом блоке ГРС.
Рис. 1. Структура газораспределительной станции
Перечисленные технологические процессы газораспределительной станции
представляют собой технологические функции, которые подлежат автоматизации
посредством использования автоматизированных систем контроля и управления процессами
газораспределительной станций. Анализ современных газораспределительных станций
показывает, что многие процессы, происходящие при эксплуатации ГРС, не выполняются в
автоматизированном режиме или выполняются в частично ручном режиме. Узел подогрева
газа должен обеспечивать температуру газа на выходе из ГРС не ниже минус 10 °С (или не
ниже 0°С на пучнистых грунтах). Для этого на ГРС устанавливают специальные котлы -
подогреватели, работа которых приводит к усложнению технологической схемы ГРС,
потребляет в качестве топлива транспортируемый газ и выбрасывает в атмосферу продукты
сгорания.
В целях минимизации себестоимости транспорта газа, актуальной задачей является
разработка новых способов осуществления подогрева газа при редуцировании, отвечающих
требованиям энергосбережения.
В ручном управлении находятся процессы регулирования и редуцирования давления,
либо эти процессы выполняются с помощью грубых автоматических регуляторов прямого
действия. Ещё одним примером является отсутствие автоматических, либо
автоматизированных решений процесса поддержания давления в блоке переключения ГРС,
который необходим во время проведения технического обслуживания оборудования ГРС либо
выполнении ремонтных работ. Подобных примеров при эксплуатции газораспределительных
станций наблюдается большое множество, которые требуют решений на новых подходах и
методах.
При эксплуатции многие функции очень часто не полностью автоматизированны ГРС
не имеет автоматической системы защиты, ряд функций и порядок их оснащения
специальными средствами устанавливается объединением по согласованию с местными
органами.
216СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Одной из основных задач при подогреве газа является достижение постоянного режима,
который обеспечит оптимальную температуру на выходе подогревателя для входа в узел
редуцирования. Поэтому задачей данной работы является моделирование системы
автоматического контроля и управления режимами работы подогревателя методами нечеткой
логики для обеспечения необходимого режима нагрева транспортируемого газа в
автоматическом режиме.
Построение системы управления на основе традиционных решений, которые постоянно
рассчитывают расход тепловой энергии, требует постоянного контроля и более высокой
квалификации от оперативного персонала ГРС. Поэтому задача состоит в том чтобы построить
простую в управлении и понимании автоматизированной системы на методах и алгоритмах,
базирующихся на нечеткой логике, с одной стороны. С другой стороны, для создания системы
необходимо использовать имеющийся в распоряжении технический арсенал средств
автоматизации, имеющийся в ГРС.
На газораспредельных станциях, когда давления газа падает из-за эффекта Джоуля –
Томпсона, температура газа значительно снижается. Это в свою очередь приводит к
образованию конденсата в виде газовых газогидратов, обмерзанию регулирующих клапанов,
запорной арматуры, приборов и трубопроводов. Поэтому систему контролирют, чтобы
разница температур на входе и выходе не превышала определенное значение. Также
контролируются значения температуры на входе и выходе, которые не должны быть меньше
либо больше определенного значения. По этой причине оперативному персоналу было бы
удобно наблюдать за работой системы, которая в зависимости от измеренных параметров ГРС,
определять режим работы газового подогревателя газа.
В соответствии с работами Вишневской Н.С., Исуповой Е.В. и Данилова А.А. [2; 4]
количество тепла, необходимое для подогрева газа, рассчитывается по следующей формуле:
Q cq t, (1)
m
c 
где теплоемкость газа, ккал/(м3 оС);
q 
m массовый расход газа, кг/ч;
t 
разность температур между выходом и входом ГРС.
Для построения системы, которая контролирует падение температуры из-за
редуцирования, также необходимо учесть разность давления между входом и выходом ГРС,
которая, в основном, определяется работой узла редуцирования, с одной стороны. С другой
стороны, теплоемкость газа в уравнении (1) является функцией давления и температуры,
поэтому при решении задачи моделирования и реализации нечеткой системы контроля
производительность узла подогрева газа, необходимо учесть данные параметры.
Задачу решим двумя ступенями нечеткого моделирования. На первой ступени с
помощью модели Мамдани построим систему контроля теплоемкости газа, зависящую от
входных парметров газа. На второй стадии реализуем модель Мамдани для определения
необходимого режима работы узла подогрева [3; 5].
217СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Для решения поставленных задач введем в рассмотрение несколько лингвистических
переменных с соответствующими терм-множествами. Для описания разности температуры
введем соответствующую лингвистическую переменную, где терм-множества представлены
на рисунке 2.
Рис. 2. Терм-множества лингвистической переменной для разности температур
Введем лингвистическую перемнную, связанную с давлением газа на входе ГРС и
характеризующуюся нечетким и терм-множествами. При необходимости те же
лингвистические переменные можно использовать для описания перепада давлений на узле
редуцирования. Вид лингвистических переменных и соответствующие терм-множества
переменной представлены на рисунке 3.
Рис. 3. Терм-множества лингвистической переменной для давления
Построим подсистему расчета теплоемкости газа на основе алгоритма Мамдани, которая
будет реализована на основе следующей базы правил [3; 5; 6]:
(t  A ) (p  P) C C
R1: ЕСЛИ 1 И 1 ТО ( 1),
(t  A ) (p  P) C C
R2: ЕСЛИ 2 И 1 ТО ( 2),
(t  A ) (p  P) C C
R3: ЕСЛИ 3 И 1 ТО ( 2),
218СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
(t  A ) (p  P) C C
R4: ЕСЛИ 4 И 1 ТО ( 2),
(t  A ) (p  P) C C
R5: ЕСЛИ 5 И 1 ТО ( 2),
(t  A ) (p  P) C C
R6: ЕСЛИ 6 И 1 ТО ( 3),
(t  A ) (p  P ) C C
R7: ЕСЛИ 1 И 2 ТО ( 2),
(t  A ) (p  P ) C C
R8: ЕСЛИ 2 И 2 ТО ( 2),
(t  A ) (p  P ) C C
R9: ЕСЛИ 3 И 2 ТО ( 2),
(t  A ) (p  P ) C C
R10: ЕСЛИ 4 И 2 ТО ( 3),
(t  A ) (p  P ) C C
R11: ЕСЛИ 5 И 2 ТО ( 3),
(t  A ) (p  P ) C C
R12: ЕСЛИ 6 И 2 ТО ( 3),
(t  A ) (p  P ) C C
R13: ЕСЛИ 1 И 3 ТО ( 3),
(t  A ) (p  P ) C C
R14: ЕСЛИ 2 И 3 ТО ( 3),
(t  A ) (p  P ) C C
R15: ЕСЛИ 3 И 3 ТО ( 3),
(t  A ) (p  P ) C C
R16: ЕСЛИ 4 И 3 ТО ( 3), (2)
(t  A ) (p  P ) C C
R17: ЕСЛИ 5 И 3 ТО ( 3),
(t  A ) (p  P ) C C
R18: ЕСЛИ 6 И 3 ТО ( 2),
(t  A ) (p  P ) C C
R19: ЕСЛИ 1 И 4 ТО ( 3),
(t  A ) (p  P ) C C
R20: ЕСЛИ 2 И 4 ТО ( 3),
(t  A ) (p  P ) C C
R21: ЕСЛИ 3 И 4 ТО ( 3),
(t  A ) (p  P ) C C
R22: ЕСЛИ 4 И 4 ТО ( 3),
(t  A ) (p  P ) C C
R23: ЕСЛИ 5 И 4 ТО ( 3),
(t  A ) (p  P ) C C
R24: ЕСЛИ 6 И 4 ТО ( 3),
(t  A ) (p  P ) C C
R25: ЕСЛИ 1 И 5 ТО ( 4),
(t  A ) (p  P ) C C
R26: ЕСЛИ 2 И 5 ТО ( 4),
(t  A ) (p  P ) C C
R27: ЕСЛИ 3 И 5 ТО ( 3),
(t  A ) (p  P ) C C
R28: ЕСЛИ 4 И 5 ТО ( 3),
(t  A ) (p  P ) C C
R29: ЕСЛИ 5 И 5 ТО ( 3),
(t  A ) (p  P ) C C
R30: ЕСЛИ 6 И 5 ТО ( 3),
(t  A ) (p  P ) C C
R31: ЕСЛИ 1 И 6 ТО ( 5),
219СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
(t  A ) (p  P ) C C
R32: ЕСЛИ 2 И 6 ТО ( 4),
(t  A ) (p  P ) C C
R33: ЕСЛИ 3 И 6 ТО ( 4),
(t  A ) (p  P ) C C
R34: ЕСЛИ 4 И 6 ТО ( 4),
(t  A ) (p  P ) C C
R35: ЕСЛИ 5 И 6 ТО ( 3),
(t  A ) (p  P ) C C
R36: ЕСЛИ 6 И 6 ТО ( 3).
Динамика изменения теплоемкости природного газа при различных значениях давления
и перепаде температуры представлена на рисунке 5. Из графика на рисунке 4 видно, что
поверхность формируемая на основе базы правил (2), отражает реальное поведение этого
параметра при различных давлениях и температурах. Для малых значений давления и
температуры величина теплоемкости остается минимальным и увеличивается по мере роста
входных параметров.
Рис. 4. Динамика изменения теплоемкости газа
После формирования расчета тепловой мощности необходимо сформировать базовую
систему для выбора тепловой мощности блока подогревателя газа. Для этого вводится ещё
одна лингвистическая переменная, связанная с тепловой мощностью блока подогрева газа.
220СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 5. Терм-множества лингвистической переменной передачи тепла газа
Для того чтобы выбрать и применить режимы в соответствии с термами на рисунке 6,
необходимо организовать следующую нечеткую базу правил (3), которая состоит из 120
правил, описывающих все возможные комбинации теплоемкости, разности температур и
расхода, которые приводят к различным тепловым режимам, отражающим термы
лингвистической переменной передачи тепла (рис. 5).
(t  A ) C C (Q Q ) E  E
R1: ЕСЛИ 1 И ( 1) И 1 ТО 1,
(t  A ) C C (Q Q ) E  E
R2: ЕСЛИ 2 И ( 1) И 1 ТО 1,
(t  A ) C C (Q Q ) E  E
R3: ЕСЛИ 3 И ( 1) И 1 ТО 1,
(t  A ) C C (Q Q ) E  E
R4: ЕСЛИ 4 И ( 1) И 1 ТО 1,
(t  A ) C C (Q Q ) E  E
R5: ЕСЛИ 5 И ( 1) И 1 ТО 1,
(t  A ) C C (Q Q ) E  E
R6: ЕСЛИ 6 И ( 1) И 1 ТО 1,
(t  A ) C C (Q Q ) E  E
R7: ЕСЛИ 1 И ( 1) И 2 ТО 2,
(t  A ) C C (Q Q ) E  E
R8: ЕСЛИ 2 И ( 1) И 2 ТО 2,
(t  A ) C C (Q Q ) E  E
R9: ЕСЛИ 3 И ( 1) И 2 ТО 2,
(t  A ) C C (Q Q )
R10: ЕСЛИ 4 И ( 1) И 2 ТО
E  E
2, (3)
(t  A ) C C (Q Q ) E  E
R11: ЕСЛИ 5 И ( 1) И 2 ТО 2,
(t  A ) C C (Q Q ) E  E
R12: ЕСЛИ 6 И ( 1) И 2 ТО 2,
(t  A ) C C (Q Q ) E  E
R115: ЕСЛИ 1 И ( 5) И 4 ТО 5,
(t  A ) C C (Q Q ) E  E
R116: ЕСЛИ 2 И ( 5) И 4 ТО 5,
(t  A ) C C (Q Q ) E  E
R117: ЕСЛИ 3 И ( 5) И 4 ТО 5,
221СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
(t  A ) C C (Q Q ) E  E
R118: ЕСЛИ 4 И ( 5) И 4 ТО 5,
(t  A ) C C (Q Q ) E  E
R119: ЕСЛИ 5 И ( 5) И 4 ТО 5,
(t  A ) C C (Q Q ) E  E
R120: ЕСЛИ 6 И ( 5) И 4 ТО 5.
Результаты работы нечеткой базы правил (3) можно увидеть из рисунка 6, который
описывает поверхность, построенная в соответствии с нечеткой базой правил. Аналогичные
модели были получены в исследовании для совершенно другой области исследования [1].
Рис. 6. Поверхность, описывающая изменения тепловой мощности подогрева
В результате получается алгоритм, который строится без специальных аналитических
зависимостей и может быть полностью скорректирован на основе экспертной информации для
достижения повышения эффективности. Лингвистические переменные могут быть дополнены
необходимым количеством нечетких терм-множеств. Для достижения более эффективных
результатов работы узла подогрева газа на ГРС. Предлагаемая нечеткая система управлением
и контролем узла подогрева газа может быть организована на традиционных языках
программирования логического контроллера как часть общей системы управления ГРС.
В данной работе подробно описана модель автоматического управления системы
контроля над узлом подогрева газа на газораспределительных станциях магистральных
газопроводов. Модель основана на применении аппарата нечетких множеств и нечеткой
логики. В работе представлена структура модели, которая построена на выше изложенных
принципах. В основу алгоритма управления узлом подогрева газа на ГРС положено
применение двойного алгоритма Мамдани. Первая база правил для алгоритма Мамдани
используется для нахождения желаемого интервала значений теплоемкости подогреваемого
газа, а вторая база правил осуществляет выбор интервала тепловой производительности узла
подогрева газа.
222СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Литература
1. Ваганова Н.В., Портников Б.А., Султанов Н.З., Любимов И.И. Управление
функциональными процессами городских пассажирских перевозок // Интеллект. Инновации.
Инвестиции. 2009. № 2. С. 49-56.
2. Вишневская Н.С., Исупова Е.В. Эксплуатация газораспределительных систем.
Решение типовых задач. Методические указания. Ухта: УГТУ, 2014. 54 с.
3. Даев Ж.А. Автоматизированная система контроля сведения баланса газа на основе
методов нечеткой логики // Вестник МГТУ «Станкин». 2018. Т. 46. № 3. С. 131-135.
4. Данилов А.А. Автоматизированные газораспределительные станции: Справочник.
СПб.: Химиздат, 2004. 544 с.
5. Пегат А. Нечеткое моделирование и управление. М.: Бином. Лаборатория знаний,
2013. 798 с.
6. Ярушкина Н.Г. Основы нечетких и гибридных систем. М.: Финансы и статистика,
2009. 320 с.
© Шопанова Г.Е., Султанов Н.З., 2024
223СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 622.691
Юрченко С.А.
аспирант
Пензенский государственный университет
г. Пермь, Россия
ОПРЕДЕЛЕНИЕ АРХИТЕКТУРЫ
ДЛЯ ОБНАРУЖЕНИЯ И КЛАССИФИКАЦИИ АРИТМИИ
Аннотация. В статье описана архитектура для определения типа аритмии по
двумерному массиву данных или же отсутствие аритмии в этих данных.
Ключевые слова: нейросеть; кардиология; аритмия.
Определение типа аритмии по электрокардиограмме с помощью нейронных сетей
является очень актуальной темой. Ведь аритмия является серьезным сердечным заболеванием
и даже может привести к летальному исходу [1]. Ранняя диагностика этих состояний может
спасти жизнь пациента или улучшить прогнозы по его заболеванию.
Современная медицина все больше и больше интегрирует технологии искусственного
интеллекта в свою практику. В некоторых случаях, машины могут обрабатывать и
анализировать данные гораздо быстрее и эффективнее, чем человек. Особенно важна ранняя
диагностика, когда нейросеть может увидеть признаки заболевания, а человек нет.
В области кардиологии, способность обученных искусственных нейронных сетей
распознавать аномалии в электрокардиограмме [4] (ЭКГ) уже применяется на практике и
помогает врачам скорее и точнее ставить диагнозы [1]. Эффективное использование этих
технологий может повысить качество и доступность медицинской помощи, сократив время
диагностики и увеличив количество успешно вылеченных пациентов.
Цель данной статьи – описать архитектуру нейронной сети для определения типа
аритмии, определить плюсы и минусы архитектуры [5].
Архитектура нейронной сети для определения типа аритмии по электрокардиограмме
может быть построена на основе глубокого обучения (Deep Learning). Она может включать в
себя свёрточные нейронные слои, пулинг слои, полносвязные слои и слои нормализации.
Входные данные для данной нейронной сети являются сигналами, полученными с ЭКГ.
ЭКГ – график, отображающий электрическую активность сердца во времени [2]. Данные
представляют собой временный ряд [2], который представлен в виде двумерных массивов, с
указанием амплитуды сигнала в разные моменты времени.
Выходные данные обычно представляют собой классификационные метки. В данном
случае, метки отражают типы аритмии, которые может обнаружить нейронная сеть. Выходов
будет 6, по одному на каждый тип аритмии: тахикардия, брадикардия, пароксизмальные
нарушения, экстрасистолия, мерцательная и метка, отражающую отсутствие аритмии.
224СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Конкретно, модель может выглядеть так:
1. Слой входных данных [3]. Это первый слой, который передает данные в следующий
слой. Размерность входного слоя зависит от размерности входных данных (числа сенсоров *
число временных отсчетов).
2. Convolutional Layer 1 [3]. Сверточный слой со 128 фильтрами и функцией активации
ReLU. Занимается обработкой входных данных, применяя свертку с использованием фильтров
или ядер.
3. Max Pooling Layer 1 [3]. Самый обычный пулинг слой с окном 2х2. Этот слой
используется для уменьшения размерности данных, чтобы уменьшить объем вычислений и
бороться с переобучением.
4. Convolutional Layer 2 [3]. Снова сверточный слой, уже с 256 фильтрами и такой же
функцией активации.
5. Max Pooling Layer 2 [3]. Пулинг слой, как и предыдущий.
6. Dense Layer 1 [3]. Полносвязный слой на 1024 нейрона с функцией активации ReLU.
Является слоем, в котором все входы связаны со всеми весами и передаются через функцию
активации.
7. Dropout Layer [3]. Слой дропаута для регуляризации с коэфициентом 0.5, который
помогает избежать переобучения. Во время обучения он случайным образом отключает
заданный процент нейронов, что приводит к тому, что в процессе обучения нейронная сеть не
может полностью полагаться на какой-либо один нейрон.
8. Output layer [3]. Последний слой – обычный Dense слой с функцией активации softmax.
Количество нейронов должно соответствовать количеству классов (по одному нейрону на
каждый тип аритмии). Функция активации softmax на этом слое позволяет представить
выходные значения в виде вероятности принадлежности к одному из классов, где сумма всех
выходных значений равна 1.
Важно заметить, что размеры окон свёртки, размеры пулингов, количество нейронов
полносвязных слоёв, размеры слоев и функции активации могут изменяться в зависимости от
задачи, и подбираются исходя из характера входных данных и требований к точности и
скорости модели.
Обучение данной модели могло бы проходить методом стохастического градиентного
спуска или любым другим алгоритмом обратного распространения ошибки [3]. Оценка
точности работы могла бы считаться по показателю accuracy, F1-score, или матрице ошибок в
зависимости от задачи [3].
Следует отметить, что перед обучением модели, данные электрокардиограммы должны
быть предобработаны и нормализованы.
Плюсы:
1. Сверточные слои [3]: они позволяют сохранить пространственную информацию о
данных. В случае с ЭКГ, эта информация важна, поскольку форма волны [2], ее амплитуда и
другие характеристики могут помочь определить аритмию.
225СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2. Max Pooling слои [3]: позволяют уменьшить размерность данных, что используется
для снижения вычислительных требований и контроля переобучения.
3. Dense Layer [3]: позволяет сети обучаться на нелинейных функциях и может выучивать
сложные шаблоны.
4. Dropout слой [3]: это эффективная техника регуляризации предотвращения
переобучения.
5. Softmax функция активации [3]: она позволяет классифицировать данные по много
классов, что идеально подходит для задачи определения типа аритмии.
Минусы:
1. Выбор количества фильтров: количество фильтров в сверточных слоях выбрано
произвольно и может не быть оптимальным для данной задачи.
2. Отсутствие нормализации по батчам: нормализация по батчам может ускорить
обучение и сделать его более стабильным.
3. Отсутствие регуляризации в сверточных слоях: хотя есть слой Dropout, некоторая
регуляризация, например l1 или l2, также могла бы быть полезной в сверточных слоях.
4. Однослойный полносвязный (Dense) слой [3]: в зависимости от сложности данных,
может быть необходимым добавить больше полносвязных слоев.
5. Отсутствие детальной настройки: Эту конкретную архитектуру сети можно еще
существенно улучшить [5], добавив другие методы, такие как увеличение данных, ранняя
остановка или более сложные методы оптимизации.
В заключение можно сказать, что была описана архитектура для определения типа
аритмии по двумерному массиву данных, или же отсутствие аритмии в этих данных. В
дальнейшем можно провести опыты и посмотреть, насколько эффективна данная архитектура
нейронной сети. Важно заметить, что хотя искусственные нейронные сети могут быть очень
эффективными в задачах классификации, они не заменяют профессиональную медицинскую
экспертизу. Они служат в качестве вспомогательного инструмента для врачей, помогая
сделать процесс диагностики более точным и быстрым.
Литература
1. Киякбаев Г.К. Аритмии сердца. Основы электрофизиологии, диагностика, лечение,
современные рекомендации. М.: ГЭОТАР-Медиа, 2014. 240 с.
2. Омельченко В.П., Демидова А.А. Медицинская информатика. Руководство к
практическим занятиям, ГЭОТАР-Медиа, 2018. 384 с.
3. Ростовцев В.С. Искусственные нейронные сети. СПб.: Лань, 2019. 216 с.
4. Струтынский А.В. Электрокардиограмма. Анализ и интерпретация. 18-е изд. М.:
МедПресс-Информ, 2016. 224 с.
5. Хайкин C. Нейронные сети. Полный курс. М.: Вильямс, 2019. 1104 с.
© Юрченко С.А., 2024
226СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
МОДЕЛИРОВАНИЕ БАЗ ДАННЫХ. БОЛЬШИЕ ДАННЫЕ
УДК 004.65
Татарникова Т.М.
д-р техн. наук, профессор
Архипцев Е.Д.
аспирант
Санкт-Петербургский государственный электротехнический
университет «ЛЭТИ» им. В.И. Ульянова (Ленина)
г. Санкт-Петербург, Россия
ОПТИМИЗАЦИЯ ХРАНЕНИЯ ДАННЫХ ИНФОРМАЦИОННОЙ СИСТЕМЫ
ОБМЕНА СООБЩЕНИЯМИ
Аннотация. В современном мире информационные системы для обмена данными
занимают лидирующие позиции среди всех ресурсов. Самые популярные из них
обрабатывают сотни миллионов сообщений ежедневно. Это вызывает высокую нагрузку на
СУБД. Именно поэтому выбор конкретной СУБД так важен. В работе сравниваются Mongo
DB и Cassandra DB в областях, связанных с масштабированием и сегментацией на примере
ресурса для обмена сообщениями.
Ключевые слова: СУБД; Mongo DB; сегментация данных; масштабируемость;
Cassandra DB; ключ кластеризации.
В данной работе будут рассмотрены причины перехода и сам переход с СУБД Mongo DB
на Cassandra DB. Также будут рассмотрены требования к СУБД для большой информационной
системе на примере системы обмена сообщениями.
Для ИС сперва была выбрана база данных Mongo DB, поскольку она является
лидирующей СУБД для быстрого выполнения итераций. Гибкая система хранения
информации, масштабируемость, сегментирование и репликация позволяет удобно работать с
данными и обслуживать большие ИС (https://clck.ru/39hBJL).
Однако большое число сообщений и данных создают следующую проблему: данные и
индексы больше не помещаются в оперативную память, соответственно задержки становятся
непредсказуемыми. Это происходит из-за того, что MongoDB хранит индексы в ОЗУ. В том
случае, если в ОЗУ больше нет места, СУБД будет читать индексы с диска, что повышает
время выполнения запроса (https://clck.ru/39hBJL).
Рассмотрим, как выглядит сегментация данных в MongoDB. Сперва выделим основные
составляющие сегментного кластера:
Сегмент. Сегментный кластер распределяет данные по сегментам. Сегмент хранит
некую часть всего множества данных (https://clck.ru/39hBM2).
Маршрутизатор mongos. Диспетчер, который служит для связывания всех сегментов в
единому целому. Используется для перенаправления операций чтения и записи на
подходящий сегмент. Важно отметить, что данный элемент системы не хранит данные.
227СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Конфигурационный сервер. Поскольку mongos не сохраняет данные, этим занимаются
конфигурационные сервера, которые отвечают за хранение метаданных кластера,
местоположение каждой базы данных, информацию об изменениях и т. д.
(https://clck.ru/39hBM2).
MongoDB был разработан для поддержки горизонтального масштабирования и
эластичности посредством сегментирования. Сегментированный кластер состоит из
множества наборов реплик, каждый из которых содержит часть коллекции. Распределение
данных определяется ключом сегментирования и конфигурацией сегментирования.
Разработчик имеет возможность выбирать ключ сегментирования и тип сегментирования,
который он хочет использовать (диапазон, хэш и т. д.). Кроме того, посредством
сегментирования зон данные могут быть связаны с определенной группой шардов в
соответствии с концепцией равномерного распределения [1, с. 258-266]. В MongoDB 5.0
реализована возможность изменения сегментов в реальном времени, которая позволяет менять
ключи сегментов без простоев, что позволяет эволюционировать распределению данных
вместе с меняющимися потребностями приложения.
Рис. 1. Диаграмма высокого уровня шардинга MongoDB
Для больших объёмов данных необходимо оптимизация СУБД. Именно в такой
ситуации прибегают к сегментации коллекции и распределения операций чтения и записи.
Каждый документ в MongoDB прикрепляется к диапазону посредства сегментного ключа.
Сегментный ключ состоит из комбинации одного или нескольких полей.
Для больших коллекций наступает проблема: объём данных превысил объем ОЗУ.
Постепенное добавление серверов в конечном счёте приведёт к замедлению
производительности, а задержки станут непредсказуемыми [5, с. 279-282].
Опишем проблемы хранения данных в большой информационной системе,
предназначенной для обмена сообщениями:
1. Невозможность определения частоты выполнения чтения и записи. Именно поэтому
нельзя сказать, какая операция будет выполняться чаще или реже.
228СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2. В случае групп или сообществ, делающих акцент на голосовых или видео
коммуникациях, количество сообщений может не превышать 1000 за год. Таким образом
выгрузка последних 50 сообщений повлечет к множеству случайных запросов на диске,
вызывающих чтение данных не с ОЗУ.
3. Диалоги с большим количеством участников и сообщений затрагивает в основном
именно последние сообщений. Они кэшируются и находятся в кэше диска.
Исходя из проблематики можно выделить требования к новой СУБД:
1. Линейная масштабируемость. Отсутствие придела, при котором добавление нового
сервера к кластеру не принесёт результатов [4].
2. Низкие затраты на обслуживание. Простота в настройке и добавлении новых узлов.
3. Предсказуемая производительность. Время запросов (всех или почти всех) не
должно превышать установленный предел. Отсутствие надобности кеширования запросов на
промежуточном ПО также поможет упросить систему [2].
Исходя из требований, описанных выше, можно выделить Cassandra DB. Данная СУБД
позволяет быстро и легко добавлять узлы для масштабирования. Также она может терпеть
потерю узлов без какого ли влияния на приложение.
Сделав такой выбор, необходимо доказать, что это действительно работает.
Cassandra DB можно описать как KKV хранилище (отличает от привычного нам
Key/Value хранилища). Первичный ключ K всегда состоит из двух ключей: первый является
ключ раздела, который показывает к какому узлу относятся данные и где они находятся на
диске. Сам раздел включает в себя множество строк, и эта строка идентифицируется вторым
ключом K и является ключом кластеризации. Ключ кластеризации действует как первичный
ключ внутри раздела, а также может использоваться в качестве элемента для сортировки
строк. Например, в случае сообщений в качестве первого ключа можно выбрать
идентификатор чата (chat_id), а в качестве второго ключа идентификатор сообщения
(message_id). Хотя схема Cassandra очень напоминает реляционную базу данных, их дешево
изменять, и они не оказывают какого-либо влияния на производительность.
Какую проблему можно выделить, когда у нас появляются разделы большого объёма:
большая нагрузка на CasandraDB при сжатии раздела, невозможность кластеризации
большого раздела.
Для решения данной проблемы добавим новую прослойку под названием корзина
(bucket_id) в которую будем помещать сообщения за N период времени. В зависимости от
величины проекта, величину N необходимо подобрать самостоятельно. На текущий момент
оно не должно превышать 2 Гб.
Теперь для получения последних сообщения в чате мы запрашиваем сообщения от
текущего времени до времени создания чата (это ещё одна возможность оптимизации, которая
позволяет вовремя остановиться и не перебирать все разделы). Затем вы выбираем
последовательно все разделы, пока не будет получено нужно число сообщений или выборка
будет завершена. Из данного утверждения можно сделать вывод, что текущее решение будет
оптимально для крупных чатов с большим количество сообщений, поскольку их сообщения
229СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
будут лежать в последних (или первом) разделе. Однако для сообществ, где сообщения редко
встречаются – данный способ наоборот будет не эффективный, поскольку придется затратить
большее время на перебор.
Рис. 2. Схема кластеризации данных Cassandra Cluster
Проведем сравнение этих двух СУБД:
Модель данных
Cassandra использует модель данных с широкими столбцами, более близкую к
реляционным базам данных.
MongoDB полностью отходит от реляционной модели, храня данные в виде документов.
Доступность
Для обеспечения распределения реплик в кольце Cassandra используется коэффициент
репликации, который устанавливается на уровне пространства ключей. Этот коэффициент
может быть настроен пользователями. Однако в производственной среде требуются
дополнительные архитектурные решения, так как необходимо определить «стойки
доступности» и связать репликацию с различными стойками для предотвращения сбоев.
Каждый узел Cassandra действует как раздел для одного набора данных и реплицирует другие,
что приводит к использованию механизмов согласованности и координации для управления
распределением данных между узлами. Некоторые из этих механизмов, такие как
восстановление чтения, могут вызывать проблемы с производительностью и временно
блокировать записи для репликации.
Mongo DB использует один первичный узел и несколько узлов-реплик. В сочетании с
сегментированием MongoDB обеспечивает высокую доступность и масштабируемость.
230СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Масштабируемость
Cassandra использует алгоритм распределенного хэширования, называемый
последовательным хэшированием, чтобы определить, какой узел отвечает за определенное
значение данных. Cassandra также поддерживает виртуальные узлы, которые позволяют
одному физическому узлу иметь несколько диапазонов данных [3, с. 171].
Напротив, MongoDB использует ключи сегментирования, чтобы определить, куда может
попасть значение данных. Администраторы баз данных могут определить ключи
сегментирования для распределения данных на разделы. Данные можно разделить на основе
таких факторов, как географическое положение, алфавитный порядок или любая другая
система, наиболее эффективная для вашего набора данных.
Поддержка разделов
Согласованный алгоритм хэширования, меньший контроль со стороны пользователей.
Пользователи определяют ключи сегментирования и имеют больший контроль над
разбивкой на разделы.
Вывод. Из-за высокой надежности и распределенной архитектуры Cassandra становится
привлекательным выбором для обеспечения высокой доступности в системах. MongoDB, с его
способностью обрабатывать неструктурированные данные через документоориентированный
подход, оказывается полезным в средах, где данные постоянно изменяются. Поэтому, если мы
разрабатываем систему обмена сообщениями и важна быстрая обработка запросов, Cassandra
предпочтительнее MongoDB. Однако, следует отметить, что Cassandra, как NoSQL база
данных, не поддерживает ACID и реляционную модель. Поэтому, если у нас есть строгие
требования к ACID, необходима богатая модель данных и гибкость схемы, то Cassandra может
не быть оптимальным выбором.
Литература
1. Бэнкер К. MongoDB в действии. М.: ДМК Пресс, 2012. 396 с.
2. Галигузова Е.В. Илларионова Ю.Е. Сравнение реляционных и нереляционных СУБД
// Символ науки. 2023. №1-2. С. 14-17.
3. Карпентер Д., Хьюитт Э. Cassandra. Полное руководство. М.: ДМК Пресс, 2017. 400 с.
4. Логачева Н.В. Пузырева К.С. Ладонычева М.Л. Масштабируемые распределенные
хранилища. Cassandra или HBase? // Инновационная наука. 2022. №3-1. С. 6-8.
5. Bradshaw S., Eoin B., Kristina C. MongoDB: The Definitive Guide. 3rd Edition. Sebastopol:
O’Reilly Media, Inc, 2020. 327 с.
© Татарникова Т.М., Архипцев Е.Д., 2024
231СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.65
Мамедли Р.Э.
канд. физ.-мат. наук, доцент
Нижневартовский государственный университет
г. Нижневартовск, Россия
ПРИМЕНЕНИЕ ГОРИЗОНТНЫХ ЗАПРОСОВ ДЛЯ БОЛЬШИХ ДАННЫХ
Аннотация. Из многомерного набора данных горизонтный запрос извлекает данные,
которые удовлетворяют многочисленным условиям, заданным пользователем. Задача при
применении горизонтного запроса состоит в том, чтобы получить данные в оптимальное
время. Когда наборы данных огромны, проблема становится критической. В этой статье
рассматривается именно эта проблема, уделяя особое внимание большим данным. Для этого
используются корреляции, наблюдаемые в пользовательских запросах. Эти корреляции и
результаты запросов исторических линий горизонта, выполненных на одном и том же наборе
данных, очень полезны для оптимизации времени отклика при дальнейших вычислениях
линий горизонта. В данной статье представляется новый метод для подтверждения
эффективности этой концепции в отношении больших данных. Также представляется
временной и пространственный анализ предлагаемого метода. Полученные
экспериментальные результаты подтверждают эффективность предложенного метода.
Ключевые слова: горизонтные запросы; связанные запросы; профилирование запросов.
Горизонтные запросы – специальные типы запросов на получение данных, которые
принимают множество пользовательских предпочтений и возвращают наиболее подходящие
объекты. Следовательно, эти запросы имеют широкий спектр приложений в системах
поддержки принятия решений. В отличие от многих других систем поддержки принятия
решений, которые используют математические модели, функции кумулятивной оценки,
интеллектуальный анализ данных или статистический анализ, горизонтные запросы более
понятны конечным пользователям. В качестве примера предположим, что человеку,
желающему арендовать дом, необходимо найти все возможные дома, где арендная плата
минимальна, расстояние до близлежащих школ минимально и расстояние до близлежащих
больниц также минимально. В результате генерируется горизонтный запрос домов с
минимальной арендной платой, минимальным расстоянием до школ и больниц. Из связанного
большого набора данных возвращаются желаемые данные, которые удовлетворяют
предпочтениям пользователя. Задача принятия решений упрощается при использовании
линии горизонта.
Чтобы наилучшим образом удовлетворить требования пользователя, наборы данных
содержат все больше и больше данных, и, следовательно, они огромны по таким факторам,
как кардинальность и количество измерений. По мере роста числа пользовательских
предпочтений увеличивается время ответа на запросы линий горизонта, и наборы данных
запрашиваются в большом объеме, что влияет на время ответа при общем вычислении линий
горизонта. Данная статья посвящена именно этим вопросам и фокусируется на оптимизации
времени отклика расчета линии горизонта с учетом практических наблюдений, упомянутых
выше. В данной статье вносится следующий вклад:
232СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
1. Представляется новый метод для вычисления горизонта коррелированных запросов.
2. Представляется временной и пространственный анализ, основанный на полученных в
ходе работы экспериментальных результатах и подтверждающий эффективность
предлагаемого метода.
Далее дается краткий обзор методов параллельных вычислений на горизонте, подробно
описываются ошибки предложенного метода, обсуждаются экспериментальные работы,
анализируются время и пространство. Заключительный раздел посвящен выводам, сделанным
в результате экспериментов, и возможным расширениям этой работы в ближайшем будущем.
Предыстория и связанные работы. С. Боржсони и др. предложили метод горизонтных
запросов и оператора горизонта [2]. Поскольку наступила эпоха централизованных
вычислений, все развивавшиеся алгоритмы были ориентированы на централизованный
единый набор данных для обработки запросов. Различные разработанные методы включают
такие алгоритмы, как BNL и D&C [2], сканирующие весь набор данных для создания линий
горизонта. Чтобы уменьшить нагрузку на полное сканирование набора данных,
использовались алгоритмы, которые предварительно обрабатывают наборы данных с
использованием сортировки и разделения данных, такие как SFS [5], LESS [11], SaLSa [12], а
также растровые алгоритмы [7]. Эффективным алгоритмом для централизованной среды был
BBS [8]. После появления концепции интеллектуального анализа данных, чтобы добиться
схожей эффективности для технологии вычислений на горизонте, были предложены методы,
как SkyCube [3; 6; 9;], графики горизонта [4] и CSC [10].
Во всех рассмотренных статьях ни в одной исследовательской работе не использовались
корреляции, наблюдаемые в запросах горизонта, заданных пользователями. В предложенном
методе, во-первых, анализируется корреляции в пользовательских запросах для обслуживания
последующих коррелированных запросов горизонта – эффективно поддерживаемых и
правильно индексированных структур данных. Во-вторых, метаданные предварительно
выполненных запросов горизонта эффективно сокращают или минимизируют
вычислительные усилия последующих коррелированных запросов горизонта. В отличие от
подходов, которые имеют тенденцию использовать сложные структуры индексации памяти
или данных, подход в данной статье представляет собой гораздо более простое и эффективное
решение, которое улучшает время отклика при общем вычислении горизонта.
Представленный метод также свободен от каких-либо требований к предварительной
обработке данных.
В следующем разделе предложенный подход обсуждается подробно.
Метод горизонтных запросов
В этом разделе подробно описан предлагаемый метод. В предстоящих обсуждениях
делаются следующие предположения:
(1) пользователи запрашивают один большой набор данных,
(2) минимальный тип ограничений (например, минимальная арендная плата, расстояние
и т.д.) устанавливается пользователями, и
233СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
(3) следующее уточнение предполагает, что терминальный запрос относится к запросу
линии горизонта.
Следующий шаг – понять, как обрабатываются коррелированные запросы. Это
обсуждается дальше.
Обработка коррелированных горизонтных запросов
Когда на наборе данных выполняется большое количество запросов, высока вероятность
того, что измерения запроса перекрываются и, следовательно, создают корреляцию друг с
другом и с ранее выполненными горизонтными запросами на том же набору данных. Эти
корреляции могут быть одного из следующих типов:
(1) точная корреляция: размеры текущего запроса точно такие же, как у некоторого
предыдущего запроса,
(2) корреляция подмножества: измерения текущего запроса являются подмножеством
измерения некоторых предварительно выполненных запросов,
(3) частичная корреляция: измерения текущего запроса являются подмножеством одного
или нескольких предварительно выполненных запросов, и к запросу также добавляются новые
измерения,
(4) новая корреляция: размеры текущего запроса не совпадают с измерениями ни одного
из исторических запросов.
Предложенный метод коррелирует каждый запрос, созданный пользователем, с
предварительно выполненными запросами строго в указанном порядке, прежде чем он будет
рассмотрен для дальнейших вычислений. Теперь давайте обсудим, как обрабатываются
коррелированные запросы для расчета линий горизонта.
Точная корреляция: линия горизонта для последующего запроса, имеющего точный
тип корреляции, возвращается немедленно путем возврата линии горизонта того запроса, с
которым текущий запрос имеет точный тип корреляции. Доступ к набору данных
исключается, а усилия по повторным вычислениям полностью сводятся на нет.
Корреляция подмножества. Если последующий запрос имеет тип корреляции
подмножества, то его линия горизонта присутствует в линиях горизонта ранее выполненных
запросов, с которыми текущий запрос имеет корреляцию подмножества. Пересечение этих
горизонтов родительских запросов служит линией горизонта текущего запроса. Опять же,
доступ к наборам данных и усилия по повторным вычислениям полностью игнорируются.
Частичная корреляция. Если последующий запрос имеет частичный тип корреляции,
то линия горизонта изображается, как описано ниже. Исходным набором называются линии
горизонта предварительно выполненных запросов, с которыми частично коррелирует
текущий запрос. Запрос может иметь частичную корреляцию с несколькими ранее
выполненными запросами. В этом сценарии объединение линий горизонтов всех таких
предыдущих запросов, с которыми текущий запрос имеет частичную корреляцию, формирует
исходный набор, который помогает дальнейшим вычислениям. Кроме того, частично
коррелированный запрос может содержать новое измерение или набор новых измерений,
которые не ограничены измерениями любого из предыдущих запросов, с которыми он
234СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
частично коррелирует. Это требует сканирования набора данных. Однако первое окно,
содержащее кортежи фильтрации, используется исходным набором, и это помогает ускорить
дальнейшие вычисления.
Новая корреляция. Если последующий запрос имеет новый тип корреляции, то его
линия горизонта вычисляется с использованием любого из алгоритмов вычисления линии
горизонта, поскольку она не вычислялась ранее. Доступ к набору данных, очевидно,
обязателен.
Эта разработка подчеркивает тот факт, что, если контуры исторических запросов
сохраняются, такие метаданные о запросах лучше всего подходят для запросов,
коррелированных либо точной корреляцией, либо корреляцией подмножества, поскольку
сканирование набора данных полностью исключается. А для частично коррелированных
запросов метаданные помогают ускорить вычисления.
И со временем, когда непрерывные запросы выполняются к одному и тому же набору
данных, запросы, которые были коррелированы либо частичной, либо новым типом
корреляции, могут коррелировать с точной корреляцией или корреляцией подмножества, и в
результате их горизонты могут обслуживаться относительно быстрее. Итак, приходим к
выводу, что структура, которая хранит статистику каждого запроса, выполняемого системой,
очень полезна для импровизации времени ответа при общих вычислениях линии горизонта,
связанных с набором данных. Такой структурой данных является SkylineStructure (SS).
Структура SS:
SS = {QId, Att, S, Sb, Pr и Qf.}
где
QId: уникальный числовой идентификатор для каждого запроса,
Att: набор измерений, присутствующих в запросе, который оказывается полезным при
поиске корреляций,
S: линия горизонтного запроса,
Sb: набор идентификаторов запросов, с которыми текущий запрос имеет тип
подмножества корреляции,
Pr: набор идентификаторов запросов, с которыми текущий запрос имеет частичный тип
корреляции,
Qf: указывает частоту появления каждого запроса.
SS поддерживается машиной, принимающей запросы, и эффективно управляется
посредством хеш-индексации и сортировки, как описано в [1]. Предлагаемый метод основан
на SS и обсуждается в следующем разделе.
Обзор метода
Предлагаемый метод направлен на оптимизацию времени ответа при вычислении линии
горизонта путем использования концепции SS и корреляций, наблюдаемых в запросах линии
горизонта. На рисунке 1 представлен обзор предлагаемой техники.
235СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Этот метод работает на машине или сервере, где содержится большой набор данных D,
который получает запросы от пользователей о горизонте. Машина или сервер также
поддерживают SS и метаданные всех горизонтных запросов.
Рис. 1. Обзор метода
При поступлении запроса находится корреляция этого текущего запроса с
существующими запросами в SS. В зависимости от типа наблюдаемой корреляции этапы
расчета линии горизонта различаются. Для корреляций точного типа и типа подмножества
доступ к набору данных полностью исключается, поскольку их линии горизонта
обслуживаются из SS. Это приводит к экономии усилий по повторным вычислениям, и линии
горизонта немедленно возвращаются пользователям. Для частичного типа корреляций
идентифицируются связанные с ними родительские запросы и вычисляется начальный набор
IS, как объяснялось ранее, что помогает ускорить вычисления и сократить вычислительные
усилия. С помощью IS и D пользователю возвращается линия горизонта. Наконец, новый тип
корреляции обеспечивается путем доступа к D.
Этот метод улучшает время ответа при общем вычислении линии горизонта для
коррелированных запросов линии горизонта, возникающих в отношении D. Эффективность
метода подтверждена экспериментальными результатами. Они обсуждаются в следующем
разделе.
Экспериментальная работа и анализ
В этом разделе подробно описаны проведенные экспериментальные работы и
аналитическая часть. Всего было проведено два эксперимента по оценке производительности
предложенного метода. Первый оценивает метод по параметру скорости, а второй –
требования к памяти.
Экспериментальная работа
Для проведения экспериментов использовалась конфигурация процессора Intel Core i7
3.10 ГГц, 16 ГБ ОЗУ и среды Windows 11. Для этой работы был использован большой набор
данных высокоэнергетического проекта под названием STAR. Набор данных доступен по
236СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
адресу https://sdm.lbl.gov/fastbit/data/samples.html. В экспериментах использовались
следующие термины: n, мощность набора данных – количество кортежей в наборе данных; d,
количество измерений набора данных; Q, количество запросов, выполненных к набору
данных. Всего было проведено два эксперимента. В первом эксперименте наблюдается
влияние на время ответа изменения количества запросов, а во втором оценивается
эффективность памяти. Эксперименты включают сравнение двух методов:
(1) NQP: этот метод вычисляет горизонт всех пользовательских запросов без проверки
корреляций между запросами и без использования SS.
(2) SS: реализация предложенного метода. В обоих методах используется алгоритм
расчета линии горизонта BNL. Полученные результаты показаны на рис. 2.
Рис. 2. Изменение времени ответа в зависимости от количества запросов
Рис. 3. Эффективность методов
237СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Наборы параметров для этого эксперимента: n = 100000 и d = 5. Параметр Q варьируется
от 1000 до 5000. Всего использовано 28,6 % новых запросов. Наблюдения подтверждают
оптимальную производительность метода SS, демонстрируя выигрыш во времени отклика на
86%. Этот выигрыш высок, поскольку, когда к одному и тому же набору данных создается
очень большое количество запросов, в пользовательских запросах наблюдается очень тесная
корреляция. Корреляции в пользовательских запросах хорошо используются для достижения
оптимального времени ответа.
Целью второго эксперимента было изучение требований к памяти для двух
вышеупомянутых методов. Наборы параметров для этого эксперимента: n = 100000 и d = 5.
Параметр Q варьируется от 50 до 400. Полученные результаты показаны на рис.3.
Замечено, что для метода SS требования к памяти намного меньше, чем для метода NQP.
Это связано с тем, что метод SS использует предложенный метод, который эффективно
поддерживает метаданные о пользовательских запросах.
Таблица 1
Временные и пространственные сложности методов
Метод NQP SS-метод
Временная сложность О(п∙q) О(n∙(q + q )) + O(q + q)
n p e s
Пространственная сложность О(q∙S) О((q +q +q ) S ) + O(S )
s n p s qp qp
С другой стороны, метод NQP рассматривает каждый запрос как новый и многократно
вкладывает средства в память. Когда к одному и тому же набору данных создается большое
количество запросов, очень высока вероятность того, что новые запросы действительно будут
классифицированы как точные, подмножества или частичные запросы, и, в свою очередь,
подмножество и частичные запросы будут повторяться. При возникновении такого сценария
требования к памяти больше не предъявляются. Метод SS после линейного сдвига
продемонстрировал устойчивое поведение, как показано на рис. 3.
Выводы, сделанные в результате этих экспериментов, были проанализированы далее.
Анализ
Для анализа рассмотрим следующие термины:
n: общее количество кортежей,
q: общее количество горизонтных запросов, выполненных к набору данных,
qn: количество новых корреляций,
qe: количество точных корреляций,
qs: количество подмножества корреляции,
qp: количество частичных корреляций,
Ss: размер сгенерированных линий горизонта,
Sqp: размер SS для связанного одиночного запроса.
Наблюдения, полученные в результате экспериментов, суммируются в таблице 1.
Согласно наблюдениям, упомянутым выше, обнаружено, что
q = q + q + q + q
n е с п
и
238СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
q «(q + q + q )
n е с p
и благодаря эффективной стратегии управления SS,
S < С .
qp с
Когда к набору данных применяется большой объем запросов, все больше и больше
запросов, заданных пользователями, коррелируются, и предлагаемый подход обеспечивает
лучшую производительность как во времени, так и по пространству. С помощью этих
практических наблюдений обоснована эффективность предлагаемой методики.
Выводы и возможные будущие расширения этой работы подробно описаны в последнем
разделе.
Заключение. Предлагаемый метод использует тот факт, что в пользовательских запросах
существуют корреляции, и они очень полезны для предотвращения или минимизации усилий,
связанных с вычислением линии горизонта. Когда к набору данных поступает большое
количество запросов, в пользовательских запросах наблюдается более тесная корреляция. Эти
корреляции поддерживаются SS. Оба этих факта идут на пользу методу. Полученные
результаты обнадеживают и подтверждают эффективность предложенной методики.
В ближайшем будущем у нас есть планы расширить эту работу, включив в нее
практические факты, такие как параллельные обновления набора данных, различные типы
линий горизонта, требуемые пользователем (например, top-k или обратные линии горизонта),
реализацию метода на многоядерных процессорах и т. д.
Литература
1. Мамедли Р.Э. Системы управления базами данных. Нижневартовск: Изд-во
Нижневарт. гос. ун-та, 2021. 214 с.
2. Borzsony S., Kossmann D., Stocker K. The skyline operator // Proceedings 17th international
conference on data engineering. IEEE. 2021. Pp. 421-430
3. Chen L., Cui B., Lu H., Xu L., Xu Q. iSky: Efficient and progressive skyline computing in a
structured P2P network // The 28th International Conference on Distributed Computing Systems.
IEEE. 2008. Pp. 160-167
4. Choi W., Liu L., Yu B. Multi-criteria decision making with skyline computation // 2012 IEEE
13th International Conference on Information Reuse & Integration (IRI). 2012. Pp. 316-323.
https://doi.org/10.1109/IRI.2012.6303026
5. Godfrey P., Shipley R., Gryz J. (2005). Maximal Vector Computation in Large Data Sets //
Very Large Data Bases Conference. 2005. Pp. 229-240
6. Jensen Ch.S., Lu H., Ooi B.Ch. Skyline Queries Against Mobile Lightweight Devices in
MANETs // In Proceedings of the 22nd International Conference on Data Engineering (ICDE '06).
IEEE. 2006. P. 66-72. https://doi.org/10.1109/ICDE.2006.142
7. Lin J., Wei J. Constrained skyline computing over data streams // Proceedings IEEE
international conference on e-business, engineering. 2008. Pp 155–161
8. Wang S., Ooi B.C., Tung A.K., Xu L. Efficient skyline query processing on peer-to-peer
networks // 2007 IEEE 23rd International Conference on Data Engineering. 2007. Pp. 1126-1135.
239СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
9. Wang S., Vu Q.H., Ooi B.C., Tung A.K., Xu L. Skyframe: a framework for skyline query
processing in peer-to-peer systems // The VLDB Journal. 2008. №18. P. 345-362.
10. Woods L., Alonso G., Teubner J. Parallel computation of skyline queries // IEEE 21st
Annual International Symposium on Field-Programmable Custom Computing Machines. 2013. P. 1-
8.
11. Xia T., Zhang D. Refreshing the sky: the compressed skycube with efficient support for
frequent updates // Proceedings of the 2006 ACM SIGMOD international conference on Management
of data. 2005. Pp. 493-502.
12. Zheng W., Zou L., Lian X., Hong L., Zhao D. Efficient subgraph skyline search over large
graphs // Proceedings of the 23rd ACM International Conference on Conference on Information and
Knowledge Management. 2014. P. 1529-1538.
© Мамедли Р.Э., 2024
240СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.65
Мамедли Р.Э.
канд. физ.-мат. наук, доцент
Нижневартовский государственный университет
г. Нижневартовск, Россия
ГИБКИЕ ЗАПРОСЫ К РЕЛЯЦИОННЫМ БАЗАМ ДАННЫХ:
МЕТОД, ОСНОВАННЫЙ НА НЕЧЕТКОМ МНОЖЕСТВЕ
Аннотация. В статье представлен гибкий метод, основанный на нечетком методе
запросов к реляционным базам данных. Хотя было предложено множество способов
построения нечетких запросов, существует потребность в более гибком и простом методе.
Большинство ранее предложенных способов имеют следующий недостаток: они
интерпретируют любой оператор нечеткого запроса в четкий оператор запроса, а затем
оценивают полученные кортежи для вычисления степени их соответствия нечеткому запросу.
Основная цель предложенного в этой статье метода нечетких запросов состоит в том, чтобы
преодолеть вышеуказанный недостаток путем оценки каждого кортежа непосредственно за
счет использования хранимых объектов базы данных, а именно пакетов, процедур и функций.
Следовательно, время ответа на выполнение оператора нечеткого запроса будет сокращено.
Предлагаемый метод позволяет легко использовать нечеткие лингвистические значения во
всех предложениях оператора выбора. Дополнительным преимуществом является ускорение
выполнения операторов нечетких запросов.
Ключевые слова: нечеткий запрос; нечеткая логика; получение информации; нечеткий
SQL.
Язык структурированных запросов (SQL) – основной язык для запросов к реляционным
базам данных. Он извлекает четкие и точные данные, манипулирует ими. Но он не способен
отвечать на вопросы на естественном языке, которые являются неопределенными, неточными.
Запросы на естественном языке содержат много расплывчатости и двусмысленности из-за
использования субъективных выражений. Например, у высоких людей есть разные
определения, зависящие от каждого человека, который их ищет. Однако при применении
своих мыслей в виде запроса естественного языка к базе данных возникает множество проблем
из-за неэффективности СУБД для обработки таких запросов. Рассмотрим запрос «получить
имена и адреса студентов университета, рост которых близок к идеальному для
баскетболиста». Этот запрос не может быть выражен и обработан напрямую с помощью
традиционного оператора SQL. Напротив, его можно легко выразить и манипулировать им с
помощью оператора нечеткого запроса, основанным на идеях теории нечетких множеств. Хотя
классический SQL обладает большими возможностями выполнения запросов, ему не хватает
гибкости для поддержки запросов на естественных языках. Запросы на естественных языках в
основном зависят от манипулирования лингвистическими значениями, а не числовыми.
Лингвистические значения, такие как: низкий, высокий, горячий, нельзя обрабатывать как
значения атрибутов в стандартных операторах SQL. Более того, стандартный SQL использует
классические логические выражения с четкими логическими связями, слишком жесткими и
очень ограниченными в манипулировании лингвистическими значениями или
241СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
лингвистическими модификаторами, такими как: «около», «почти», «справедливо» и т. д.,
легко представимыми на основе концепции нечетких множеств.
Статья организована следующим образом: в разделе 2 представлены изученные работы
по нечетким запросам в базах данных. Предлагаемый метод нечетких запросов представлен в
разделе 3. В разделе 4 рассматривается разработанный инструмент, основанный на
предложенном методе, с иллюстративным практическим примером. Заключение сделано в
разделе 5.
Изученные работы по нечетким запросам в базах данных. В этом разделе
представлены несколько архитектур и приложений, которые были предложены и разработаны
для выполнения нечетких запросов к базам данных. К сожалению, большинство ранее
разработанных архитектур нечеткого SQL имеют ряд недостатков. Ранее предложенные
методы в [6; 8] неспособны работать с множеством субъективных мнений при взаимодействии
с несколькими пользователями. Вместо этого используются предпочтения, чтобы помочь
уменьшить объем информации, возвращаемой в ответ на запросы пользователей [1]. Также в
предложенных методах в [6; 8; 10], отсутствует стандартизированный формат написания
операторов, то есть каждый инструмент имеет свой синтаксис. С другой стороны,
большинство предложенных методов зависят в основном от использования трудоемкого
синтаксического анализатора/транслятора для проверки и преобразования нечетких запросов
в четкие запросы SQL, как в [8], [6] и [10]. Кроме того, такие методы определяют метабазу под
названием «Нечеткая база метазнаний», включающую в себя набор таблиц для хранения всей
необходимой информации для описания и управления нечеткими атрибутами и терминами [6].
К такой метабазе необходимо обращаться каждый раз, когда выполняется нечеткий запрос.
Эта операция необходима для получения определений каждого используемого нечеткого
термина и завершения обработки сгенерированного оператора нечеткого запроса, который
требует много времени [2; 3; 10]. Это замедляет процесс запросов, поскольку каждый
сгенерированный нечеткий запрос должен быть проанализирован и преобразован в
стандартный оператор SQL с учетом определений всех используемых нечетких терминов или
операторов, хранящихся в метабазе [4]. Кроме того, методы, предложенные в [2; 6; 10],
неэффективно обрабатывают вложенные и коррелированные нечеткие запросы [9].
Предложенный метод нечетких запросов. В этом разделе представлен метод нечетких
запросов, архитектура которого показана на рисунке 1. Его основная цель – создание и
обработка гибких запросов. Этот метод направлен главным образом на преодоление
недостатков, упомянутых в предыдущем разделе. Он имеет дело с несколькими
субъективными представлениями для нескольких пользователей и полностью зависит от
операторов Transact-SQL. Соответственно, все сгенерированные нечеткие запросы будут
совместимы со стандартным SQL без необходимости использования интерпретатора/парсера.
Предложенный метод позволяет генерировать операторы нечетких запросов с использованием
стандартного языка SQL. Соответственно, нечеткий термин можно легко использовать,
написав его имя пакета, за которым следует точка, а также имя функции или процедуры с
определенными параметрами, если это необходимо. С другой стороны, использование
242СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
процедурного языка, такого как Transact-SQL, обеспечивает более высокую
производительность, поскольку данные и запросы напрямую управляются и обрабатываются
СУБД без необходимости использования промежуточных программ [10]. Кроме того,
предлагаемый метод получит преимущества от использования Transact-SQL [2], которые
включают в себя:
 тесную интеграцию с SQL,
 высокая производительность за счет уменьшения трафика между приложением и
базой данных,
 переносимость в любой операционной системе,
 масштабируемость,
 управляемость,
 поддержка объектно-ориентированного метода.
Кроме того, использование языка программирования баз данных не страдает от
несоответствия, которое включает в себя [2]:
 Существование различий между языком программирования и моделями баз данных.
 Необходимость иметь привязку для каждого языка программирования, которая
определяет для каждого типа атрибутов совместимый тип языка программирования.
 Необходимость в привязке, которая отображает несколько наборов кортежей
результатов в соответствующую структуру данных, например набор записей или курсор.
Рис. 1. Архитектура предлагаемого метода нечетких запросов
Предлагаемый метод основан на идее нечеткого множества. Нечеткое множество
представляет собой множество с гладкими границами. Соответственно, теория нечетких
множеств обобщает классическую теорию множеств, допуская частичную принадлежность ее
элементов к множеству, и она была разработана для охвата областей, которые не могут быть
охвачены классической теорией множеств. Нечеткое множество A в универсальном
множестве U характеризуется функцией принадлежности μ , заданной формулой: μ :U →
A A
[0,1], а A определяется как набор упорядоченных пар: A = {(x,μ (x)):xϵU}, где μ (x) –
A A
243СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
функция принадлежности, определяющая степень принадлежности элемента x множеству A.
Обычно нечеткое подмножество непрерывного универсального множества определяется как
функция принадлежности. Функция принадлежности сопоставляет элемент в универсальном
множестве U с некоторым значением в интервале [0, 1], то есть μ :X → [0,1].
A
Полная принадлежность в нечетком множестве имеет значение 1, а значение 0 указывает
на исключение элемента из нечеткого множества. Принадлежность между 0 и 1 указывает на
частичную принадлежность в наборе. Как и традиционная теория четких множеств, теория
нечетких множеств включает в себя набор таких операций, как дополнение, пересечение и
объединение. Тем не менее, операции с нечеткими множествами не определены однозначно,
т.е. как функции принадлежности, они также зависят от контекста и пользователя.
Сценарий обработки предлагаемого метода. Предлагаемый метод нечетких запросов
направлен главным образом на поддержку запросов на естественном языке, которые содержат
лингвистические термины и нечеткие соединители. К таким лингвистическим терминам
относятся лингвистические переменные, лингвистические значения и нечеткие числа.
Предлагаемый метод расширяет возможности определения и манипулирования такими
лингвистическими терминами. Пользователь может легко определить свои собственные
лингвистические термины, которые могут быть стационарными или нестационарными,
используя подходящие нечеткие функции принадлежности, такие как треугольник, трапеция,
S-образная форма и т. д. Стационарные лингвистические термины имеют фиксированное
определение. С другой стороны, нестационарные лингвистические термины имеют
динамические определения, которые могут время от времени меняться, как «отличники».
Каждый определенный лингвистический термин будет сохранен как объект базы данных, а
именно сохраненная функция, в соответствующем сохраненном пакете. Как следствие,
пользователь может использовать любой из своих определенных лингвистических терминов в
любом предложении оператора выбора, как при использовании определенной пользователем
хранимой функции. Соответственно, определенные лингвистические термины можно легко
использовать даже в вложенных, сложных и коррелированных операторах запроса без
необходимости использования сложных процедур для выполнения оператора запроса.
Пользователь взаимодействует с инструментом через графический интерфейс
пользователя, чтобы определить собственные лингвистические термины, описывающие
предпочтения пользователя, такие как лингвистические переменные, лингвистические
значения, нечеткие соединители, нечеткие числа и хеджирование. Все языковые термины
пользователя будут храниться в виде объектов базы данных, запоминающих профиль
пользователя.
Инструмент генерирует операторы Transact-SQL, которые создают хранимые в базе
данных объекты (такие как пакеты, процедуры, функции, представления и т. д.) для
определенных лингвистических терминов. Эти объекты содержат описание лингвистического
термина вместо использования нечеткой метабазы знаний. Соответственно, выполнение
оператора нечеткого запроса не потребует доступа к дополнительной базе данных для
244СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
получения определений используемых лингвистических терминов. Следовательно,
предлагаемый метод экономит время обработки и сокращает время ответа.
Наконец, пользователь может написать оператор нечеткого запроса или сгенерировать
его с помощью инструмента построения запросов. Очевидно, что синтаксис нечетких запросов
идентичен стандартному языку SQL из-за использования хранимых объектов базы данных для
представления нечетких терминов. Другими словами, любой сгенерированный оператор
нечеткого запроса согласуется со стандартным языком SQL. Таким образом, анализатору или
интерпретатору нет необходимости сопоставлять оператор нечеткого запроса со стандартным,
а затем оценивать полученные кортежи с помощью дополнительных алгоритмов
манипулирования используемыми лингвистическими терминами.
Инструмент нечетких запросов на основе предлагаемого метода
В этом разделе описывается разработанный инструмент нечетких запросов, основанный
на предложенном методе.
Запуск службы НЛ. После успешного запуска инструмента пользователь может
определить свои собственные лингвистические термины через графический интерфейс.
Следовательно, каждый созданный сохраненный объект базы данных в рамках сеанса
пользователя становится частью нечеткого профиля пользователя. Кроме того, пользователь
может сгенерировать оператор нечеткого запроса, используя заранее определенные
лингвистические термины, и выполнить его.
Сервис лингвистических переменных. Этот сервис позволяет создавать, изменять или
удалять лингвистическую переменную, имеющую набор лингвистических значений, которые
будут определены над ней. Пользователь вводит только имя лингвистической переменной и
ее описание. Например, лингвистической переменной может быть оценка студента,
температура, рост или зарплата, как показано на рисунке 2.
Рис. 2. Сервис лингвистические переменные
245СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Сервис лингвистических значений. Эта служба отвечает за определение набора
лингвистических значений для конкретной лингвистической переменной. Для каждой
предопределенной лингвистической переменной, которая будет использоваться при
построении оператора нечеткого SQL, можно легко определить набор лингвистических
значений. Например, пользователь может определить лингвистические значения «Высокий»,
«Низкий» и «Средний» для лингвистической переменной «Рост». Каждое лингвистическое
значение может быть определено в очень гибком представлении, так что пользователь может
выбрать более подходящую функцию принадлежности и модулировать значения ее
контрольной точки, чтобы они были более близки к значению лингвистического значения.
Благодаря удобному для пользователя графическому представлению пользователь может
проверить определения лингвистических значений и их перекрытие для конкретной
лингвистической переменной. Графическое представление помогает пользователю внести
эффективные изменения в выбранную функцию принадлежности, чтобы удовлетворить смысл
лингвистического значения, как показано на рисунке 3.
Рис. 3. Сервис лингвистические значения
Служба нечетких SQL-запросов. Эта служба позволяет пользователю генерировать
нечеткие запросы, используя синтаксис традиционного языка SQL. После выполнения
сгенерированного оператора нечеткого запроса результат отображается, как показано на
рисунке 4. Этот оператор запроса генерируется для получения имени, фамилии и отчества
каждого сотрудника, у которых рост выше среднего.
246СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 4. Оператор нечеткого запроса
Кроме того, он позволяет передавать нечеткие выражения в качестве аргументов
функции или хранимой процедуры в операторе выбора. С другой стороны, поддерживаются
сложные запросы, включая объединение двух и более таблиц. Полученные кортежи можно
отсортировать, используя степень их соответствия указанным нечетким критериям в
сгенерированном операторе нечеткого запроса.
В этой статье представлен более простой метод на основе нечетких множеств для
гибкого выполнения запросов к реляционным базам данных. Существует множество методов,
позволяющих выполнять нечеткие запросы к реляционным базам данных. Тем не менее, такие
методы представляют собой сложные решения, которые имеют двоякий характер. Во-первых,
они зависят, главным образом, от определения нечеткой метабазы данных, которая
используется для хранения определений всех используемых нечетких терминов.
Соответственно, каждый сгенерированный оператор нечеткого запроса необходимо
проанализировать, чтобы получить каждый нечеткий термин и его определение из метабазы,
что занимает много времени. Если такой метод зависит от преобразования сгенерированного
нечеткого запроса в эквивалентный оператор традиционного запроса SQL, он считывает
определение, а затем передает его в соответствующий сохраненный объект базы данных, а
затем обрабатывает запрос. Во-вторых, некоторые другие методы требуют преобразования
любого сгенерированного оператора нечеткого запроса в классический оператор SQL путем
исключения всех используемых нечетких терминов. Как следствие, определения таких
нечетких терминов, хранящиеся в метабазе, используются для нечеткой оценки
результирующих кортежей и назначения степени соответствия для каждого результирующего
кортежа. Напротив, предлагаемый метод в основном зависит от организованного хранения
всех используемых нечетких терминов в виде объектов базы данных, а именно хранимых
процедур и функций внутри пакетов. Такие хранимые объекты базы данных напоминают
247СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
нечеткий профиль пользователя. Следовательно, оператор нечеткого запроса может быть
сгенерирован непосредственно как традиционный оператор SQL с использованием нечетких
терминов, предопределенных как объекты базы данных. Отсутствует необходимость в
анализаторе или трансляторе для преобразования сгенерированного нечеткого запроса в
исполняемый оператор запроса. Кроме того, нет необходимости в нечеткой метабазе знаний,
которая существует в большинстве ранее предложенных методов нечетких запросов.
Снижается не только сложность разрешения нечеткого запроса, но и время ответа при
выполнении такого запроса. Предложенный метод позволяет создавать простые, сложные,
вложенные и коррелированные нечеткие запросы, похожие на человеческие, которые
содержат лингвистические термины и нечеткие соединители. Кроме того, поскольку
лингвистические термины представлены как набор определяемых пользователем
сохраненных функций, предлагаемый метод позволяет очень гибко писать любые простые,
вложенные, коррелированные и сложные операторы нечеткого запроса как традиционные
операторы выбора.
Литература
1. Грофф Дж., Вайнберг П., Оппель Э. SQL: Полное руководство / Пер. с англ. 3-е изд.
М.: Вильямс. 2015.
2. Мамедли Р.Э. Системы управления базами данных. Нижневартовск: Изд-во
Нижневартовского государственного университета, 2021. 213 с.
3. Мейер М. Теория реляционных баз данных. М.: Мир, 1987.
4. Coronel C., Morris S. Database Systems: Design, Implementation, and Management.
Cengage Learning, Inc, 2019. P. 837.
5. Fagin R. The Decomposition Versus Synthetic Approach to Relational Database Design //
Proceedings of the 3rd International Conference on Very Large Data Bases. Vol. 3. VLDB
Endowment, 1977. Pp. 441-446. (VLDB’77).
6. Grissa-Touzi A., Ben Hassine M. New Architecture of Fuzzy Database Management Systems
// The International Arab Journal of Information Technology. 2009. № 6(3). P. 213-220.
7. Kossmann D., Stocker K. Iterative Dynamic Programming: A New Class of Query
Optimization Algorithms // ACM Trans. Database Syst. 2000. Vol. 25, no.1. Pp. 43-82.
https://doi.org/10.1145/352958.352982
8. Mishra J. Fuzzy Query Processing // International Journal of Research and Reviews in Next
Generation Networks. № 1(1), (March 2011)
9. Qi Y. Efficient Processing of Nested Fuzzy SQL Queries in a Fuzzy Database // IEEE
Transactions on Knowledge and Data Engineering. 13(6), (November/December 2001)
10. Tamer Özsu M., Valduriez P. Principles of Distributed Database Systems. Springer
Science+Business Media, LLC 2011.
© Мамедли Р.Э., 2024
248СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.65
Нурматова Е.В.
канд. техн. наук, доцент
МИРЭА – Российский технологический университет
г. Москва, Россия
Завгородний Н.И.
магистрант
Технологический институт университета «Дубна»
г. Дубна, Россия
ГЕНЕРАЦИЯ ЗАПРОСОВ
ДЛЯ НАГРУЗОЧНОГО ТЕСТИРОВАНИЯ СЕРВЕРА БАЗ ДАННЫХ
Аннотация. В процессе разработки клиентской части систем часто сталкиваемся с
ситуациями, когда тестирование программного кода отнимает много времени, но обычно не
хватает достаточного времени на тестирование базы данных, или это выполняется по
остаточному принципу. В результате работа с базой данных может стать узким местом в
производительности приложения. Целью данной работы является исследование
производительности запросов и разработка приложения для генерации тестовых запросов и
тестирования производительности сервера баз данных.
Ключевые слова: тестирование; SQL-запрос; генерация; производительность сервера;
оптимизация; нагрузка, приложение.
Настройка производительности запросов может быть достаточно сложной задачей,
особенно при работе с большими данными, где даже самое незначительное изменение может
резко повлиять на производительность запроса. Когда разработчик имеет дело с огромными
таблицами, оптимизация является ключевым фактором. Неэффективный запрос может создать
нагрузку на ресурсы базы данных и привести к снижению производительности или потере
обслуживания для других пользователей, если в запросе содержатся ошибки [6].
Рассмотрим факторы, по которым можно определить необходимость оптимизации или
настройки системы управления данными, направленной на повышение скорости её работы
или сокращение объёма используемой памяти [1]:
 Увеличение скорости обработки и выполнения запросов. Скорость работы сайта
прямо пропорционально зависит от времени обработки и выполнения SQL-запроса к базе
данных, которое должно быть минимальным.
 Предотвращение перегрузки сервера. При перегрузке сервера работа web-ресурса или
приложения будет нестабильной. Host-ер может заблокировать ресурс, чтобы последний не
нарушал работу всего сервера, на котором также работают и другие сайты.
 Уменьшение времени ожидания загрузки web-страницы. Когда идет огромное
количество sql-запросов к базе данных, происходит существенное замедление работы сайта,
что недопустимо для коммерческого или представительского интернет-ресурса.
 Экономия ресурсов хостинга. Если система управления данными не оптимизирована,
то происходит значительный перерасход использования ресурсов сервера (процессорного
249СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
времени, оперативной памяти). На этом основании host-ер имеет право заблокировать работу
ресурса.
 Возможность масштабировать ресурс. При расширении сайта будет невозможно
обеспечить хорошее качество его работы.
Тестирование запросов с помощью приложения позволяет оптимизировать или найти
более подходящий вариант для требуемых задач и сэкономить средства [3]. Существует много
инструментов для качественной генерации тестовых запросов с различными встроенными
функциями, наиболее востребованными из которых являются DTM Data Generator, Databene
Benerator. EMS data generotor MySql и многие другие [2].
Цель разработки приложения, описываемого в работе, состоит в проверке сервера баз
данных большим количеством одновременных транзакций. Предполагается, что таким
образом моделируется многопользовательская работа. При помощи приложения поверяем
среднее время отклика при обработке параллельных транзакций, производительность
привилегированных, либо часто вызываемых транзакций, и далее, стандартных и менее
важных транзакций, время, требуемое на обработку запросов записи в базу. Другими словами,
производится моделирование нагрузочного тестирования сервера баз данных.
На рисунке 1 показана схема процесса генерации тестовых запросов, при помощи
которого создаётся сценарий, поддерживающий необходимый синтаксис написания тестов.
Рис. 1. Схема генерации тестовых запросов
Рассмотрим реализацию приложения для быстрой генерации тестовых запросов в базу
данных с последующим сохранением/ редактированием написанных сценариев. На рисунке 2
250СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
приведен общий интерфейс генератора с элементами управления интерфейсом приложения:
1 – выбор префикса для работы с БД; 2 – выбор теста; 3 – данные для подключения; 4 – кнопки
проверочного подключения и отключения; 5 – кнопка начала теста; 6 – log-текст бокс;
7 – кнопка очистки log-a.
Рис. 2. Основное элементы управления в программе
Справа указываются данные для подключения к host-ерам сервера, параметры
тестируемой базы данных, пользователя, имеющего соответствующие права. При любой
ошибке во время подключения или во время тестового запроса будет выведено
соответствующее сообщение на экран пользователя: «access denied for user 'root2'@'localhost'
(using password: NO)».
Тесты подгружаются динамически в программу при её запуске, все компоненты тестов
содержатся в папке data\autotests (рис. 3).
Рис. 3. Содержание папки autotests
Каждый тест содержит в себе основной «начальный» файл, он должен называться по
маске “mysql_*_start.sql”.
На основном окне программы можно увидеть поле для ввода префикса баз, это
«заполнитель», который будет подставляться в файлы тестов на место !@prefix@!, так же
добавляется символ _, используется для использования уникальных имён во время тестов.
Синтаксис последней строки определяет дальнейшее действие программы после
выполнения. Синтаксис для выполнения следующего файла имеет следующий вид:
## Next: mysql_test1_2.sql : 200000 ##
где, mysql_test1_2.sql – название следующего файла, а 200000 – количество раз для
выполнения этого файла. Далее в следующем файле будет содержаться такая же строка,
которая продолжает выполнение. Последний файл должен содержать в последней строке тэг
251СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
корректного завершения теста: ## End ##. Этот тег позволяет определить, что последний файл
точно выполнен и произошло корректное завершение теста.
При необходимости заполнения случайных данных их можно сгенерировать средствами
SQL, это так же вынесет нагрузку на SQL сервер, собственно, что мы и тестируем. В случае
неуспешного завершения теста, возвращается сообщение об ошибке и место прерывания (см.
рис. 5).
Рис. 4. Пример успешного выполнения теста
Рис. 5. Сообщение об ошибке, в случае не успешного выполнения теста
Общий подход построения тестов позволяет вынести тесты из кода программы и
обновлять их быстрее и независимо от программы. Первый предложенный тест для примера
создаёт пустую таблицу, делает 200000 select-запросов и удаляет базу таблицу. Однако
предложенный синтаксис продолжения теста позволяет протестировать абсолютно любой
сценарий неограниченной сложности, благодаря этому можно имитировать работу
приложений и проверять сценарии работы с базой данных на разных серверах для сравнения
общей производительности.
Так же благодаря этому подходу вся сложность выполнения и генерации (при
необходимости) переносит нагрузку на SQL сервер, делая минимальную погрешность в тесте
самой программы. Сам тест выполняет в отдельном потоке и не мешает работу интерфейсу
программы, время теста так же замеряется самой программой.
Для написания тестов со случайными значениями предлагается использовать, например,
CROSS APPLY (SELECT TOP(CAST(RAND(N) * 10 AS INT)) txt FROM
(VALUES(N'Сергей'),(N'Олег'), (N'Николай')) t(txt)) t
И аналогичные запросы.
Благодаря вышеизложенным инструкциям можно сгенерировать комбинацию запросов,
которые образуют тест любой сложности. Тестирование на разных серверах одного и того же
252СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
теста будет отображать производительность тестируемого кейса в общем и на каждом этапе
теста конкретно, это необходимо для сравнения и дальнейшей оптимизации сервера базы
данных или изменения в запросах приложениях. Этому так же способствует возможность
быстрого переключения между тестами и серверами в приложении.
В завершение, можно отметить, что, перенося базу данных в производственную среду,
нужно позаботиться о том, чтобы производительность базы данных была адекватной. Если к
проекту прилагается формальная спецификация требований, проверить, указываются ли в ней
какие-либо ограничения производительности. Для приложений, работающих с базами данных,
нередко задается максимальное время выполнения запросов. Продолжительность времени
между вводом инструкции и получением результатов запроса зависит от многих факторов.
Необходимо заранее учесть те факторы, которые впоследствии нельзя будет контролировать.
Если обнаруживается, что система требует оптимизации, в первую очередь подумать об
обновлении аппаратной части. Это может оказаться самым дешевым вариантом. В 1965 г.
Гордон Мур (Gordon Moore) установил, что вычислительные мощности удваиваются каждые
18 месяцев. Данное правило называют законом Мура [4; 5]. Но, несмотря на столь
стремительный рост производительности, удельная стоимость вычислительных средств
неуклонно снижается. Например, центральные процессоры за полтора года удвоят тактовую
частоту, хотя стоить будут так же, как и полтора года назад. Таким образом, обновление
компьютера может обойтись дешевле, чем оптимизация проекта. Во вторую очередь стоит
подумать об обновлении программного обеспечения. Основной программный компонент– это
операционная система. Известно, что Linux и BSD UNIX позволяют повысить
производительность старых компьютеров, превосходя в этом отношении коммерческие
операционные системы, такие, как Windows, особенно если бессбойная работа сервера очень
важна.
Обновляется и сама система управления данными. Когда появится новая версия, ее
производительность будет повышена в сравнении с текущей. Но и в текущую версию
регулярно вносят мелкие исправления, так что желательно идти в ногу со временем. Основная
причина оптимизации – желание сэкономить деньги. Не стоит забывать об этом в попытках
повысить производительность программы. Нет смысла затрачивать на оптимизацию больше
денег, чем она способна принести. Стоит потрудиться над такой программой, с которой
работает множество людей, особенно если это коммерческое приложение.
Литература
1. Борчук Л.Е., Кузьмин А.А. Оценка времени выполнения запроса в реляционной СУБД
на основе асимптотических моделей затрат ресурсов. Наукоемкие технологии. 2008. №4. С.
61-64.
2. Иванов О. Машинное обучение для планирования запросов // Открытые системы.
СУБД. 2016. №1. С. 22-25.
3. Нурматова Е.В. Анализ процедурного плана sql-запроса // Опорный образовательный
центр. Казань: Иннополис, 2021. Т.2. С. 116-121.
253СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
4. Пашинин О.В. Оптимизация запросов к базам данных. М.: Математические структуры
и моделирование. 2017. Вып. 17. С. 100-107.
5. Хайлан A.M., Польщиков К.А., Алгазали С.M.M. Обнаружение ресурсоемких запросов
к базам данных на основе применения самоорганизующихся карт и нечеткого вывода //
Экономика. Информатика. 2021. Т. 48. №3. С. 578-593. https://doi/org/10.52575/2687-0932-
2021-48-3-578-593.
6. Wang S., Rundensteiner E.A., Mani M. Optimization of nested xquery expressions with
orderby clauses // Data & Knowledge Engineering. 2007. Т. 60. №2. С. 303-325.
https://doi/org/10.1016/j.datak.2006.03.004
© Нурматова Е.В., Завгородний Н.И., 2024
254СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004
Уртенов М.Х.
д-р физ.-мат. наук, профессор
Пекишев Д.В.
аспирант
Кубанский государственный университет
г. Краснодар, Россия
МОДЕЛИРОВАНИЕ БАЗ ДАННЫХ, БОЛЬШИЕ ДАННЫЕ
В ПРОЕКТЕ «ПРИЛОЖЕНИЕ ПО ЗАЩИТЕ АККАУНТОВ ОТ ВЗЛОМА»
Аннотация. Данная статья описывает разработку приложения в виде телеграм-бота для
выявления утечек данных и определения их источников, а также моделирование базы данных,
которая будет содержать все утечки и позволит совершать поиск по ним. Одной из решаемых
проблем стала необходимость эффективного поиска в огромных базах данных. Для её решения
была создана специализированная система управления базами данных с использованием B-
дерева и отсортированных списков.
Ключевые слова: базы данных; индексация; B-дерево; унификация данных; обработка
данных; бинарный поиск.
Утечка данных представляет серьезную угрозу для частной жизни и безопасности
пользователей. Она может привести к разглашению конфиденциальной информации, такой
как пароли, адреса электронной почты, номера кредитных карт и другие личные данные. В
связи с этим было разработано приложение в виде телеграм-бота, предназначенное для
определения наличия пользовательских данных в утечках и для идентификации источников, с
которых могли быть получены эти данные.
Основной проблемой в разработке такого продукта является скорость поиска
информации в базе данных размером в несколько терабайт. Для решения данной проблемы
была смоделирована специализированная система управления базами данных, которая
позволяет осуществлять индексацию баз данных и производить по ним быстрый нечёткий
поиск. В качестве структуры хранения данных было выбрано B-дерево, совмещённое с
отсортированными списками, в которых производится бинарный поиск.
Именно здесь возникает необходимость в специализированной системе управления
базами данных, которая способна индексировать информацию и осуществлять быстрый поиск.
Таким образом, B-дерево, сочетающееся с отсортированными списками, было выбрано как
оптимальная структура для хранения данных, позволяющая осуществлять бинарный поиск.
B-дерево, также называемое деревом двоичного поиска, – сортированная в памяти
структура данных, используемая для действенного поиска ключ-значение. BST состоит из
множества узлов. Каждый узел дерева представлен неким ключом, связанным с этим ключом
значением, и двумя дочерними указателями (отсюда и название двоичного). BST стартует с
одного узла, имеющего название корневого узла. В определённом дереве может иметься лишь
один корень [2, с. 47].
Поисковый механизм поддерживает составные запросы, включая запросы, содержащие
несколько слов. Размер поискового индекса остается небольшим и не увеличивается до уровня
255СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
основных данных. Для дополнительного увеличения скорости выполнения запросов
применяется кеширование результатов. А поскольку для организации базы используются
прямые и обратные индексы и связи между таблицами, мы имеем полноценную реляционную
базу данных.
Реляционная модель относится к логическим моделям. Определённые в рамках модели
структуры, операции над ними и задаваемые ограничения не зависят от способов реализации
физической организации данных и управления ими [1, с. 34].
Помимо этого, была разработана программа для предварительной обработки и
структурирования данных, которая выполняет следующие функции:
 анализ типа файлов и автоматическое определение разделителей;
 конвертация файлов в форматах SQL и Json в формат CSV;
 классификация данных, содержащихся в каждом столбце;
 удаление столбцов, содержащих пустые или служебные данные;
 приведение данных в столбцах к унифицированному формату – конвертация дат,
телефонов и имён, очистка данных от html-кодов, оптимизация ссылок, преобразование unix-
кодов;
 систематизация и разметка полученных данных;
 дедупликация строк;
 сортировка строк по алфавиту без учёта регистра.
Преобразование данных в более удобный для анализа формат включает конвертацию
времени в формате Unix из числового в текстовый и преобразование других данных в более
понятный для пользователей формат.
Данная программа способна эффективно обрабатывать файлы в форматах SQL, CSV и
JSON с минимальным вмешательством человека. Унификация данных позволяет привести
разнородные данные к общему формату, что делает их более доступными и удобными для
анализа, повышая качество и эффективность обработки, а также это необходимо для
индексации данных в СУБД для последующего поиска.
Унифицированные данные предоставляют общее пространство для управления данными
и всех других аспектов работы с данными, от анализа до аудита и оптимизации. Оно
обеспечивает согласованность всей бизнес-экосистемы, что оптимизирует административные
процессы, экономит время и ресурсы, повышает эффективность и стимулирует рост
(https://clck.ru/39hDpD).
Утечки данных могут представляться в разных форматах, таких как CSV, JSON, SQL,
TXT и других. Обработка и анализ данных в таком контексте становятся сложными из-за
различий и несогласованности форматов. Одной из ключевых задач, которую решает
унификация данных, является борьба с разнообразием форматов. Если данные имеют разные
форматы, обработка и анализ становятся сложными задачами. Например, для сравнения
данных из двух файлов – одного в формате CSV и другого в формате JSON, потребуется
значительное время на конвертацию данных и выравнивание их формата. Унификация данных
помогает сэкономить время и сделать процесс обработки и анализа более эффективным.
256СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Таким образом, унификация данных представляет собой процесс приведения
разнородных данных к общему формату и решает проблемы, связанные с разнообразием
форматов файлов.
Рассмотрим формат CSV более подробно, поскольку в данной работе было принято
решение приводить все остальные форматы к нему.
Формат CSV (Comma Separated Values) является одним из наиболее распространенных
форматов для хранения и обмена данными. Он использует запятые в качестве разделителей
между значениями и переносы строк для разделения строк. CSV-файлы могут быть легко
открыты и обработаны большинством программ, включая Microsoft Excel, Google Sheets и
другие.
Преобразование данных в формат CSV является первым и важным шагом в процессе
унификации данных. Для этого необходимо выбрать подходящий разделитель и обозначение
значений, которые могут содержать запятые и другие специальные символы. Обычно для
разделения значений используются запятые, а значения, которые могут содержать запятые,
обрамляются двойными кавычками. Однако, в зависимости от конкретных данных, можно
также использовать символы табуляции в качестве разделителей.
Преимущества использования формата CSV при работе с большими данными включают:
 простоту использования и понимания, что делает его удобным для обмена данными
между различными системами;
 универсальность, так как CSV-файлы могут быть обработаны большинством
программ;
 возможность расширения формата CSV для хранения больших объемов данных.
Недостатки использования формата CSV включают:
 ограничение в поддержке сложных типов данных, таких как изображения, аудио и
видео файлы;
 возможные сложности при интерпретации данных, особенно если файлы содержат
запятые или кавычки;
 увеличение размера файлов, особенно если они содержат миллионы записей.
В целом, формат CSV остается отличным выбором для унификации данных, особенно,
если база содержит базовые типы записей и их объем остается умеренным.
Для подготовки файлов и их последующей интеграции в базу данных в представленной
программе выполняются следующие этапы:
 маркировка заголовков таблицы;
 удаление избыточных столбцов;
 обнаружение и удаление дубликатов строк, а также сортировка данных;
 преобразование данных в общий формат – CSV;
 добавление данных в соответствующие строки базы данных.
Этот сервис использует новаторский модифицированный метод внешней сортировки
слиянием, который имеет структуру, аналогичную алгоритму B-дерева. В данном случае
строки упорядочиваются алфавитно в отдельных кластерах, каждый из которых содержит
257СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
строки с определенным началом, которое служит названием кластера. Некоторые кластеры
могут иметь общую часть в названии, и в таких случаях приоритет отдается кластеру с более
длинным началом.
Дополнительно, важно отметить, что этот метод сортировки также позволяет
эффективно обрабатывать данные, в которых часто встречаются одинаковые начальные части
строк. Это свойство помогает сократить время поиска и ускоряет доступ к данным, даже в
случаях, когда кластеры имеют обширное пересечение начальных частей строк.
Этот метод сортировки не является полностью строгим, но он обеспечивает более
быстрый доступ к данным по сравнению с чистым бинарным поиском. Кроме того, он
динамичен, и в случае, если какой-либо кластер превышает установленное ограничение при
добавлении новых данных, происходит автоматическое разделение этого кластера на
подкластеры.
При этом в отдельные кластеры попадают только те строки, общий размер которых
превышает заданный предел в то время, как остальные остаются в исходном кластере. Этот
подход позволяет избежать создания слишком маленьких кластеров и в то же время
предотвращает рост размеров кластеров до такой степени, что они не могут быть полностью
обработаны в оперативной памяти.
Этот аспект метода сортировки подчеркивает важность его масштабируемости.
Подразумевается, что система способна адаптироваться к изменяющимся объемам данных, и
разделение кластеров на подкластеры помогает балансировать нагрузку и управлять
ресурсами более эффективно.
Для оптимизации поиска в унифицированных данных используются поисковые индексы.
Они представляют собой один из способов ускорения поиска в огромных объемах
информации и состоят из двух основных компонентов: словаря терминов и списка обратных
ссылок. Словарь терминов содержит уникальные слова или фразы, используемые в
документах, в то время как список обратных ссылок содержит информацию о том, в каких
документах встречается каждый термин.
Это означает, что метод эффективно управляет ресурсами и позволяет сохранять
высокую производительность даже при увеличении объемов данных. Таким образом, сервис
способен обеспечивать стабильно высокую скорость доступа к данным при любых нагрузках.
При выполнении поискового запроса поисковый движок сначала использует словарь
терминов, чтобы определить, в каких документах содержатся запрошенные термины. Затем он
использует список обратных ссылок для быстрого определения документов, содержащих эти
термины.
Важно понимать, что эти индексы не просто ускоряют поиск, но также снижают нагрузку
на хранение и обработку данных. Словарь терминов содержит уникальные слова или фразы,
используемые в документах, в то время как список обратных ссылок содержит информацию о
том, в каких документах встречается каждый термин.
258СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Итак, создание поисковых индексов представляет собой важный этап унификации
данных в данной работе и позволяет существенно ускорить процесс поиска и обработки
информации, особенно при работе с большими объемами данных.
Тем не менее, следует также подчеркнуть, что эффективное использование индексов
требует постоянного обновления и оптимизации, чтобы сохранить высокую скорость поиска
при росте данных. Поэтому процесс управления индексами также является важным аспектом
работы с данными.
Необходимо выбирать подходящий метод создания индексов и оптимизировать этот
процесс, чтобы уменьшить временные и ресурсные затраты. Этот метод был успешно
применен к разработанному сервису.
Кроме того, в проекте используются два типа поисковых индексов: прямые и обратные.
Сами файлы упорядочены алфавитно без учета регистра, и первый столбец таблицы
автоматически используется в качестве прямого индекса, что позволяет осуществлять поиск в
логарифмическое время. Также прямой индекс используется для поиска по столбцам, не
являющимся первичными. Для этого создаются дополнительные файлы, содержащие два
столбца: индексируемый столбец и столбец с ссылками на соответствующие ячейки таблицы,
откуда были получены данные. Ссылкой служит прямой индекс из первого столбца данной
таблицы.
Кроме того, для распознавания данных используется обратный индекс. В общей таблице
с данными хранится множество баз данных, и к каждой строке добавлен дополнительный
столбец, который позволяет определить, из какой таблицы была взята данная строка.
В ходе данной работы была смоделирована и протестирована база данных, содержащая
более 50 миллиардов записей общим размером в 6TB. В ходе тестов оказалось, что скорость
поиска строки в этой базе занимает в среднем 0.0005 секунды, что позволяет выполнять около
2000 запросов каждую секунду, что в несколько раз выше скоростей, которых можно
достигнуть с использованием более широкопрофильных СУБД вроде MySQL или PostgreSQL.
Таким образом, разработанная база данных позволяет проверять большое количество
авторизационных данных на наличие их в утечках. В случае обнаружения данных своих
пользователей в утечках компания может принять меры и предупредить пользователей о
возможной угрозе взлома, а также подключить двухфакторную аутентификацию.
Также разработанная система управления базами данных может применяться и в других
проектах, где требуется осуществлять большое количество поисков по редко изменяющейся
базе данных. Это актуально, например, для каталогов, журналов, работы приложений,
таблицей хэшей или баз, содержащих историю транзакций блокчеина.
Литература
1. Тарасов С. СУБД для программиста. Базы данных изнутри. М.: СОЛОН-Пресс, 2018.
320 с.
2. Zaccone G. Python parallel programming cookbook. Packt Publishing Ltd., 2015. 286 р.
© Уртенов М.Х., Пекишев Д.В., 2024
259СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004::34
Худойбердиев Х.А.
канд. физ.-мат. наук, доцент
Музафаров М.П.
PhD докторант
Политехнический институт
Таджикского технического университета имени академика М.С. Осими,
г. Худжанд, Таджикистан
ИНФОРМАЦИОННАЯ СИСТЕМА ЭЛЕКТРОННОЙ БИБЛИОТЕКИ
Аннотация. Рассматривается процесс разработки и внедрения электронной библиотеки
высшего профессионального учебного заведения (ВУЗ). Проведен сравнительный анализ
информационных ресурсов, доступных в сети Интернет. Информационное обеспечение в
электронную библиотеку реализовано на основе модели базы данных – системы управления
базами данных MySQL. В базе данных создана база взаимосвязанных систем табличной
логики. Логическая структура электронной библиотеки представлена в виде веб-приложения.
Отмечается, что электронная библиотека позволяет сотрудникам и студентам ВУЗа работать
удаленно через Интернет, что обеспечивает оперативное взаимодействие пользователей с
информационными ресурсами. С помощью электронной библиотеки студенты могут заказать
необходимые книги, а сотрудники библиотеки незамедлительно выполнить эти заказы. База
данных электронной библиотеки предназначена для хранения и обработки данных как
печатных книг, так и электронных книг. Разработанная электронная библиотека направлена
на автоматизацию процесса работы библиотек ВУЗа, что приводит к немедленному
удовлетворению потребностей читателей в книгах и информационных ресурсах.
Преподаватели и студенты ВУЗов могут иметь свободный и неограниченный доступ ко всем
информационным ресурсам библиотечного фонда с помощью электронной библиотеки.
Ключевые слова: информационные системы; базы данных; электронный ресурс;
электронный справочник; поисковая система; автоматизация; электронная библиотека.
В настоящее время информационные технологии широко внедряются во все сферы
человеческой деятельности. Разработка и внедрение информационных систем с
возможностями новых методов управления дают огромный оперативного доступа к учебному
и научному контенту, справочных данных по направлениям подготовки университета,
развития навыков поиска и обработки информации, осуществления образовательных и
научных коммуникаций. Информационно-коммуникационные технологии ускоряют
жизненный цикл процессов и повышают степень эффективности и качество работы. Доступ к
ресурсам научно-технической библиотеки университета, электронно-библиотечным
системам, реферативным базам данных, информационно-справочным системам организован с
компьютеров локальной сети университета и по сети Интернет. Внедрение современных
возможностей ИКТ в ВУЗе в формате каталогизации и классификации обеспечит
эффективный доступ к необходимым ресурсам, что позволит предотвратить бумажный хаос.
Электронная библиотека содержит электронные книги (в формате pdf, word, txt и epub) и
учебно-методических пособий, монографий, авторами которых являются преподаватели
университета, учебных и учебно-методических изданий, редких и ценных изданий из фонда
научно-технической библиотеки.
260СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Электронная библиотека доступна с компьютеров локальной сети университета, а также
есть возможность открыть доступ по сети Интернет.
На сегодняшний день одним из важнейших инструментов реализации электронной
библиотеки можно считать web-технологии в мировой сети Интернет. Общедоступные
информационные средства повышают оперативность обслуживания пользователей с
возможностями быстрого поиска, фильтрации и сортировки информационного ресурса в web-
приложениях.
Для достижения поставленной цели и решения задач были изучены теоретические
аспекты разработки электронного каталога, методы классификации и каталогизации
электронных документов. Также проведен сравнительный анализ функциональных
возможностей государственных общедоступных источников Национальной Библиотеки
Республики Таджикистан в сети Интернет.
В общем виде, как информационные продукты, так и электронные информационные
ресурсы можно представить в следующих форматах:
1. Электронные каталоги.
2. Цифровая библиотека.
3. Базы данных.
4. Полнотекстовые документы.
5. Электронная библиотека.
6. Электронные справочники.
7. Электронные словари.
Все перечисленные разновидности ресурсов по своим функциональным способностям
дают возможность реализации ряда услуг с использованием современных ИКТ. По своим
особенностям структура и состав каждого вышеперечисленного информационного ресурса,
различаются по классам использования и категориям обслуживания пользователей.
Важнейшим информационным ресурсом можно считать – электронный каталог, который дает
возможность информационного и тематического поиска, структурного управления
информацией.
Рассмотрим структуру разработанной информационной системы электронной
библиотеки ХПИТУТ имени М.С. Осими, рисунок 1. Электронная библиотека разработан на
основе Web-технологий. Программные модули разработаны с использованием языка
программирования РНР. Информационное обеспечение сформировано с использованием
СУБД MySQL. Обработчик РНР выдает две разновидности информации: название книг,
количество в библиотеках ВУЗА, об авторе, для каких дисциплин и специальностей
предназначено выбранная книга, описание и т. п.
Один из главных модулей управления информационной системы является – поиск книг.
По предложенным словам, или словосочетаниям проводится поиск, в результате которого
выводятся список книг.
261СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Концептуальная модель ИС электронной библиотеки
Рис. 2. Пользовательский интерфейс «Главной страницы» ИС
Информационное обеспечение в электронном каталоге реализован на базе реляционной
модели базы данных – система управления базами данных MySQL. В базе данных созданы
пять таблиц, связанных между собой логически: «книга», «публикация», «категория», «автор»,
«дисциплина» и «специальность».
Структура базы данных информационной системы приведена на рисунке 3.
262СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 3. Логическая структура ИС электронной библиотеки ХПИТТУ
Можно отметить, что электронный каталог дает возможность современному
пользователю работать в удаленном режиме через Интернет. Используя разработанный
электронный каталог, доступный через Интернет, простые пользователи без личных встреч с
сотрудниками юридических организаций, предоставляющих юридические услуги, могут
получить соответствующие юридические знания в судебных вопросах. Информационная база
электронного каталога содержит основные Кодексы Республики Таджикистан с
полноценными общедоступными текстами частей, разделов, глав и статей.
В заключение можно отметить ряд проблем, решение которых обеспечивает
разработанный нами электронный каталог:
1. Разработка концептуальной модели каталогизации кодексов Республики
Таджикистан.
2. Проведение экспериментальных исследований в сфере юридичского обеспечения
деятельности во всех сферах общества.
3. Модернизация имеющейся нормативно-справочной базы юридического обеспечения
электронных ресурсов.
4. Электронная консультация пользователей по сети Интернет на базе существующих
правил законодательного управления.
© Худойбердиев Х.А., Музафаров М.П., 2024
263СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 81-322::519.25::004.5
Худойбердиев Х.А.
канд. физ.-мат. наук, доцент
Политехнический институт
Таджикского технического университета имени академика М.С. Осими
г. Худжанд, Таджикистан
Нарзиева Д.С.
соискатель
Худжандский государственный университет им. Б.Гафурова
г. Худжанд, Таджикистан
ПРИМЕНЕНИЕ АРХИТЕКТУРЫ «КЛИЕНТ-СЕРВЕР»
ДЛЯ СИСТЕМ УПРАВЛЕНИЯ ПЕРСОНАЛА
Аннотация. В статье рассматриваются вопросы использования клиент-серверной
архитектуры для значительного улучшения процесса управления персоналом и повышения
эффективности работы HR-отдела.
Ключевые слова: служба управления персоналом;клинет; сервер; приложение.
В последние годы информационные технологии проникли практически во все сферы
жизни человека и общества: государственное и муниципальное управление, экономику,
хозяйственную деятельность, научные исследования, образование, медицину и частную жизнь
человека. Не является исключением и управление персоналом, деятельность кадровых служб
предприятий и организаций. Оптимальное управление персоналом является актуальным
вопросом для любой организации, так как правильное управление персоналом может
значительно повысить эффективность работы организации и улучшить ее результаты.
Большая часть организаций хотят автоматизировать процесс управления персоналом при
помощи информационных технологий (ИТ). Использование информационных технологий в
процессе управления персоналом является не полезным инструментом, а необходимостью, так
как это позволяет достичь максимальной многозадачности работников компании [1].
Для автоматизации службы управления персоналом в рамках предприятия создается
информационная система (ИС). Обычно такие системы обозначаются аббревиатурой HRMS
(Human Resource Management Systems – системы управления трудовыми ресурсами). В самом
полном – комплексном варианте эти системы охватывают все уровни управления
предприятием – операционный, тактический и стратегический; а в функциональном плане –
кадровый учет, расчеты с персоналом и систему управления трудовыми ресурсами,
включающую в себя модули найма и подбора персонала, оценки, обучения, развития и
мотивации персонала (https://clck.ru/39jjBR).
АИС – программно-аппаратная система, предназначенная для автоматизации
целенаправленной деятельности конечных пользователей, обеспечивающую, в соответствие с
заложенной в неё логикой обработки, возможность получения, модификации и хранения
информации.
В крупных организациях информационная технология основывается на современном
программно-аппаратном комплексе и включает в себя телекоммуникационные средства связи,
264СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
развитую архитектуру «клиент-сервер», применение высокоскоростных корпоративных
вычислительных сетей. В крупных предприятиях корпоративная информационная технология
имеет трехуровневую иерархическую структуру. Такая структура организовывается в
соответствии со структурой территориально разобщенных подразделений предприятия:
центральный сервер системы устанавливается в центральном офисе, локальные серверы – в
подразделениях и филиалах, станции клиентов, организованные в локальные вычислительные
сети структурного подразделения, филиала или отделения – у персонала компании.
Применение архитектуры «Клиент – сервер» в высших учебных заведениях также
является одним из эффективных методов управления деятельности кадровых служб, так как
клиент – северная архитектура представляет собой модель распределенной системы. Такая
модель позволяет достичь централизованного управления и улучшить масштабируемость
системы. Схема клиент-сервер представляет собой архитектурную модель, в которой
компьютерные приложения или устройства (клиенты) обмениваются данными и запросами с
сервером. Сервер играет роль центрального узла, предоставляющего ресурсы, услуги и
обрабатывающий запросы от клиентов.
Требования к АИС:
 централизация данных в единой базе (в основе – всегда промышленная СУБД),
 близкий к реальному времени режим работы,
 сохранение общей модели управления для предприятий разных отраслей,
 поддержка территориально-распределенных структур,
 работа на широком круге аппаратно-программных платформ и СУБД.
Основная идея заключается в том, что клиентские устройства отправляют запросы на
сервер и ожидают ответа. Сервер принимает запросы, выполняет нужные операции и
отправляет обратно ответы или запрашиваемые данные. Схема клиент-сервер является
распространенной архитектурной моделью в компьютерных сетях. Она состоит из двух
основных компонентов:
1. Клиент – компьютер или устройство, которое запрашивает и получает данные или
услуги от сервера. Клиент может быть мобильным устройством, программой, приложением
или даже веб-браузером. Он инициирует запросы и получает ответы от сервера.
2. Сервер – высокопроизводительный компьютер или устройство, которое
предоставляет запрашиваемые клиентом данные или услуги. Сервер выполняет функции
обработки запросов, хранения данных и обеспечения безопасности. При работе по схеме
«клиент-сервер» клиент отправляет запрос на сервер, и сервер отвечает на этот запрос,
предоставляя необходимую информацию или услугу. Коммуникация между клиентом и
сервером осуществляется посредством сетевых протоколов, таких как HTTP или TCP/IP.
Клиент-серверная архитектура может быть использована в управлении персоналом для
обеспечения более эффективного и удобного доступа к информации о сотрудниках и
управлении персональными данными. Например, система управления персоналом может быть
разработана как клиент-серверное приложение, где клиентская часть предоставляет
265СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
пользовательский интерфейс для ввода и просмотра информации, а серверная часть
обрабатывает запросы и хранит данные о сотрудниках.
Такая система может обеспечить быстрый доступ к информации о сотрудниках,
упростить процесс управления персоналом и повысить эффективность работы HR-отдела.
Кроме того, клиент-серверная архитектура может обеспечить безопасность данных, так как
доступ к ним будет ограничен только авторизованным пользователям.
Существует множество способов управления персоналом с помощью клиент – серверной
архитектуры. Один из них – использование специализированного программного обеспечения
для управления персоналом, которое работает на сервере и предоставляет доступ к
функциональности через клиентское приложение. Такое программное обеспечение может
включать в себя функции управления графиком работы, учета рабочего времени, управления
задачами и проектами, а также функции аналитики и отчетности и позволяет управлять
персоналом, используя централизованную базу данных, которая хранится на сервере.
Клиентское приложение может быть установлено на компьютерах сотрудников или
использоваться через веб-интерфейс. Другой способ – использование коммуникационных
инструментов, таких как электронная почта, мессенджеры или социальные сети, для общения
с персоналом и управления задачами. В этом случае сервер может использоваться для
хранения и обработки данных, а клиентское приложение – для доступа к этим данным и
общения с персоналом.
Также можно использовать клиент-серверную архитектуру для доступа к общим
ресурсам и базам данных, которые используются для управления персоналом. Например,
можно создать базу данных с информацией о сотрудниках, их должностях, зарплатах,
графиках работы и т. д., и предоставить доступ к этой базе данных через клиентский
интерфейс. Это позволит управлять персоналом, изменять данные и получать отчеты о работе
сотрудников.
Кроме того, можно использовать клиент-серверную архитектуру для управления
процессами и задачами, связанными с персоналом. Например, можно создать систему
управления задачами, которая будет работать на сервере и предоставлять доступ к задачам
через клиентский интерфейс. Это позволит распределять задачи между сотрудниками,
отслеживать их выполнение и получать отчеты о проделанной работе.
В процессе управления человеческими ресурсами (HR) клиент-серверная архитектура
может быть использована для создания специализированной системы, которая обеспечивает
действия и функциональность, связанную с управлением персоналом. Для создания
оптимальной схемы клиент-сервера для управления человеческими ресурсами (HR)
существуют несколько методов. С помощью клиент-серверной архитектуры можно
реализовать следующие методы управления персоналом:
1. Хранение и доступ к данным о сотрудниках. Клиентская часть системы может
предоставить интерфейс для администраторов HR, где они могут редактировать информацию
о сотрудниках, такую как личные данные, занимаемые должности, зарплата, их контактная
информация и другие. Серверная часть будет отвечать за хранение и обработку этих данных.
266СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2. Системы управления рабочим временем. Клиент-серверная архитектура может быть
использована для создания системы управления и контроля рабочего времени сотрудников.
Клиентская часть может предоставлять интерфейс для ввода данных о рабочем времени
(например, посещение или отсутствие на рабочем месте), а серверная часть будет
обрабатывать и хранить эти данные.
3. Оценка производительности и обратная связь: Клиентская часть может предоставлять
формы и инструменты для оценки производительности сотрудников, а серверная часть может
обрабатывать отправленные отзывы и предоставлять информацию обратно HR-специалистам.
4. Управление доступом и безопасностью. Клиент-серверная архитектура позволяет
управлять доступом к определенным данным и функциональности, обеспечивая безопасность
информации о персонале. Администратор может определить различные уровни доступа для
сотрудников, обеспечивая конфиденциальность и защиту данных.
5. Управление задачами и проектами. С помощью клиент-серверной архитектуры можно
разработать систему управления задачами и проектами. Сотрудники могут получать задания
и указания от руководителей через клиентское приложение, а данные о выполнении задач или
прогрессе проектов могут быть переданы обратно на сервер для анализа и контроля.
6. Обмен сообщениями и коммуникация. Клиент-серверная архитектура поддерживает
обмен сообщениями и коммуникацию между сотрудниками. Это может быть внутренний чат
или система электронной почты, интегрированные в клиентское приложение. Такой обмен
информацией способствует эффективной коммуникации и сотрудничеству внутри
организации.
В любом случае, для эффективного управления персоналом с помощью клиент-
серверной архитектуры необходимо иметь хорошо продуманную систему управления
доступом и защиты данных, чтобы предотвратить несанкционированный доступ к
конфиденциальной информации.
В целом, использование клиент-серверной архитектуры может значительно улучшить
процессы управления персоналом и повысить эффективность работы HR-отдела.
Литература
1. Максудов А.Т. Внедрение элементов электронного правительства в
политехническом институте // Первая международная конференция «Прикладные
информационные системы: проблемы моделирования, применения в развивающихся
странах». Худжанд. 2012.
© Худойбердиев Х.А., Нарзиева Д.С., 2024
267СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
ИНТЕРНЕТ ВЕЩЕЙ
УДК 004.057.4
Ивашнев К.Р.
аспирант, преподаватель
Корзун Д.Ж.
канд. физ.-мат. наук, доцент
Петрозаводский государственный университет
г. Петрозаводск, Россия
МЕТОДЫ ОРГАНИЗАЦИИ МОБИЛЬНОЙ СВЯЗИ
ДЛЯ ТРУДНОДОСТУПНОЙ МЕСТНОСТИ
Аннотация. Статья посвящена исследованию и разработке эффективных методов
организации мобильной связи в условиях труднодоступной местности. В контексте быстрого
развития современных технологий и повсеместного использования мобильных устройств,
обеспечение связи в отдаленных и труднодоступных регионах представляет значительные
технические и организационные вызовы. Представлены прототипы систем, позволяющих
решать различные классы задач в тех случаях, когда невозможно подключение к сети общего
пользования. Выполнен расчет ожидаемых технических характеристик, описаны варианты
применения для каждой из систем.
Ключевые слова: мобильная связь; интернет-технологии; автономные системы;
мониторинг; 5G; ZigBee.
Технологии связи играют важную роль для предприятий, расположенных в
труднодоступных местностях. Примерами такой местности могут быть отдаленные районы,
лесные и горные регионы, острова или пустыни, где доступ к обычным коммуникационным
сетям и сетевым ресурсам ограничен. Благодаря современным технологиям связи, такие
предприятия могут преодолеть эти проблемы и обеспечить надежное и эффективное
функционирование. Проблема голосовой коммуникации между пользователями,
действующими в местности, удаленной от крупных городов и распределенной сетевой
инфраструктуры в настоящий момент эффективно решается при помощи спутниковых
технологий. Однако для более сложных задач, таких как, обеспечение мониторинга местности,
видеотрансляция или удаленное управление, данные технологии не являются эффективными
[2].
Целью данной работы является изучение и проектирование систем связи, позволяющих
решать различные задачи на территории, где отсутствуют возможности по использованию
общедоступной Интернет-связи. В перечень подобных задач входит мониторинг местности
(т. н. умная окружающая среда), промышленный интернет вещей, удаленное управление
объектами производства. В докладе предлагаются варианты организации мобильной связи для
труднодоступной местности, позволяющие реализовать различные сценарии использования,
решающие указанные задачи.
268СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
В качестве примера области применения рассматривается реализация системы связи в
лесной местности, характеризуемой наличием препятствий для распространения
беспроводного сигнала в виде растительности. Для данного типа местности предлагается
концептуальная модель автономного роботизированного устройства, выполняющего
мониторинг территории и работы по посадке семян и рубке ухода [2]. При необходимости
устройство должно иметь возможность получить команды управления от оператора и
отправить данные телеметрии и окружающей обстановки. Для решения данной задачи
необходима реализация канала связи. Указанная проблема является частным случаем задачи
мониторинга территории, в связи с чем можно говорить о том, что проектируемые решения
позволят решать аналогичные задачи в других отраслях и на других типах местности.
Модель потерь при распространении сигнала. При определении возможной
эффективности различных методов передачи сигнала важно учитывать особенности
распространения сигнала в конкретной среде. В условиях лесистой местности влияние на
характеристики связи оказывают потери в открытом пространстве и ослабление сигнала,
вызванное препятствиями в виде растительности. Для оценки величины потерь сигнала,
выражаемой в дБ, применяется один из вариантов формулы передачи Фрииса [4]:
2
4𝜋𝑑𝑓
𝐹𝑆𝑃𝐿 = ( ) , (1)
𝑐
где 𝑐 – скорость света в вакууме, 𝑑 – расстояние от передатчика (м), 𝑓 – частота сигнала (Гц).
Выражение расчета затухания, выраженного в децибелах, выглядит следующим
образом:
2
4𝜋𝑑𝑓 4𝜋
𝑭𝑺𝑷𝑳 = 𝟐𝟎 𝐥𝐨𝐠 ( ) = 𝟐𝟎𝐥𝐨𝐠 𝒅+𝟐𝟎𝐥𝐨𝐠 𝒇+𝟐𝟎𝐥𝐨𝐠 ( )
𝟏𝟎 𝑐 𝟏𝟎 𝟏𝟎 𝟏𝟎 𝑐
= 𝟐𝟎𝐥𝐨𝐠 𝒅+𝟐𝟎𝐥𝐨𝐠 𝒇+𝒄𝒐𝒏𝒔𝒕 (2)
𝟏𝟎 𝟏𝟎
Для d, f, заданных в метрах и мегагерцах, соответственно, значение const будет
составлять -27.55.
Существующая рекомендация международного союза электросвязи P.833-10 позволяет
провести теоретическую оценку величины затухания сигнала при распространении вдоль
поверхности, покрытой растительностью [1]. Универсальная модель, подходящая для
различных типов местности и времени года, описывается следующим выражением:
𝐿 (дБ) = 𝐴𝑓𝐵𝑑𝐶(𝜃+𝐸)𝐺, (3)
𝑣𝑒𝑔
где параметры 𝒅, 𝒇 аналогичны параметрам формулы передачи Фрииса, 𝜃 – угол места (град.),
𝐴,𝐵,𝐶,𝐷,𝐸,𝐺 – параметры, определенные эмпирически. В дальнейших расчетах
используются значения параметров, приведенные в качестве примера авторами [1].
Поскольку предполагается вариант взаимодействия, при котором отсутствует какое-
либо подключение к магистральной сети, рассматриваются сетевые архитектуры,
обеспечивающие автономное взаимодействие устройств в сети. Такие топологии, как «mesh»,
точка-точка и звезда являются допустимыми для заданных условий. В качестве
перспективных технологий для обеспечения связи в труднодоступной местности
рассматриваются протоколы ZigBee, Bluetooth Low Energy, 5G, LTE, FPV.
269СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Реализация сети на основе протокола ZigBee. ZigBee является одним из наиболее
популярных стандартов в области Интернета Вещей и автономных систем. Этот статус
обусловлен открытой спецификацией, доступностью недорогого оборудования и
энергоэффективностью. В контексте поставленной задачи ZigBee демонстрирует соответствие
требованиям по дальности передачи и энергопотреблению. Его низкие затраты на установку
оборудования и спецификация топологии позволяют создать бюджетную автономную сеть
даже в отдаленных и труднодоступных местах. В публикациях по связанным тематикам
проведено исследование максимальных расстояний передачи устройств ZigBee в топологии
"точка-точка". Установка ретрансляторов на стволах деревьев с применением
всенаправленных антенн позволила достичь максимальной дальности передачи в 65 метров
для маршрутизаторов и 50 метров для конечных устройств. Средний уровень сигнала на таком
расстоянии составил -65 дБм. В эксперименте, проведенном авторами, для охвата площади в
3000 квадратных метров потребовалась установка 10 маршрутизаторов. Расположение
маршрутизаторов и конечных устройств относительно друг друга оказывает влияние на
дальность передачи – маршрутизаторы должны быть в зоне видимости своих
"предшественников" и "последователей" на пути передачи сигнала и не должны быть закрыты
деревьями. Кроме того, для обеспечения большего радиуса охвата, координатор сети должен
быть размещен в наиболее открытой зоне, свободной от растительности, и на высоте,
сопоставимой с высотой остальных устройств. Авторы также утверждают, что рельеф
местности и погодные условия оказывают влияние на работу беспроводной сети [5].
С целью оценки характеристик ZigBee-передатчика в заданных условиях использования
выполним расчет электростатического потенциала линии связи. Для этого вычисляется
максимально допустимая величина ослабления сигнала (Maximum Path Loss):
𝑴𝑷𝑳(дБ) = 𝑮 − 𝑺 −𝑺𝑵𝑹 − 𝒎 , (4)
𝑻𝑿 𝑹𝑿 𝒓𝒆𝒒 𝒓𝒆𝒒
где 𝑮 – мощность сигнала передатчика (дБм), 𝑺 – чувствительность приемника (дБм),
𝑻𝑿 𝑹𝑿
𝑺𝑵𝑹 – допустимое соотношение сигнал/- шум для заданного вида модуляции, 𝒎 – «окно»
𝒓𝒆𝒒 𝒓𝒆𝒒
мощности, принимающее во внимание помехи сигнала.
В качестве характеристик передатчика и приемника были выбраны данные,
используемые в [6]. С учетом полученных значений, а также m = 10 дБ, SNR = 12.5 дБ (для
req
типа модуляции QPSK) получим MPL = 83.5(дБм).
Искомое предельное расстояние передачи может быть вычислено путем нахождения
величины затухания сигнала при распространении в свободном пространстве (2) и в
растительной среде (3). Сопоставив данную величину со значением MPL мы найдем значение
параметра d:
20log 𝑑 +0.25𝑓0.39𝑑0.25 = 𝐺 −𝑆 −𝑆𝑁𝑅 −𝑚 −20log 𝑓+𝑐𝑜𝑛𝑠𝑡 (5)
10 𝑇𝑋 𝑅𝑋 𝑟𝑒𝑞 10
В результате расчетов получено значение d ≈ 34.7 (м). Величина расстояния
сопоставима с реальными результатами экспериментов в [5].
Пример схемы подключения для сети, состоящей из наземной станции управления и
автономного устройства, с использованием ZigBee «mesh» маршрутизаторов приведен на
рисунке 1. Необходимым условием функционирования сети является наличие координатора
270СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
соединений; количество маршрутизаторов определяется в зависимости от условий среды и
требуемого покрытия сигнала. Подобная система является полностью автономной, мобильной
и позволяет обеспечить высокую дальность передачи благодаря использованию «mesh»-
топологии. Спецификация ZigBee поддерживает скоростной режим до 250 Кбит/с, и таким
образом допускает передачу таких данных, как команды управления, телеметрии и показаний
измерительных узлов. Для передачи более объемных данных, таких как медиаконтент, могут
быть использованы различные подходы к сжатию информации [3; 8].
Характеристики сети на основе протокола Bluetooth Low Energy будут почти полностью
аналогичными: поддержка топологии «mesh», радиочастотный диапазон, характеристики
дальности связи. При этом, модули, поддерживающие Bluetooth 5.0, обеспечивают скорость
до 2 Мбит/c, предоставляя возможность для передачи более объемных данных, чем в ZigBee-
сети.
Рис. 1. Схема подключения устройств в ZigBee-сети
Применение указанной архитектуры возможно в сферах промышленного контроля и
мониторинга местности. Поскольку скоростные характеристики технологий ZigBee и BLE
ограничены, при организации подобного канала связи возможен обмен данными малого
объема. Указанная сеть является возможным решением для организации сети датчиков,
расположенных на предприятии или территории, где невозможно организовать проводной
доступ в Интернет, а возможностей бытовых беспроводных технологий (таких как Wi-Fi)
недостаточно для решаемых задач. Благодаря использованию топологии «mesh», сеть является
гибкой и масштабируемой, установка достаточного количества маршрутизаторов позволит
обеспечить связью территорию требуемых размеров. Примеры производств, на которых
применение подобной системы является перспективным, включают в себя фабричные
(мониторинг цеха), сельскохозяйственные (слежение за активностью животных и состоянием
среды/климата, системами полива), горнодобывающие (мониторинг безопасности, движения
грузов и оборудования) и строительные предприятия (управление и мониторинг
стройплощадки).
Реализация сети на основе протоколов 5G и LTE. В настоящее время
телекоммуникационными компаниями выпускаются различные комплекты для разработчиков
IoT-решений. Подобные наборы имеют практический потенциал для реализации автономной
сети, разворачиваемой в труднодоступной местности. Один из таких комплектов основан на
271СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
применении стандартов сотовой связи 5G и LTE (см. №3 таблицы в приложении 1). Сфера
возможных применений устройства включает в себя робототехнику, БПЛА и системы
мониторинга.
Набор включает в себя:
1. одноплатный компьютер для управления устройством;
2. радиочастотный модуль с различными режимами работы (5G FR1 (450 МГц-6000
МГц), 5G FR2 (24250 МГц-52600 МГц), LTE Cat 20, GNSS, WCDMA (900-2100 МГц));
3. отладочную плату для установки и подключения периферийного оборудования;
4. антенны (5G sub-6GHz, GNSS и 5G mmWave);
5. блоки питания.
В связи с необходимостью передачи данных на большие расстояния в предлагаемой
системе мы ограничимся анализом характеристик передачи данных по линиям связи в
диапазонах 5G FR1, LTE и WCDMA, которые находятся в нижней части радиочастотного
спектра. Скорость передачи данных в модулях, поддерживающих различные частотные
диапазоны, различна. В поколениях LTE, 4G (600–900 МГц) скорость составляет 200 Мбит/c
для исходящего соединения (от абонента к базовой станции). В диапазоне WCDMA (800–2100
МГц) скорость передачи равна 5.76 Мбит/c, а в среднечастотном диапазоне (1.7–4.7 ГГц)
колеблется от 100 до 200 Мбит/c. Такие значения пропускной способности обеспечивают
надежную передачу больших объемов данных от автономных устройств, таких как сенсоры и
видеоданные, в режиме реального времени с минимальными задержками. В идеальных
условиях радиус покрытия станции может достигать нескольких десятков километров.
Выполним расчет характеристик линии связи для радиочастотного модуля Quectel
RM510Q (см. №2 таблицы в приложении 1), поддерживающего поколение сетей сотовой связи
5G. Планируется разместить передатчик на земле под углом наклона к приемнику, близким к
нулю. Параметр G для частот менее 6Ггц составляет 23 Дбм; S в указанной ширине канала
TX RX
равен ~101 Дбм (см. № 1 таблицы в приложении 1), SNR для модуляции 128QAM ≈24.64 Дб
[7]. В расчетах в качестве параметра f приняты минимальное, среднее и максимальное
значения частот передачи в диапазоне 5G FR1: n71 – 600 МГц (ширина полосы 5 МГц); n79 –
4700 Мгц (ширина полосы 10 МГц); n7-2600 (ширина полосы 5 МГц).
В LTE-режиме оценка характеристик осуществляется на основе граничных значений
полосы пропускания (LTE B71 – 600 МГц и LTE B46 – 5200 МГц). Устройство поддерживает
категорию LTE CAT 20, что предполагает применение модуляций 64QAM, 256QAM,
1024QAM (см. №1 таблицы в приложении 1). В расчетах принято значение SNR = 27.7 дБ
(допустимое для 256QAM) [7]. Чувствительность приемника, как и в предыдущем случае,
составляет ≈101 дБм.
Для режима WCDMA проводится анализ граничных частотных диапазонов 800 и 2100
МГц (полосы B6 и B19). В отличие от LTE и 5G, этот метод передачи данных использует
модуляцию QPSK с более низким требуемым значением отношения сигнал-шум (SNR) в
размере 8.4 дБ [7]. Чувствительность приемника в данном случае составляет примерно 90 дБм.
Как и в предыдущих случаях, для расчетов используется соотношение (5). Теоретические
272СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
показатели дальности (d ) представлены в таблице 1. Заметно, что исходной мощности
eval
передатчика недостаточно для охвата расстояния хотя бы в 1 км. В этой связи предполагается
использование комплекта антенн 5G sub-6 GHz и GNSS. Дополнительное усиление достигает
26 дБ, и в этом случае мощность устройства выходит за пределы законодательно
установленного значения EIRP, что может потребовать разрешения от соответствующих
органов (Заседание ГКРЧ от 07.05.2007 (протокол № 07-20), https://clck.ru/36f6xA). При
использовании дополнительного усиления сигнала эффективными диапазонами частот для
передачи являются 600 и 800 МГц (5G FR1 n71, LTE B71, WCDMA 800). Расчетный показатель
дальности с использованием антенн представлен в столбце под именем d . Архитектура
ant
сети, аналогичной по топологии рассмотренному ранее варианту с использованием
технологии ZigBee, изображена на рисунке 2.
Таблица 1
Сравнение дальности передачи различных режимов модуля 5G
Технология Полоса f, Ширина полосы, Тип d , d ,
eval ant
связи частот МГц МГц модуляции м м
n71 600 5 128QAM 280 2160
5G FR1 n7 2600 5 52 363
n79 4700 10 26 175
LTE B71 600 5 256QAM 215 1727
LTE CAT 20
LTE B46 5200 10 18 125
B6 800 5 QPSK 311 2200
WDCMA
B19 2100 5 101 673
Рис. 2. Схема подключения устройств в сети с использованием технологии 5G
Технологии 5G и LTE обладают высокой пропускной способностью и низкой задержкой,
что делает их эффективными для широкого спектра промышленных применений, даже на
труднодоступных местностях. Приведенный пример сети обладает достаточными
параметрами эффективности соединения для передачи сложных и объемных данных, таких
как медиа файлы, команды управления и данные телеметрии. Несмотря на то, что в условиях
273СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
лесной местности предельные расстояния между участниками подобной сети сокращаются в
связи с препятствиями для распространения сигнала, в других типах местности подобная
реализация покажет высокую эффективность. Помимо горнодобывающей, лесной и
сельскохозяйственной промышленности, где необходимо обеспечение мониторинга средств
производства, система, основанная на 5G может применяться для обмена объемными данными
в транспортных и логистических системах (удаленное управление и контроль доставки), в
сфере энергетики (удаленный контроль оборудования и оптимизация). Помимо передачи
данных, указанные технологии позволят осуществлять голосовую связь между работниками
предприятия, что позволит оперативно решать возникающие при производстве проблемы.
Параллельно с развитием и распространением технологий сотовой связи пятого
поколения, в настоящий момент происходит обсуждение и подготовка к разработке стандарта
6G, планируемое внедрение намечено на 2028–2030 год. Предполагается, что стандарт
обеспечит объединение сетей различного функционала, будет использовать аддитивные
диапазоны частот (6 ГГц, mmWave, терагерцовую частоту), а также обеспечит поддержку
технологий искусственного интеллекта и больших данных [8]. Таким образом, можно
предположить, что решения, основанные на 6G обладают перспективностью для
рассматриваемых классов задач.
Реализация сети на основе технологии FPV. Для функционирования сети, состоящей из
станции управления и автономного устройства, выполняющего мониторинг/снятие
показателей, могут использоваться технологии, применяемые в FPV-системах. Подобные
системы представляют собой комплекты технических устройств, обеспечивающих передачу
изображения по выделенному видеоканалу от летательного устройства пилоту [6]. В
настоящее время на рынке существуют как цифровые, так и аналоговые решения, рабочие
диапазоны вещания включают 900 МГц, 1.3 ГГц, 2.4 ГГц, 5.8 ГГц. Данные системы изначально
обладают высокой пропускной способностью, что позволяет передавать видеосигналы с
БПЛА на системы управления. Коммуникационные комплекты, использующие более низкие
частоты, имеют большую дальность действия и лучше проникают сквозь препятствия, что
делает их применимыми в сложных условиях местности. Однако использование частот ниже
2,4 ГГц требует официального разрешения со стороны регулирующих органов, что серьезно
ограничивает возможности внедрения таких коммуникационных систем. Наилучшими
режимами вещания FPV-систем для местности, характеризуемой наличием растительности
являются 900 и 1300 МГц.
Вычисление теоретической предельной дальности сигнала выполняется по тому же
принципу, что и для раннее рассмотренных вариантов сети. Подставив характеристики
выбранных устройств в (5), получим значения, приведенные в таблице 2 в столбце deval.
Можно заметить, что в заданных условиях исходной мощности сигнала недостаточно для
покрытия значительной площади. Для решения проблемы может применяться усиление за
счет использования направленных антенн на принимающей стороне (в данном случае – на
управляющей станции). Существующие варианты решетчатых широкополосных антенн
поддерживают значения мощности усиления до 26 дБ. В столбце dant таблицы 2 представлены
274СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
вычисленные значения эффективной дальности передачи с использованием антенны Excel-
Wireless Communications 600–6500 MHz Grid Paraboliс. Можно заключить, что размещение
антенны на приемной стороне существенно расширяет радиус действия для приема сигнала.
Подключение оборудования с подобными характеристиками может потребовать установки
мощного источника питания, такого как дизельный генератор. В данном случае нарушается
условие эквивалентности характеристик передатчика и приемника, что делает канал передачи
видеоданных симплексным. Для отправки команд управления и телеметрии требуется наличие
второго канала связи со сниженными характеристиками энергопотребления, например,
использующего сети ZigBee или Bluetooth в режиме «mesh». Схема подключения устройств
приведена на рисунке 3.
Таблица 2
Сравнение характеристик передачи аналоговых FPV-систем
Модель FPV-устройства f, ГГц 𝐺 , дБм 𝑆 , дБм 𝑑 , м 𝑑 , м
𝑇𝑋 𝑅𝑋 𝑒𝑣𝑎𝑙 𝑎𝑛𝑡
WC-054-000 0.9 29 -85 248.5 1771.6
Matek VRX-1G3 1.3 21 -95 180.6 1256.7
FuriousFPV FPV-VTX-24GF 2.4 29 -90 112.9 716.4
FPV Eachine TX805 5.8 ГГц 5 29 -90 48 295
Рис. 3. Схема подключения устройств в сети с использованием FPV-связи
В отличие от вариантов реализации сети с применением ZigBee и систем сотовой связи,
указанное решение обладает ограниченной сферой применения. Основной вариант
использования – удаленное управление роботизированными устройствами, БПЛА и
колесными платформами. Благодаря применению данных устройств в труднодоступной
местности могут выполняться геологические исследования, мониторинг леса, аэрофотосъемка
и геологоразведка, инспекция катастроф и чрезвычайных ситуаций.
В ходе проектирования были разработаны три альтернативных варианта для реализации
системы связи между автономным устройства и станцией управления, функционирующей в
условиях труднодоступной лесной местности. Несмотря на то, что изначально была
определена конкретная задача разработки, предлагаемые решения могут использоваться в
различных классах задач. Расчетные характеристики позволяют говорить о том, что данные
технологии являются перспективными для организации автономной связи на территории с
275СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
другими типами местности, где не так велико влияние препятствий на распространение
сигнала (например, поля, пустыни, горные территории). Выбор в пользу той или иной
приведенной технологии должен выполняться на основе данных о характере передаваемых
данных (объем, структура, требуемая пропускная способность), бюджета проекта и требуемой
площади покрытия. Наиболее вероятные сферы применения, расчетные и заявленные
характеристики сетевых технологий, позволяющих реализовать связь в условиях
труднодоступной местности, представлены в таблице 3.
Полученные результаты данного обзора будут использованы при реализации системы
связи для проекта «Лесной робот». Помимо проектирования аппаратной части комплекса
связи планируется реализация программного обеспечения, позволяющего повысить
эффективность соединения.
Таблица 3
Сравнительные характеристики вариантов реализации системы связи
для труднодоступной местности
Частотный Максимальная Расчетная
Необходимая
Технология диапазон скорость дальность Сфера применения
аппаратура
сигнала передачи передачи
ZigBee Модули 2400 МГц 250 Кбит/c 35 метров Сети датчиков –
Bluetooth «mesh», 2 Мбит/c (между mesh- мониторинг
координаторы узлами) помещений и
сети территорий
5G, LTE 5G Devkit, 600; 800 100 Мбит/c 2200 метров Сети датчиков,
GSM-модули МГц (с видео-
(х2), sub-6 применением мониторинг,
GHz/GNSS- направленной удаленное
антенны антенны) управление,
голосовая связь
FPV FPV-TX, 900 МГц; до 60 Мбит/c 1770 метров Удаленное
FPV-RX, 1300 МГц (с антенной) управление
антенны робототехникой
Поддержка исследований. Исследование выполнено за счёт гранта Российского научного
фонда №22-11-20040 (https://rscf.ru/project/22-11-20040/), проводимого совместно с
Республикой Карелия с финансированием из Фонда венчурных инвестиций Республики
Карелия (ФВИ РК).
Литература
1. Ослабление сигналов растительностью. Международный союз электросвязи. Женева:
ITU 2022, 33 с. https://clck.ru/39o2Nj
2. Рего Г.Э., Корзун Д.Ж., Щеголева Л.В. Проект «лесной робот»: концептуальная
модель анализа движения мобильной робототехнической системы для лесовосстановления и
рубок ухода // Перспективы и возможности использования цифровых технологий в науке,
образовании и управлении: сб. мат-ов Всероссийской научно-практической конференции (г.
Астрахань, 21-23 апреля 2022 г.). Астрахань, 2022. С. 206-210.
3. Ansari A.W., M. Garg, S. Choudhury and R. Singh ARM based real time video streaming
using XBee for perimeter control in defense application // 2014 International Conference on
276СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Computing for Sustainable Global Development (INDIACom). New Delhi, India, 2014. Pp. 943-947.
https://doi.org/10.1109/IndiaCom.2014.6828103
4. Friis H.T. A note on a simple transmission formula // Proceedings of the IRE. 1946. Т. 34.
№5. P. 254-256. https://clck.ru/39ny8J
5. Gay-Fernandez J.A., Sanchez M.G., Cuinas I., Alejos A.V., Sanchez J.G., Miranda-Sierra
J.L. Propagation analysis and deployment of a wireless sensor network in a forest // Progress In
Electromagnetics Research. 2010. Т. 106. P. 121-145. https://clck.ru/39nySV
6. Grijalva S., Aguilar W.G. Landmark-Based Virtual Path Estimation for Assisted UAV FPV
Tele-Operation with Augmented Reality // Intelligent Robotics and Applications: 12th International
Conference, ICIRA 2019, Shenyang, China, August 8-11, 2019, Proceedings, Part VI 12. Springer
International Publishing, 2019. P. 688-700. https://doi.org/10.1007/978-3-030-27529-7_58
7. Nishimori K., Kitao K., Imai T. Interference-Based Decode and Forward Scheme Using
Relay Nodes in Heterogeneous Networks // International Journal of Antennas and Propagation. 2012.
https://doi.org/10.1155/2012/103501
8. Wang C.X., You X., Gao X., Zhu X., Li Z., Zhang C., Hanzo L. On the road to 6G: Visions,
requirements, key technologies and testbeds // IEEE Communications Surveys & Tutorials. 2023.
© Ивашнев К.Р., Корзун Д.Ж., 2024
277СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.9
Каверина И.С.
научный сотрудник
Стасевский В.И.
младший научный сотрудник
Сибирский государственный медицинский университет
г. Томск, Россия
Шиманская Е.А.
QA инженер
SSP SOFT
г. Томск, Россия
СОЗДАНИЕ ЧАТ-БОТА ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ПРОЕКТА ПРОФИЛАКТИКИ
ХРОНИЧЕСКИХ НЕИНФЕКЦИОННЫХ ЗАБОЛЕВАНИЙ «ПРЕВЕНТОРИУМ»
Аннотация. В статье описан Telegram-бот для пользователей интернет-платформы
«Превенториум» Сибирского государственного медицинского университета г. Томска. Целью
проекта выступает сокращение риска возникновения и развития хронических
неинфекционных заболеваний (ХНИЗ) у людей, находящихся в группе риска. Telegram-бот
позволяет реализовать такие задачи, как предоставление научно-популярной информации,
проведение онлайн-курсов и опросов, мотивирование на достижение целей и контроль
прогресса.
Ключевые слова: чат-бот; Telegram-бот; детское ожирение; здоровый образ жизни.
В настоящее время всё больше людей включаются в заботу о своем здоровье:
придерживаются принципов правильного питания, регулярно занимаются физической
активностью и сознательно отказываются от вредных привычек. В определенной мере этому
способствует возрастающее количество IT-проектов, направленных на помощь в изменении и
поддержании здорового образа жизни.
К наиболее распространенному виду ХНИЗ можно отнести ожирение. Самый широко
используемый критерий диагностики ожирения у взрослых – индекс массы тела (ИМТ). Этот
показатель позволяет оценить степень ожирения и относительный риск развития заболеваний,
ассоциированных с ожирением. Основным критерием диагноза ожирения у детей и
подростков является определение стандартного отклонения величины ИМТ с поправкой на
пол и возраст ребенка [1, с. 73].
На данный момент в рамках проекта «Превенториум» создан интернет-портал,
выполняющий функции информационного ресурса и сбора данных об образе жизни
(https://preventorium.ru). Однако использование веб-интерфейса для указанных задач не всегда
удобно для пользователя, поскольку частый сценарий самостоятельного использования
портала – однократное посещение сайта с изучением информации. Для реализации
полноценного функционала требуется применение современных инструментов оповещения и
сбора данных, например чат-бота.
Боты представляют собой специальные программы, предназначенные для получения
новостей, поиска информации и ряда других функций, главной задачей которых является
предоставление автоматического ответа пользователю после введения им определенной
278СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
команды, имитируя человеческое общение, чаще всего при помощи текста. В проекте нами
был использован чат-бот ассистент, разработанный в дополнение к основной онлайн-версии
сайта. Целью которого является сбор, обработка и хранение пользовательских ответов на
пищевые опросники. Опросники помогают формировать представление о том, на какие
привычки в питании стоит обратить внимание и когда состояние пациента требует обращения
к специалисту. После проведения анализа литературы, были выбраны два вида опросников.
Первый из которых – опросник DEBQ (Dutch Eating Behaviour Questionnaire),
предназначенный для взрослых людей с избыточным весом, вызванным перееданием.
Недостатком данного опросника является то, что подростки и взрослые с нормальными
значениями веса могут демонстрировать повышенные значения по шкале ограничительного
и/или эмоционального питания из-за подверженности влиянию масс-медиа.
Второй выбранный нами опросник CEBQ применяется для анализа пищевого поведения
детей и представляет собой адаптированный для них вариант опросника DEBQ. Он оценивает
восемь областей питания, связанных с развитием ожирения, включая восприимчивость к
пище, удовольствие от еды, эмоциональное переедание, чувство жажды, восприимчивость к
сытости, медлительность, эмоциональное недоедание и разборчивость в еде [2]. Измерения,
полученные с помощью этого опросника, могут быть использованы для анализа отношения
между пищевым поведением и факторами, такими как возраст, пол, наследственность,
культурные различия. Отмечается, что использование опросника поможет в проведении
исследований изучения взаимосвязи между стилем питания и последующим развитием
ожирения [3, с. 969].
Платформой разработки чат-бота (https://t.me/preventoriumbot_bot) для проекта
«Превенториум» был выбран Telegram, являющийся бесплатным мессенджером для
смартфонов и персональных компьютеров под управлением наиболее распространенных
операционных систем. Среди преимуществ Telegram по сравнению с другими мессенджерами
можно выделить скорость, шифрование трафика, облачное хранение данных, нарастающая
популярность на территории Российской Федерации. Так, по данным TGStat, с 2021 по 2023
года аудитория Telegram выросла в два раза, каждый месяц мессенджер используют более 75
миллионов человек (https://clck.ru/39hFhS). По данным Mediascope после первого квартала
2023 г. Telegram занимает шестое место в рейтинге ежедневно посещаемых площадок, уступая
WhatsApp (принадлежит компании Meta, признанной экстремистской и запрещенной в РФ),
Яндекс, Google, Вконтакте и Youtube (https://clck.ru/39hFYC).
Для регистрации Telegram-бота был использован официальный сервис Telegram –
BotFather. Для создания бота была использована интегрированная среда разработки PyCharm,
которая позволяет значительно повысить эффективность разработки Telegram-бота
(https://clck.ru/39hFEy). Разработка сценариев чат-бота осуществлялась с использованием
онлайн-сервиса Figma (https://clck.ru/39hF7c). Этот инструмент позволяет не только
разрабатывать дизайн-проекты, но и создавать простые наглядные схемы для любых задач, в
том числе структурные схемы Telegram-ботов. С помощью указанного сервиса были
279СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
разработаны сценарии чат-бота в формате структурной схемы. На рисунках 1-3 представлены
основные виды сценариев, реализованных в чат-боте.
Рис. 1. Сценарий знакомства с пользователем
280СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 2. Сценарий прохождения опросника CEBQ
281СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 3. Сценарий предоставления ссылок на полезные ресурсы
Для реализации базы данных Telegram-бота была использована SQLite – система
управления базами данных (СУБД), которая позволяет создавать базы данных и управлять ими
без необходимости установки дополнительного серверного программного обеспечения. Она
наиболее эффективна для работы с небольшими проектами, такими как Telegram-боты, где
требуется сохранение и получение информации о пользователях и их запросах
(https://clck.ru/39hFQ5).
Далее было проведено функциональное тестирование основных пользовательских
сценариев чат-бота.
Проверено:
1. авторизация пользователя;
2. прохождение опросников с возможностью многократного повторения их после
определенного временного периода и представление результатов опросника для пользователя
(рис. 4);
282СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
3. периодическое получение пользователем сообщений с рекомендациями о простых
действиях, направленных на формирование здорового образа жизни.
Рис. 4. Прохождение опросников на примере DEBQ, представление результатов
Таким образом, разработанный Telegram-бот предоставляет пользователям возможность
проходить опросники пищевого поведения, получать информацию о простых действиях,
направленных на вовлечение в формирование здорового образа жизни.
Литература
1. Васюкова О.В. Ожирение у детей и подростков: критерии диагноза // Ожирение и
метаболизм. 2019. Т.16. №1. С. 70-73. https://doi: 10.14341/omet10170
2. Manzano M.A., Strong D.R., Kang Sim D.E., Rhee K.E., Boutelle K.N. Psychometric
properties of the Child Eating Behavior Questionnaire (CEBQ) in school age children with
overweight and obesity: A proposed three-factor structure // Pediatric Obesity. 2021. Vol. 16. Issue
10. e12795. https://doi.org/10.1111/ijpo.12795
3. Wardle J., Guthrie C. A., Sanderson S., Rapoport L. Development of the Children’s Eating
Behaviour Questionnaire // Journal of Child Psychology and Psychiatry. 2001. Т. 42. №1. Р. 963-
970.
© Каверина И.С., Стасевский В.И., Шиманская Е.А., 2024
283СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.75
Костеннов Т.В.
аспирант
Омский государственный университет им. Ф.М. Достоевского
г. Омск, Россия
О НЕКОТОРЫХ ПРОБЛЕМАХ БЕЗОПАСНОСТИ В РАЗРАБОТКЕ И
ЭКСПЛУАТАЦИИ СИСТЕМ ИНТЕРНЕТА ВЕЩЕЙ И ВОЗМОЖНЫХ ПОДХОДАХ К
ИХ РЕШЕНИЮ
Аннотация. Настоящая статья посвящена проблемам в области межмашинных
взаимодействий, возникающим при построении и эксплуатации систем интернета вещей.
Рассмотрены проблемы безопасности интернета вещей, высоких накладных расходов для
передачи данных и гетерогенности протоколов связи устройств. Предложены решения,
позволяющие решить возникающие проблемы или упростить разработку систем интернета
вещей.
Ключевые слова: интернет вещей; межмашинные взаимодействия; автоматизация,
безопасность IoT.
Технологии взаимодействия между устройствами в рамках сетей интернета вещей и
промышленного интернета вещей обычно обозначаются термином «M2M» (Machine-to-
Machine, машинное взаимодействие). Концепция M2M предполагает отсутствие или
минимальное участие человека. Быстрый рост сферы интернета вещей и применение
технологий и протоколов в промышленности создают новые вызовы и проблемы для
разработчиков подобных систем. По данным аналитических отчетов, в ближайшие годы
индустрия интернета вещей продолжит свое развитие. Однако использование традиционных
подходов к проектированию может привести к возникновению проблем при улучшении или
расширении существующих систем. Наиболее актуальными из множества существующих
проблем являются безопасность данных, пропускная способность и гетерогенность
протоколов устройств, используемых в системах. Для решения этих проблем необходимо
более детально изучить проблемы и подходы, применяемые в данной области. Предлагается
подробнее рассмотреть проблемы и возможные подходы, используемые для их решения.
Поскольку все больше устройств подключается к Интернету, возникает риск утечки
конфиденциальных данных и взлома систем с использованием уязвимостей сетей связи. Кроме
того, существуют угрозы с физическим доступом к устройствам, поскольку, как было сказано
выше, устройства интернета вещей зачастую работают без участия пользователя [1; 2].
На основе различных типов угроз безопасности систем M2M Европейским институтом
по стандартизации в области телекоммуникаций (European Telecommunications Standards
Institute) были сформированы различные стандарты безопасности в области умных
межмашинных взаимодействий (SmartM2M) (https://www.etsi.org/committee/smartm2m).
Данные стандарты частично или полностью разрабатывались в сотрудничестве с рабочей
группой «WG03», входящей в «Альянс за инновации в области интернета вещей и
периферийных вычислений» (Alliance for IoT and Edge Computing Innovation) и «Техническим
комитетом по кибербезопасности» (Technical Committee CYBER). Организации отмечают, что
284СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
стандарты могут носить рекомендательный или обязательный характер, в зависимости от
целей их использования.
Для использования стандартов в сетях с различными устройствами и способами
построения допускается использовать такие понятия, как «конечное устройство», «шлюз» и
«сервер». Конечное устройство – вычислительное устройство, передающее другим
участникам сети данные о внешней среде. Шлюз – устройство, агрегирующее данные от
конечных устройств и передающее их другим шлюзам и\или серверам. Сервер – программно-
аппаратный комплекс, производящий обработку получаемой от конечных устройств
информации.
Частично обобщив опубликованные компаниями и объединениями стандарты, можно
выработать следующие рекомендации для построения систем M2M:
1. Участники системы M2M должны поддерживать взаимную аутентификацию на
уровнях конечных устройств, шлюзов и серверов;
2. Участники системы M2M должны поддерживать подтверждение целостности данных
сообщений;
3. Политики безопасности должны разрабатываться с учётом предотвращения
несанкционированного доступа и использования конечных устройств и шлюзов;
4. Система M2M должна обеспечивать конфиденциальность передаваемых сообщений;
5. Сообщения в системе M2M должны быть доступны только для их получателей;
6. Система M2M должна обеспечивать возможность сквозного обслуживания
приложений, одновременно обеспечивая безопасность соединений и конфиденциальность
данных;
7. Система M2M должна поддерживать механизм проверки подлинности конечных
устройств и шлюзов;
8. Если устройство, поддерживающее механизм проверки подлинности в системе M2M,
не проходит такую проверку, устройству должно быть отказано в аутентификации;
9. M2M устройства и шлюзы, поддерживающие механизм проверки подлинности,
должны предоставлять доверенную среду для этой цели;
10. При наличии в системе M2M функций обновления программного обеспечения и\или
контекста безопасности эти функции должны иметь механизмы защиты от
несанкционированного доступа;
11. Система M2M должна обеспечивать защиту сервера от атак на отказ в обслуживании
и атак на клонирование и кражу учётных данных;
12. При использовании механизмов кластеризации и при обеспечении связей с другой
M2M системой должен существовать механизм безопасной передачи данных из одной системы
в другую.
Для соблюдения выработанных рекомендаций можно выделить следующие методы
обеспечения безопасности в системах M2M [5]:
 Использование различных видов шифрования, хеширования и в целом алгоритмов
помехоустойчивого кодирования;
285СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
 Использование различных сочетаний алгоритмов аутентификации, авторизации и
идентификации конечных устройств и шлюзов;
 Фильтрация трафика, генерируемого внутри M2M систем;
 Фильтрация трафика, исходящего от M2M систем;
 Использование технологий, обеспечивающих приватность в различных сетях;
Кроме данных методов, направленных на защиту информации передаваемой системами
M2M и разработанных специально для них, можно использовать и противоположный подход
– обезличивание и обесценивание для злоумышленников передаваемых данных. Ценность
данных, получаемых злоумышленником при несанкционированном проникновении в систему,
значительно снижается, если данные невозможно использовать для получения выгоды или
дальнейшего проникновения в другие системы [4].
В качестве примера рассмотрим отчёт исследователя безопасности Sam Sabetan о
уязвимостях, найденных в продуктах компании «Nexx» в апреле 2023 года
(https://clck.ru/39vti4). Компания занималась разработкой устройств интернета вещей для
управления гаражными воротами. Одна из обнаруженных исследователем уязвимостей
связана с использованием и открытой передачей жестко заданных реквизитов для входа и
имеет код CWE-798 (https://clck.ru/39vtha). При успешной атаке злоумышленник получает
доступ к адресу сервера компании и, что более ценно, имя пользователя и пароль для доступа
к учётной записи администратора MQTT брокера. Для всех устройств компании использовался
один сервер с единственным брокером. Дальнейшие действия потенциального
злоумышленника и использование других уязвимостей позволяли получить доступ к
устройствам всех пользователей продуктов компании.
Хотя данная уязвимость системы может показаться чрезмерно важной для
существования системы в целом и позволяющей осуществлять произвольные действия,
использование шифрования или других методов для сокрытия данных может быть не самым
эффективным решением. Более рациональным подходом будет отказ от передачи таких данных
как в открытом, так и в защищенном виде.
Кроме проблем безопасности, рост количества устройств в сфере IoT приводит к
достижению лимитов пропускной способности текущих сетей связи (https://clck.ru/39vtfM). В
2016 году на «Всемирном мобильном конгрессе» (Mobile World Congress) исследователи из
компаний Nokia и Ericsson говорили о недостаточности сетей 4G-LTE для обеспечения всех
устройств интернета вещей, которые появятся в период с 2016 до 2026 года
(https://clck.ru/39vtgS). За прошедшее время было предложено множество новых стандартов и
протоколов связи для решения этой проблемы, таких как, например, NB-IoT, 5G, однако
скорость их распространения ниже ожидаемой из-за множества различных факторов. Кроме
того, существуют устройства интернета вещей, работающие в уже существующих сетях,
используя не специализированные сетевые протоколы. По прогнозам аналитиков, динамика
рынка интернета вещей сохранит тренд на устойчивый рост (https://clck.ru/39vtjF).
286СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Таблица 1
Прогноз количества устройств интернета вещей
Год 2015 2016 2017 2018 2019 2020 2021 2022 2023 2024 2025 2026 2027
Устройств,
3,6 4,6 6,1 8 10 11,3 12,2 14,4 16,7 19,2 22,2 25,5 29,7
млн
Решением проблемы пропускной способности действительно могут стать новые
разрабатываемые специализированные протоколы и стандарты. Одним из таких стандартов
может стать NB-IoT (NarrowBand Internet of Things), внедрение которого на текущий момент
сталкивается с наименьшим количеством затруднений. Стандарт разработан консорциумом
3GPP для передачи небольших объёмов данных с заданным периодом и полностью завершён
ещё в 2016 году (https://www.3gpp.org/news-events/3gpp-news/nb-iot-complete).
Также решением может стать изменение подхода к проектированию M2M систем в
сторону максимальной экономии пропускной способности, например, уменьшение частоты
опросов различных датчиков, агрегации и обработки данных на конечных устройствах и\или
уплотнение упаковки данных в рамках одной передачи.
Рассмотрим пример системы, в которой для устройств интернета вещей используется
протокол MQTT, минимальный размер заголовка которого равен 2 байтам.
Таблица 2
Структура заголовка протокола MQTT
Бит 7 6 5 4 3 2 1 0
1 байт Тип сообщения Вспомогательные флаги
2 байт Длина сообщения
Предположим, что в рамках одного сообщения передаётся 2 байта полезной информации.
Таким образом, размер пакета MQTT составит 4 байта. Единичный пакет протокола MQTT
инкапсулируется в VPN-туннель. Пакет шифруется, после чего к нему добавляется заголовок,
размер которого зависит от используемого VPN протокола и составляет от 18 до 32 байт.
Общий размер сообщения на данном этапе составляет от 20 до 34 байт.
Далее получившийся пакет должен быть передан через стек TCP\IP. Для передачи
используется TCP либо UDP протокол, в зависимости от необходимости использования
механизма гарантии доставки. Заголовок пакета UDP состоит из 8 байт и имеет следующий
вид:
Таблица 3
Структура заголовка протокола UDP
1 байт 2 байт 3 байт 4 байт
Порт отправителя Порт получателя
Длина сообщения Контрольная сумма
Заголовок протокола TCP минимально состоит из 20 байт и имеет следующий вид:
287СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Таблица 4
Структура заголовка протокола TCP
Байт 1 2 3-4
0 Порт отправителя Порт получателя
4 Порядковый номер
8 Номер подтверждения
12 Длина заголовка и флаги Размер окна
16 Контрольная сумма Указатель важности
20 Опции и смещение
После упаковки сообщения в один из двух протоколов общий размер сообщения увеличивается и
составляет от 28 до 54 байт. Затем пакет упаковывается в сообщение протокола IP. Заголовок протокола
IP состоит из 20 байт и выглядит следующим образом:
Таблица 5
Структура заголовка протокола IP
Байт 1 2 3 4
4 Версия и длина Тип сервиса Полная длина
8 Идентификатор Флаги и указатель фрагмента
12 Время жизни Протокол Контрольная сумма
16 Адрес отправителя
20 Адрес получателя
К итоговому размеру сообщения добавляется ещё 20 байт, и его итоговый размер
составляет от 48 до 74 байт. Усредним (61 байт) и округлим полученное значение и получим
60 байт на одно значение в 2 байта, накладные расходы на пересылку составили 58 байт или
примерно 94%.
Обычно в системах интернета вещей передаются данные, представляющие собой
показания различных датчиков, размер одного показания может варьироваться, но обычно не
превышает 4 байт, этого достаточно для передачи целого числа с диапазоном от −2 147 483 648
до 2 147 483 647 или числа с плавающей запятой с диапазоном от 3,4E–38 до 3,4E+38.
Решением для уменьшения накладных расходов может стать группировка измерений от
различных датчиков в единый пакет данных и одиночная передача такого пакета вместо
нескольких передач отдельных показаний. Сгруппировав показания от 5 датчиков в один пакет
размером 20 байт и пересылая его с помощью тех же протоколов, что и в примере ранее, можно
получить средний итоговый размер пакета в 80 байт. Накладные расходы в данном случае
составят уже 75% для одной передачи.
Не самым элегантным, тем не менее рабочим решением может оказаться кластеризация
M2M системы и расширение существующих сетевых ресурсов. Зачастую подобное решение
выглядит наиболее простым с точки зрения реализации, однако неизбежно приводит к
проблемам при дальнейшем росте системы.
Ещё одной проблемой в сфере интернета вещей и M2M систем является проблема
гетерогенности протоколов связи между устройствами, что затрудняет интеграцию различных
систем друг с другом. Технологии связи в сфере интернета вещей можно разделить по
различным категориям следующим образом:
 Низкоуровневые протоколы, которые дополнительно подразделяются на:
288СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
◦ Протоколы малого радиуса действия, такие как RFID, NFC (частный случай RFID),
ANT+, Bluetooth (особенно BLE), LiFi, ZigBee, Z-Wave, 6LoWPAN;
◦ Протоколы среднего радиуса действия, такие как 4G+(LTE-Advanced), 5G;
◦ Протоколы дальнего радиуса действия, такие как NB-IoT, LoRaWAN, SigFox;
 Высокоуровневые протоколы, такие как MQTT, AMQP, CoAP, XMPP.
Список используемых протоколов не ограничивается приведенными выше примерами,
стандартизированы и используются и другие. Различные уже существующие устройства
интернета вещей зачастую не поддерживают абсолютно все виды протоколов связи, и
использование таких устройств в построении M2M систем накладывает дополнительные
ограничения [3].
Для решения проблемы гетерогенности протоколов связи можно использовать два
различных подхода. Первый заключается в создании отдельного устройства,
поддерживающего все протоколы, которые используются в построении системы. Такое
устройство может работать на уровне конечного устройства или шлюза. Однако данное
решение увеличивает время разработки системы и её итоговую сложность, а сбой или отказ
устройства становится для системы критическими. Кроме этого, поддержка некоторых
протоколов на устройстве требует наличия дополнительных аппаратных средств для этих
протоколов.
Другим решением будет смена подхода к проектированию системы и максимальная
абстракция от протокольной реализации, при этом нужно оставить возможность встроить
необходимый протокол на уровне передачи данных. Для долговременного использования и
многократных циклов разработки-поддержки следует создавать подобные платформы с
открытым исходным кодом.
Не все из рассмотренных решений могут быть признанными в полной мере
универсальными для решения проблем и построения систем интернета вещей, однако их
использование может в некоторых случаях упростить разработку, эксплуатацию или
поддержку существующих систем, обеспечивающих межмашинные взаимодействия.
Литература
1. Ли П. Архитектура интернета вещей. М. ДМК Пресс, 2019. 456 с.
2. Рыжков А.Е. Развитие технологии NB-IoT // Труды учебных заведений связи. 2017. Т.3.
№4. С. 94-101.
3. Hassan Q.F. (ed.) Internet of Things A to Z: Technologies and Applications. John Wiley &
Sons, 2018. https://doi.org/10.1002/9781119456735
4. Matanat H., Sahi̇N K.G. Information Security In The Internet Of Things System // Endless
light in science. 2023. October. P. 244-246.
5. Muradova A., Gulturaev F. Cyber Security Of The Internet Of Things IoT // Science and
Innovation. 2023. Special Issue №3. P. 10-14. https://doi.org/10.5281/zenodo.7853276
© Костеннов Т.В., 2024
289СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
ВОПРОСЫ МЕТОДОЛОГИИ ФОРМИРОВАНИЯ
ПРОФЕССИОНАЛЬНЫХ КОМПЕТЕНЦИЙ ВЫПУСКНИКОВ
ВУЗОВ ПО IT-НАПРАВЛЕНИЯМ И ВЗАИМОДЕЙСТВИЯ С
ОБЩЕОБРАЗОВАТЕЛЬНЫМИ ШКОЛАМИ
УДК 004.023
Абрамян Г.В.
д-р пед. наук
Российский государственный педагогический университет им. А.И. Герцена
Государственный университет морского и речного флота имени адмирала С.О. Макарова
г. Санкт-Петербург, Россия
МЕТОДОЛОГИЯ ЦИФРОВОЙ ТРАНСФОРМАЦИИ:
ОСОБЕННОСТИ КАПСУЛИРОВАННОГО ОБРАЗОВАНИЯ СТУДЕНТОВ
И ШКОЛЬНИКОВ В ИНТЕЛЛЕКТУАЛЬНЫХ СРЕДАХ МУЛЬТИМОДАЛЬНЫХ
ТРАНСФОРМЕРОВ И ВИРТУАЛЬНЫХ АССИСТЕНТОВ
В УСЛОВИЯХ БИОЦИФРОВОЙ КОНВЕРГЕНЦИИ
Аннотация. В статье рассматривается методология цифровой трансформации и
особенности капсулированного обучения в интеллектуальных средах мультимодальных
трансформеров и виртуальных ассистентов в условиях биоцифровой конвергенции.
Анализируются проблемы и перспективы изолирования и капсулирования традиционных
образовательных ресурсов и их носителей.
Ключевые слова: методология; цифровая трансформация; биоцифровая конвергенция;
мультимодальные трансформеры; виртуальные ассистенты; интеллектуальные среды;
капсулированное обучение.
Процессы формирования профессиональных компетенций выпускников школ и вузов по
IT-направлениям в настоящее время происходят в стремительно трансформирующимся,
нелинейном и неоднозначном мире проектирования и реализации проектов четвертой
промышленной революции и идей биоцифровой конвергенции и трансгуманизма [12, с. 69]. В
мире все более усиливаются геополитические потрясения и системные риски, связанные с:
1) распространением все более опасных известных и новых вирусных, грибковых и
инфекционных заболеваний, 2) кризисом между старыми промышленными и новыми
цифровыми элитами, 3) проблемами глобального и финансового управления, 4) социальной
нестабильностью и безработицей, 3) голодом, ухудшением экологии и вынужденной
миграцией, утилизацией части социума и их каскадными последствиями, которые еще более
усложняют взаимозависимости, скорость и сложность социальных, образовательных,
экономических, политических процессов и систем в мире [1, с. 1302]. В условиях
экономического кризиса, разработки и воплощения идей устойчивого развития, инклюзивного
капитализма, так называемой «зеленой» повестки и создания управляемого тотального
дефицита товаров и инвестиций в мире происходит резкое обесценивание человеческих
жизней. В этих условиях западные и отечественные корпорации и мировые элиты все чаще
290СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
рассматривают обычных людей как экспериментальные объекты биоцифровой конвергенции
с целью превращения человека в человеческий капитал/ресурс и дальнейшего
манипулирования им с целью получения сверхприбылей [7, c. 320]. Одним их эффективных
инструментов такого превращения в настоящее время нам представляется проводимая
цифровая трансформация [3, с. 8] традиционных, в том числе и экономических,
управленческих, социальных, культурных, образовательных и воспитательных процессов
результатом, которой по замыслу авторов должно стать электронный/цифровой
образовательный профиль участников процессов, например образовательных компетенций,
который виртуализирует человека обладающими знаниями, умениями и навыками в
цифровую платформу/аватар персональных данных и позволит системам искусственного
интеллекта оперативно анализировать поведение и сознание человека и принимать решения о
дальнейшей жизни и судьбе людей, а при необходимости и вводить ограничения на права и
свободы человека со стороны как со стороны работодателей корпораций и/или мировых элит,
так и со стороны учебных заведений.
В настоящее время в области образования в РФ последовательно активно обсуждаются
и реализуются инновационные, в том числе цифровые форсайт-проекты: 1) «Будущее
образования и навыков: Образование 2030», 2) «Детство 2030», 3) «Россия 2045»,
4) «Современная цифровая образовательная среда» (СЦОС), 5) «Цифровая школа». Ведущую
роль в разработке и реализации цифровых форсайт-проектов играют: 1) Центр трансформации
образования при Московской школе управления Сколково, 2) Агентство стратегических
инициатив (АСИ) по продвижению новых проектов – автономная некоммерческая
организация, созданная Правительством РФ. К реализации новых цифровых образовательных
форсайт-проектов активно подключаются региональные / федеральные и глобальные ИТ и
коммерческие структуры и корпорации (Сбер, Тинькофф, Яндекс, VK, Google, Microsoft,
Amazon, Samsung Electronics, LG), включая корпорации, банки, бизнес и вузы РФ (Мифи,
Уральский федеральный университет, Тюменский ГУ, Университет 2035 и др.), Корпорация
«Сбер», например, с этой целью создала фонд «Вклад в будущее», основной задачей которого
является апробация цифровой образовательной платформы персонализированного обучения
для реализации индивидуальных траекторий платформенного цифрового обучения, сбора,
накопления и использования персональных данных пользователей.
По мнению разработчиков новых форсайт проектов уже к 2025–2030 г.г. в РФ
необходимо последовательно отказаться от: 1) традиционной системы / модели образования
(так называемого проекта «Гутенберг») так как он уже не обеспечивает потребности
современных корпораций в кадрах, ограничивает развитие корпораций в получении ими
планируемых прибылей, и таким образом старая модель воспитания и образования молодежи
устарела и должна быть трансформирована, 2) одновозрастных / уровневых учебных групп и
классов, 3) дисциплинарного / предметного образования, 4) классно-урочной / лекционно-
практической системы начального, общего и высшего образования, 5) традиционных
воспитателей, педагогов и учителей организованных по дисциплинарному принципу /
предметам / кабинетам / кафедрам, имеющих профессиональное образование, которые в
291СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
новых условиях уже не могут обеспечить адекватный сбор и использование персональных
данных на современном уровне развития ИТ обработки и передачи информации [6, с. 32; 16,
с. 126]. В условиях цифровой трансформации необходимо осуществлять переход к новым
корпоративным образовательно-воспитательным практикам и образовательным проектам в
изолированных цифровых экосистемах, позволяющим обучаемым самостоятельно и
мобильно в основном в игровых и виртуальных средах научиться: 1) «ориентироваться в
современном мире» и 2) «быть конкурентоспособным вызовам будущего», что позволит
собирать более полные сведения и адекватные персональные данные и строить на их основе
профили компетенций и социальные аватары обучаемых.
По нашему мнению, в условиях биоцифровой конвергенции реализация инновационных
форсайт-проектов, цифровая трансформация РФ-образования и новая цифровая экосистема
образования/ воспитания / обучения в РФ должна: 1) быть частично или даже полностью
изолирована / капсулирована от влияния традиционной воспитательной / образовательной
среды / системы, которая должна получить в условиях цифровой трансформации статус
ресурсов ограниченного / исключительного доступа субъектов, 2) быть ориентирована на
перманентное активное виртуально-игровое использование современных:
2.1) интеллектуальных помощников – универсальных воспитательных и учебных зарубежных
и отечественных виртуальных ассистентов (Джой, Афина, Сбер Alexa, Кортана, Google
Assistant, Siri, Маруся, Vlingo, Алиса, Bixby Voice, Bixby Vision, Bixby Home и др.),
2.2) мультимодальных генеративных и предварительно предметно обученных больших
языковых моделей / алгоритмов, например трансформеров типа GPT-4, GPT-3.5 машинного
обучения, например компании OpenAI, 3) изолирована / капсулирована от влияния
традиционных профессиональных преподавателей/воспитателей: 3.1) не разделяющих
методологию цифровой трансформации, 3.2) не одобряющих активный сбор и последующее
использование, например передачу/продажу/обмен и пр. новых товаров – электронных
аватаров, профилей компетенций, персональных данных обучаемых/воспитателей правящим
элитам, глобальному бизнесу для перманентного поиска и отбора оптимального персонала,
3.3) не ориентированных на потребности глобальных корпораций, бизнес-структур и
социальные потребности, практику и запросы отечественных и зарубежных глобальных
мировых элит [2, c. 194; 18, c. 65; 19, c. 64; 20, c. 228]
В современной электронно-цифровой креативной ИТ-школе в виде цифровых
корпоративных платформ обучаемые, прежде всего, должны изучать: 1) современные среды,
инструменты и методы программирования, 2) методы и технологии математического и
компьютерного моделирования сложных систем, 3) средства разработки аппаратных и
программных комплексов вычислительных процессов, 4) актуальные вопросы
кибербезопасности, 5) основы робототехники и средства ее программирования, в том числе
знакомиться с основами использования и принципами создания интеллектуальных роботов,
6) изучать способы разработки и использования интеллектуальных программ-агентов –
автоматических генераторов кода алгоритмов – разработчиков новых программ, 7) изучать
принципы создания распределенных, комплексных, многоагентных моделей алгоритмов для
292СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
совместной работы друг с другом в цифровой среде, 8) изучать принципы создания
интеллектуальных систем и алгоритмов, способных непрерывно самообучаться друг у друга в
течение достаточно длительных интервалов времени, 9) изучать принципы, модели и языки
программирования для создания роботов, интеллектуальных помощников и мультимодальных
трансформеров, 10) изучать принципы самоорганизации обучаемых в цифровой среде,
11) изучать современные методы работы с распределенным /удаленным контентом на основе
процессов 11.1) извлечения, 11.2) чтения, 11.3) обобщения, 11.4) анализа,
11.5) комментирования различных воспитательных / учебных процедур и данных, 12) изучать
принципы генерирования адекватных и креативных реакций / ответов создавая тем самым
новый цифровой контент, процессы и пользователей субъектов: 12.1) надёжного,
12.2) социально-лояльного, 12.3) прогнозируемого и 12.4) креативного, управляемого,
молодого поколения субъектов /пользователей / граждан территорий / анклавов цифровой
среды. В процессе изучения разделов цифровые платформы позволят эффективно и
качественно собирать персональные данные, [8. с. 8; 9, с. 297; 14, с. 125] формировать
электронные портфолио, цифровые аватары обучаемых обучаемых, что позволит в свою
очередь искусственному интеллекту принимать решения об их дальнейшей жизни, судьбе и
правах и передавать эти решения мониторинговым структурам корпоративных и мировых
элит.
По нашему мнению, на практике формирование и наполнение контента аватара/
цифрового профиля компетенций и персональных данных на новых корпоративных цифровых
платформах может осуществляться на основе активной работы обучаемых с современными
интеллектуальными помощниками и ассистентами – роботами: 1) Салют –
многофункциональное и многохарактерное семейство виртуальных ассистентов Джой, Афина
и Сбер (разработчик компания «Сбер»), 2) Bixby – многофункциональное и многохарактерное
семейство виртуальных ассистентов Bixby Voice, Bixby Vision, Bixby Home (разработчик
компания Samsung Electronics), 3) персональный ассистент – облачный сервис Google Assistant
и персонализированный сервис поиска Google Now (разработчик Google), 4) программный
клиент iOS, iPadOS, watchOS, macOS, tvOS – вопросно-ответная система Siri компании Apple,
5) приложение – виртуальный ассистент Voice Mate девайсов LG – Optimus Vu, LTE II, L7, L9,
L9 II, F3, F5, F6, F7, G, G Pro, G2, G Pad 8.3 и др., 6) виртуальный ассистент Alexa компании
Amazon, 7) помощник пользователя – виртуальный ассистент Vlingo для поддержки Symbian,
Android, IPhone, BlackBerry, 8) виртуальный голосовой помощник Алиса компании Яндекс, 9)
виртуальная голосовая помощница с элементами искусственного интеллекта Кортана от
Microsoft, 10) голосовой помощник Маруся компании VK, 11) виртуальный голосовой
помощник Олег в сфере лайфстайл-услуг и финансов группы Тинькофф, 12) автомобильное
мобильное приложение Android Auto от Google и др. Это позволит обучаемым на практике
освоить принципы уверенного и корректного чтения контента, безопасного понимания
цифровых знаков и смыслов, надёжного и социально-лояльного извлечения, обобщения,
анализа, комментирования различных цифровых данных и контента из социальных сетей,
ресурсов цифровых платформ школ и вузов, интернет, СМИ, рекламы, телевидения, а также
293СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
понимать принципы генерирования алгоритмами искусственного интеллекта адекватных и
креативных ответов [15, с. 100]. Для реализации концепции капсулированного цифрового
обучения традиционные средства, формы представления и субъектные носители информации
должны быть по возможности оперативнее трансформированы в изолированные /
капсулированные образовательные ресурсы ограниченного доступа. Формы электронного
обучения на цифровых платформах не должны предусматривать очного присутствия на
занятиях традиционных учителей и/или воспитателей [10, с. 4]. Формирование персональных
программ обучения, поток заданий, образовательный прокторинг, наблюдение, контроль и
менторский присмотр за обучаемыми должен осуществляться по запросам и под контролем
новых цифровых «преподавателей» и «воспитателей» на базе алгоритмов искусственного
интеллекта: 1) мультимодальных трансформеров, интеллектуальных распределенных агентов
– тьюторов, 2) цифровых роботов – «менторов», 3) системных образовательных наблюдателей
тестовых процессов прокторинга – проктологов образовательных испытаний в процессе
персонализированного обучения, 4) виртуальных «цифровых воспитателей». Для этого на
начальном этапе параллельно необходимо создавать цифровые платформы сбора, анализа и
использования персонализированной информации с интегрированными базами данных
обучаемых, родителей, их семей и родственников, выявляя их связи и степень влияния друг
на друга и между ними. Параллельно необходимо формировать базы данных по
изолированным / капсулированным ресурсам (образовательные ресурсы ограниченного
доступа, персональные данные о традиционных воспитателях / учителях / преподавателях и
воспитателях. Функционально в процессе цифрового воспитания / обучения трансформеры,
агенты, менторы и проктороботы должны наблюдать, контролировать и осуществлять
прокторинг за всеми воспитательными и учебными процессами, например, следить за тем, как
1) обучаемые посещают занятия и проходят испытания/тесты, 2) регистрируются и чем
занимаются в учебное и свободное время, 3) что говорят и как ведут себя на занятиях, 4) как
пользуются ресурсами, 5) как входят в те или иные сети и 6) что думают, как думают, как
мыслят и чем занимаются при этом. По нашему мнению, результатом цифровой
трансформации на первом этапе должно быть и значительное ограничение / капсуляция
традиционных родительских и семейных функций по контролю воспитательных и
образовательных процессов. Тотальный сквозной контроль за социальным поведением,
духовной, культурой, игровой воспитательной деятельностью, контроль за материальными
потребностями, перемещением, режимом питания и сна обучаемых должен в основном
осуществляться «цифровыми воспитателями» – трансформерами, агентами и роботами в
процессе непрерывного воспитательного/образовательного прокторинга. Для этого цифровым
платформам на базе искусственного интеллекта в первую очередь будет необходимо собирать
и анализировать персональные данные индивидуальных траекторий развития: 1) уровни
социальной лояльности воспитуемых/обучаемых, 2) характер и особенности социального
поведения воспитуемых/обучаемых, 3) просмотренный контент и реакции
воспитуемых/обучаемых на него, 4) особенности мышления, сознания и поведения
воспитуемых/обучаемых. На основе персональных данных цифровых аватаров можно будет
294СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
формировать: 1) уровень социального/воспитательного/образовательного рейтинга, который
в свою очередь может определять потенциальные права и свободы воспитуемого/обучаемого,
например, в доступе к контенту, услугам (в том числе инфокоммуникаций, связи и навигации),
[4, c. 213; 5, c. 92; 13, c. 18] финансам, транспорту, материальным и духовным ценностям, еде
и пр., 2) уровень доступа обучаемых к процессам и потокам данных, информации, знаниям,
опыту, например, к субъектам в социальных сетях, интернет-ресурсам, открытым/закрытым
информационным фондам/библиотекам/хранилищам, 3) в случае необходимости можно будет
формировать перспективные корректирующие/адаптивные программы управления
индивидуальным поведением и сознанием с целью дальнейшего расширения/ограничения
прав и свобод, 4) порядок и формы коммуникаций с социальным окружением, 5) порядок
доступа к ресурсам и др. Возможно, что в условиях планируемого цифрового управления
воспитанием/ образованием может возникнуть синдром ослабления традиционного
родительского и семейного контроля и отчетности, в этих условиях необходимо будет
моделировать и разрабатывать новую виртуальную этику поведения в цифровом
анклаве/среде, определять ответственность и отчетность обучаемых перед искусственным
интеллектом «виртуальных воспитателей» – трансформерами, агентами и роботами, но также
и другими обучаемыми – членами учебной группы, а также перед потенциальными
работодателями – корпорациями и мировыми элитами [11, с. 218; 17, c. 71] Возможно, что в
условиях переходных процессов на начальных этапах воспитательные / образовательные
процессы внешне будут напоминать перманентный хаос, так как традиционные
преподаватели, и родительская общественность видимо не сможет оперативно отказаться от
влияния на обучаемых, а молодежь по привычке не сможет самостоятельно
самоорганизоваться и адаптироваться к новым условиям цифрового воспитания / обучения, в
связи с этим, по-видимому будут значительно увеличиваться и воспитательные и
образовательные риски, таким образом, на начальном этапе практического этапа цифровой
трансформации будет необходимо поддерживать частично и «ручное» управление учебно-
воспитательными процессами и со стороны традиционных воспитателей, учителей, педагогов
и преподавателей, но под контролем алгоритмов фиксации всех «ручных» процессов со
стороны искусственного интеллекта.
Литература
1. Абрамян Г.В. Современные тенденции, риски и информационные угрозы
персонализации обучения в условиях цифровизации образования и вирусной пандемии //
Информатика: проблемы, методы, технологии: Мат-лы XXIII международной научно-
практической конференции им. Э.К. Алгазинова (г. Воронеж, 15-17 февраля 2023 г.). Воронеж,
2023. С. 1302-1311.
2. Абрамян Г.В. Риски и угрозы электронного обучения в условиях экосистемы
цифрового образования // Современное образование: традиции и инновации. 2023. №2. С. 194-
200.
295СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
3. Гладилина И.П., Ермакова И.Г. Цифровая трансформация образования: зарубежный и
отечественный опыт // Современное педагогическое образование. 2021. №3. С. 8-12.
4. Жедигеров Д.Ж., Абрамян Г.В. Система учебной навигации студентов и
преподавателей университета на основе спутниковой системы GLONASS и облачных
сервисов NAVITEL // Информационно-телекоммуникационные системы и технологии: Мат-
лы Всероссийской научно-практической конференции (г. Кемерово, 16-17 октября 2015 г.).
Кемерово, 2015. С. 213.
5. Кицела К.И., Соколов М.А., Тенишев Р.Д., Абрамян Г.В. Технология отбора
мобильных программ-клиентов для обмена личными сообщениями в информационно-
образовательной среде вуза // Информационно-телекоммуникационные системы и технологии
Мат-лы Всероссийской научно-практической конференции (г. Кемерово, 16-17 октября 2015
г.). Кемерово, 2015. С. 92.
6. Копыльцов А.А., Копыльцов А.В. Обработка слабо формализованной информации,
поступающей от технических систем // Вестник Нижневартовского государственного
университета. 2013. №1. С. 32-36.
7. Копыльцов А.А., Копыльцов А.В. Цифровые образовательные ресурсы и их роль в
современном образовании // Современное образование: содержание, технологии, качество.
2020. Т. 1. С. 320-322.
8. Копыльцов А.В. Оценка качества программного обеспечения. СПб.: ЛГОУ. 2000. 80 с.
9. Кусаинова А.С. Инструменты и методы оценки функционирования IT-
инфраструктуры высшего учебного заведения // Вестник университета Туран. 2016. № 4(72).
С. 297-300.
10. Мынбаева А.К. Обзор новейших теорий образования: Педагогика 2.0, Образование
3.0 и Хьютагогика (Эвтагогика) // Вестник Казахского национального университета. Серия
Педагогические науки. 2019. Т. 61. №4. С. 4-16.
11. Савельев С.Д., Абрамян Г.В. Информационная модель распределенной
автоматизированной информационной системы кадрового учета в финансовом университете
при Правительстве РФ на основе удаленного вызова процедур «Тонкий клиент» //
Информационно-телекоммуникационные системы и технологии: Мат-лы Всероссийской
научно-практической конференции (г. Кемерово, 16-17 октября 2015 г.). Кемерово, 2015. С.
218.
12. Сафиуллин А.Р., Александров А.А. «Умный город»: ключевые характеристики в
условиях четвертой промышленной революции // Цифровая экономика и Индустрия 4.0:
новые вызовы: Труды научно-практической конференции с международным участием (г.
Санкт-Петербург, 02-04 апреля 2018 г.). СПб., 2018. С. 69-80.
13. Ситдиков А.А., Буснюк И.Ю., Тупий Е.О., Абрамян Г.В. Информационная модель
оптимизации инфокоммуникаций в вузе на основе интерактивной системы взаимодействия
студентов и преподавателей // Информационно-телекоммуникационные системы и
технологии: Мат-лы Всероссийской научно-практической конференции (г. Кемерово, 16-17
октября 2015 г.). Кемерово, 2015. С. 18
296СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
14. Шагай М.А., Абрамян Г.В. Современные тенденции и особенности управления
качеством обучения в системе среднего образования Ленинградской области в
информационной среде // Информационно-телекоммуникационные системы и технологии:
Мат-лы Всероссийской научно-практической конференции (г. Кемерово, 16-17 октября 2015
г.). Кемерово, 2015. С. 125.
15. Шумкова И.Г., Абрамян Г.В. Особенности, значение и принципы формирования
информационно-образовательного пространства вуза на основе интернет-ресурса СПБ
ГИПИСР // Информационно-телекоммуникационные системы и технологии: Мат-лы
Всероссийской научно-практической конференции (г. Кемерово, 16-17 октября 2015 г.).
Кемерово, 2015. С. 100.
16. Янкевичус А.А., Абрамян Г.В. Система оптимизации штатов на основе
дифференциации сотрудников технических служб сервиса и консультирования пользователей
персональных компьютеров в педагогическом университете // Информационно-
телекоммуникационные системы и технологии: Мат-лы Всероссийской научно-практической
конференции (г. Кемерово, 16-17 октября 2015 г.). Кемерово, 2015. С. 126.
17. Denisova A.L., Lopatnikov A.N. Digital transformation and corporate strategy //
Upravlenie. 2022. Т. 10. №2. P. 71-79.
18. Levina A.I., Galanova A.A. Digital transformation of business: approaches and definitions
// Technoeconomics. 2022. Т. 1. № 1(1). P. 65-74.
19. Maydanova S.A., Ilin I.V. Digital transformation strategy development in an enterprise
architecture context // Technoeconomics. 2023. Т. 2. № 1(4). P. 64-75.
20. Xiaohe X. Digital transformation trends of china's insurance industry after the covid-19
pandemic // Tomsk State University Journal of Economics. 2021. №54. P. 228-238.
© Абрамян Г.В., 2024
297СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 378.147
Казиахмедов Т.Б.
канд. пед. наук, доцент
Нижневартовский государственный университет
г. Нижневартовск, Россия
ОСОБЕННОСТИ ПОДГОТОВКИ IT БАКАЛАВРОВ
В УСЛОВИЯХ ИСЧЕЗНОВЕНИЯ СУЩЕСТВУЮЩИХ
И ПОЯВЛЕНИЯ НОВЫХ ПРОФЕССИЙ
Аннотация. В статье раскрыта проблема практической подготовки будущих IT
бакалавров в условиях исчезновения и появления новых профессий. Рассмотрены некоторые
аспекты содержания педагогических условий подготовки будущих IT бакалавров к
профессиональной деятельности, а также представлены психолого-педагогические основы
подготовки бакалавров по IT направлениям в высших учебных заведениях.
Ключевые слова: программирование; программное обеспечение; инженер
программист; IT-технологии; цифровая экономика.
Каждый раз, когда происходить серьезные изменения в технологиях производства,
связанных с новыми открытиями в науке человечество подвергается большим изменениям в
профессиональной деятельности, включая сами профессии и их функционал.
В конце XX столетия в начале общество пришло к выводу, что нужно развивать IT сферу,
а в начале XXI века уже говорим о цифровой экономике, об искусственном интеллекте, о
сочетании интеллекта на искусственных нейронах с интеллектом на биологических нейронах.
Сегодня на рынке IT профессий в какой-то степени сложилась определенность,
основанная на мастерстве работы с базами данных, владения языками программирования,
разработки программного обеспечения, анализа больших данных, разработки и внедрения
информационных систем в комплексе с мобильными приложениями, владения технологиями
распознавания образов объектов и понимания методологий интеллектуализации
информационных систем. Также важно воспитывать в выпускниках по IT направлениям
следующие особенности IT профессий: умение взаимодействовать с клиентами, умение
работать в команде, владение технологиями управления проектами в сочетании с умением
ведения переговоров. Главный стиль мышления IT-специалиста это аналитическое мышления
в сочетании с высоким уровнем когнитивных навыков.
Мы живем в интересное время, когда профессии, существовавшие десятками лет,
исчезают и появляются новые.
Сегодня на грани исчезновения или же в существенном изменении функционала
(деятельности в профессии) находятся следующие профессии: водители, фермеры, кассиры
магазинов и банков, официанты, рабочие-строители, сметчики, корректоры, библиотекарь,
каскадёры, юридические консультанты, нотариусы, экскурсоводы, переводчики, логисты,
почтальоны, даже инспекторы ДПС.
298СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Компьютерное зрение, обучаемые нейронные сети, собственно машинное обучение,
спутниковые технологии способствуют исчезновению перечисленных профессий или
полностью меняет собственно функционал профессии
Водители. Машинисты. Миллионам водителям придется заново обрести себя. Машины
на автопилоте (которые уже получают распространение в мире) должны стать настоящим
благом для пожилых людей и должны спасти много жизней. Автоматические такси без
водителей уже развозят пассажиров. Это касается и машинистов поездов.
Фермеры. Появление умных технологий в садоводстве, животноводстве,
растениеводстве должны способствовать эффективности фермерских хозяйств, росту их
производительности и эффективности. Это касается и полива, освещения, температурного
режима, например, в тепличных хозяйствах, ухода за животными. Многое из того, что
необходимо делать фермерам, быстро автоматизируется. Трудоемкие работы уже исчезают и
это уменьшает зависимость фермерских хозяйств от физического труда сельхозрабочих.
Сельское хозяйство продолжает становиться более высокотехнологичным. Следовательно,
перед образовательными учреждениями стоит серьезная проблема пересмотра контента
образовательных программ по выпуску специалистов для сельского хозяйства.
Кассиры и банковские кассиры. Станции самообслуживания в магазинах все
расширяются и расширяются. Более того, многие магазины переходят на технологию
бесконтактной оплаты с помощью смартфона. Сегодня мы являемся свидетелями того, что в
магазине не только нет кассиров, но и продавцов, роль консультантов выполняют роботы или
же электронные продавцы. Банковских кассиров давно заменили банкоматы.
Рабочие-производители, строительные рабочие, актеры. Теперь машины строят
другие машины с меньшим количеством человеческого взаимодействия с каждым годом. Это
не ново, поскольку производители автомобилей десятилетиями используют роботов. СAD,
CAM, CAE технологии с компонентами искусственного интеллекта, с использование так
называемой 3D печати заменяют на рабочей площадке специализированных работников.
Например, робот-укладчик стен из блоков и кирпича, который может укладывать кирпичи
лучше и в несколько раз быстрее и качественнее чем укладка человека. Строители должны
только программировать и управлять этой техникой. Следовательно, нужно менять и
подготовку специалистов и для строительства. Замене актеров анимационными аватарами
также способствуют новые информационные технологии, сочетающие в себе и технологии
виртуальной дополненной реальности. Актеры и их изображения будут просто генерироваться
компьютерами. 3D-анимационные фильмы сегодня уже дают нам представление о том, как
можно снимать фильмы без актеров.
Официанты и бармены. Работники фаст-фуда. Тенденция исчезновения официантов,
работников фаст-фуда уже началась. В ресторанах вместо планшет за столом, чтобы заказать
и оплатить. Нам по-прежнему нужны люди для приготовления пищи, но нет никаких причин,
по которым робот не сможет подать еду в ближайшее время. Прием и оплату заказа легко
автоматизировать. Более сложная часть автоматизация и роботизация приготовления пищи
займет немного больше времени, но она уже начата.
299СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Военные летчики и солдаты. Роботизация военной сферы очень актуальна. Это
подтверждается и военными операциями в ходе спецоперации на Украине. Количество
дронов, самоуправляемых военных кораблей здесь исчисляются тысячами. Дроны более
точны и безопасны и в разведке, и в нанесении бомбовых ударов по военной технике врага.
Много исследований связано с созданием роботов-солдат.
Бухгалтеры и налоговики. Без бухгалтерии, понятно, не может существовать
предприятия и учреждения. Содержание самой бухгалтерии порой обходится очень дорого. А
информатизация бухгалтерии, на которую было возложено много надежд, не всегда себя
оправдывает. Но тем не менее многие скучные, однообразные и повторяющиеся действия в
бухгалтерии и в налоговой сфере отданы машинам. У людей есть простые потребности в
подготовке налогов, которые можно легко удовлетворить с помощью программного
обеспечения. Программное обеспечение для подготовки налогов уже существует десятки лет.
Особо доступной стало в России система налогооблажения РФ в сочетании с Госуслугами как
для граждан, так и для предприятий. Поэтому, будущие бухгалтера и налоговики должны быть
компетентны в IT продукции для этой сферы. Богатым и крупным корпорациям по-прежнему
будут нужны люди, оптимизирующие налоги, расходы, но ими лучше быть действительно на
высшем уровне со знанием цифровых решений.
И что будет с образованием будущего? Новая революция технологий связана с
цифровыми решениями. Поэтому, обучение новых инструментов во всех профессиях и сферах
жизнедеятельности государства жизненно необходимо, как раз образование должно вестись с
опережением особенностей возникающего нового инструментария для профессиональной
деятельности[8]. Интересным является то, что ставится под сомнение многие профессии в IT
сфере. Очень часто мы сталкиваемся c тем, что часто говорят, о том, что программировать
будут сами компьютеры. На самом деле, ставить под сомнение обучение программированию,
с нашей точки зрения, преждевременно и вредит содержанию подготовки IT специалистов.
На очереди исчезновение системного администратора. Бакалавры ИВТ, обучающиеся в
НВГУ также отличились в этом плане. Они не только создали систему администрирования, но
и слежения за работоспособностью сетевых объектов. Тем не менее, рано сегодня о говорить
о самонастраивающихся операционных системах и сетях, поэтому просто изменится
функционал системного администратора в сторону безопасности и интеллектуальных
настроек систем.
Что будет с программированием в будущем? Какое оно будет?
Будущее программирования связано с развитием искусственного интеллекта.
Искусственный интеллект (ИИ) меняет то, как мы работаем. Новые инструменты и системы
создают мощные алгоритмы, которые позволяют машинам обучаться, чтобы оптимизировать
процессы без команды программистов. Управление социальными сетями, инструменты
маркетинга по электронной почте и генераторы преобразования текста в изображения – вот
некоторые из функций, поддерживаемых ИИ, которые открывают новые горизонты для
компаний. ИИ больше не является прерогативой избранных и специализированных
300СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
программистов. Эти люди разработали интерфейсы и платформы, чтобы позволить другим, не
имеющим этих специфических навыков, получить доступ к результату их работы.
На данный момент ИИ по-прежнему является специальностью программирования. Но
использование ИИ на рабочем месте становится всё более распространённым. Мы видим
больше инструментов ИИ в интегрированных средах разработки (IDE). Сейчас продвинутые
IDE начинают дополнять то, что кодируют программисты, не только предлагая, как завершить
одну строку, но и предлагая сразу несколько строк кода. Было бы ошибочным, что не нужно
программировать сами нейронные сети, собирать для них наборы данных(dataset) для
обучения сетей. Здесь важно отметить, что будущее ИИ в сочетании искусственных
нейронных сетей с модулями нейронных сетей на биологической основе.
Важно осознавать, что инструменты ИИ не обязательно должны приводить к смерти
программирования, а только развитию новых методик и технологий программирования,
организации данных. Говоря об ИИ нельзя его привести только к нейронным сетям. В этом
случае как быть c другими моделями знаний, с экспертными системами и знаниями? Конечно,
такие инструменты, как OpenAICodex и GitHubCopilot предоставляют разработчикам ПО
более широкий доступ к системам, использующим ИИ для написания кода, что экономит
время и энергию. Но сегодня мы не видели еще какую-нибудь существенную
информационную систему, созданную нейросетями. Пока мы вначале пути. Вспомним, какие
надежды возлагались на автоматизацию разработки посредством языком моделирования в
средах моделирования. Но в результате, изучение самих сред моделирования, разработка
моделей с последующим автоматическим получением кода, порой более затратны, чем
разработка ИС сложившимися методиками и инструментами. Таким образом, мы пришли к
пониманию того, что в системе подготовки IT специалиста должны быть несколько
дисциплин, как по разработке и использованию нейронных сетей, так и использованию ИС
основанных на искусственном интеллекте в профессиональной деятельности. Сегодня мы
видим фирмы, которые перешли на программирование ИИ и реализации компьютерных
программ, основанных на обучении нейронных сетей.
Среди российских компаний – лидеров в области ИИ выделяют ABBYY (распознавание
текстов), VisionLabs, NTechLabs и 3DiVi (компьютерное зрение). Из нестандартных – BellLabs
c продуктом Newton, позволяющим интегрировать ИИ-решения в маломощную встраиваемую
электронику (микроконтроллеры).
В России есть крупные ИИ-проекты, локомотив индустрии – большие компании: они
вкладывают деньги в технологии и видят в этом финансовую перспективу. Так, «Сбер»
планирует вложить в искусственный интеллект около 2 млрд долларов в ближайшие четыре
года и заработать за тоже время порядка 6 млрд.
Компания «Яндекс» одной из первых в России стала разрабатывать беспилотные
автомобили и сегодня внедряет полезные ИИ-решения для бизнеса. У «Яндекса» есть
собственные разработки, которые конкурируют с продуктами Google и Amazon.
301СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Среди них YandexSpeechKit – сервис распознавания и синтеза речи на нескольких
языках. Вы наверняка знаете его по голосовой станции «Алиса». «Яндекс» вывел технологию
в массы – сегодня каждая компания может внедрить её в свою IT-инфраструктуру.
SpeechKit позволяет общаться с клиентами без участия операторов. Робот запишет
клиента на услугу, узнает, доволен ли покупатель сервисом, и сделает серию холодных
звонков. Система распознаёт речь, строит общение по скрипту и передаёт данные менеджерам.
Это экономит время и не вредит конверсии -только 4% клиентов понимают, что общаются с
роботом.
ИИ сегодня популярен и востребован – по данным совместного исследованияTAdviser
и «Ростелекома», 85% российских компаний уже используют ИИ-решения в бизнесе. При этом
ИИ принято заказывать у подрядчика: 70% разработок создаются для продажи сторонним
организациям.
Небольшие компании создают лаборатории, разрабатывают решения с использованием
искусственного интеллекта и успешно внедряют их в IT-инфраструктуру своих клиентов.
Компания VideoMatrix специализируется на создании систем видеоаналитики. Решения
используют на производстве- сих помощью ведут учёт созданных изделий, выявляют брак и
контролируют соблюдение правил промышленной безопасности.
НейросетиVideoMatrix превосходят возможности человека. Программно-аппаратный
комплекс АРМИЛ, созданный для Челябинского металлургического комбината, выявляет
более 20 классов дефектов – в том числе царапины имикротрещины размером от 0,3 мм с
точностью от 97%.
Компания EORA помогает выстраивать общение с клиентами с помощью чат-ботов.
Нейросеть выучила параметры 1500 артикулов и научилась распределять их по внешним
характеристикам – цветам и рисункам. Это помогает быстрее ориентироваться в ассортименте.
Создатели пишут, что система работает сродни компьютерной игре: «Пользователь
загадывает персонажа, а джинн угадывает, кто это, задавая наводящие вопросы. Только в
сервисе вместо персонажей обои, а вместо джинна – бот».
Лаборатория «СенсорТех» разработала устройство «Робин» – это умный помощник для
незрячих. «Робин» сообщает о том, что находится вокруг, предупреждает о препятствиях и
помогает обратиться к человеку на улице. Устройство «Чарли» помогает людям, которые
имеют проблемы со слухом. Оно распознаёт устную речь и превращает её в текст. Компания
сотрудничает с фондом «Сколково» – он помогает финансово перспективным проектам,
консультирует по вопросам создания бизнес-модели и привлечения венчурных инвестиций
[7].
Компания ООО «Нейронные Технологии» специализируется на разработке
интеллектуальных систем на базе нейронных сетей и технологий машинного обучения. Мы
помогаем бизнесу внедрять AI для решения конкретных задач и оптимизации процессов.
АО НТЦ «Модуль» более 30 лет успешно работает на российском рынке наукоемких
технологий. Вот некоторые направления деятельности: Внедрение нейронных сетей и
отечественной компонентной базы в современные автоматизированные комплексы различных
302СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
направлений: от навигации до беспилотных автомобилей и робототехники; Производство и
проектирование систем распознавания и анализа видеоизображений.
Но программирование, в классическом понимании, устаревает. Традиционная идея
«написания программы» находится на грани исчезновения в течение нескольких десятилетий.
Для всех, кроме очень специализированных приложений, большая часть ПО в том виде, в
каком мы его знаем, будет заменена системами ИИ, которые обучаются, а не
программируются. В ситуациях, когда нужна «простая» программа, эти программы сами
будут генерироваться ИИ, а не кодироваться вручную.
Те, которые обозначили информатику как отдельную науку твердо верили, что всем
будущим учёным-компьютерщикам потребуется глубокое понимание полупроводников,
двоичной арифметики и проектирования микропроцессоров, чтобы разрабатывать ПО.
Сегодня почти 90% тех, которые разрабатывают ПО, не имеют представления о том, как на
самом деле работает процессор, не говоря уже о физике, лежащей в основе конструкции
транзистора. А компьютерщики будущего будут настолько далеки от классических
определений «программного обеспечения», что им будет трудно развернуть связанный список
или внедрить быструю сортировку.
Все программы в будущем, в конечном счёте, будут написаны ИИ, а людям будет
отведена контролирующая роль. Любому, кто сомневается в этом прогнозе, достаточно
взглянуть на очень быстрый прогресс, достигнутый в других аспектах создания контента ИИ,
таких как создание изображений. Разница в качестве и сложности между DALL-E 1 и DALL-
E 2, о которых было объявлено всего 15 месяцев спустя, ошеломляет. Вещи, которые ещё
несколько месяцев назад казались фантастикой, быстро становятся реальностью.
Не только CoPilot на Github или ChatGPT заменят программистов. Речь идёт о замене
всей концепции написания программ обучающими моделями.
Инженеры будущего в несколько нажатий клавиш запустят экземпляр модели с
четырьмя квинтиллионами параметров, которая уже кодирует весь объём человеческих
знаний, готовый к любой задаче, требуемой от машины. Основная часть интеллектуальной
работы, направленной на то, чтобы заставить машину делать то, что нужно, будет заключаться
в том, чтобы придумать правильные примеры, правильные данные для обучения и правильные
способы оценки процесса обучения.
Искусственный интеллект – не только научное направление, а технология
цифровизации экономики страны. Основные направления ИИ и методология
интеллектуализации информационных систем более подробно описаны в [1; 3].
С научной областью «Искусственный интеллект» связаны новые веяния в области
IT профессий. Главная проблема- как создать интеллектуальный компьютер?
Программный подход позволяет разработать:
 Интеллектуальный интерфейс ПО;
 Интеллектуальные ИС управления предприятием;
 Интеллектуальные ПО управления технологическими процессами;
 Интеллектуализация защиты информации и безопасности сетей и коммуникация;
303СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
 Экспертные системы как часть интеллектуальных систем;
 Интеллектуализация ГИС;
 Интеллектуальные ИС для медицины;
Выделим новые технологии в области искусственного интеллекта:
 Системы, основанные на знаниях;
 Искусственные нейронные сети;
 Нечеткая логика;
 Интеллектуальный анализ данных;
 Генетические алгоритмы и эволюционное программирование
Перечислим определившиеся научные направления ИИ:
 Представление знаний и разработка систем, основанных на знаниях
 Программное обеспечение систем ИИ
 Разработка естественно-языковых интерфейсов и машинный перевод
 Интеллектуальные роботы
 Обучение и самообучение
 Распознавание образов
Разработка интеллектуальных информационных систем или систем, основанных
на знаниях. Это одно из главных направлений ИИ. Основной целью построения таких систем
являются выявление, исследование и применение знаний высококвалифицированных
экспертов для решения сложных задач, возникающих на практике. При построении систем,
основанных на знаниях (СОЗ), используются знания, накопленные экспертами в виде
конкретных правил решения тех или иных задач. Это направление преследует цель имитации
человеческого искусства анализа неструктурированных и слабоструктурированных проблем.
В данной области исследований осуществляется разработка моделей представления,
извлечения и структурирования знаний, а также изучаются проблемы создания баз знаний
(БЗ), образующих ядро СОЗ. Частным случаем СОЗ являются экспертные системы (ЭС).
Генерация и распознавание речи. Системы речевого общения создаются в целях
повышения скорости ввода информации в ЭВМ, разгрузки зрения и рук, а также для
реализации речевого общения на значительном расстоянии. В таких системах под текстом
понимают фонемный текст (как слышится).
Обработка визуальной информации (Компьютерное зрение). В этом научном
направлении решаются задачи обработки, анализа и синтеза изображений. Задача обработки
изображений связана с трансформированием графических образов, результатом которого
являются новые изображения. В задаче анализа исходные изображения преобразуются в
данные другого типа, например, в текстовые описания. При синтезе изображений на вход
системы поступает алгоритм построения изображения, а выходными данными являются
графические объекты (системы машинной графики).
Обучение и самообучение. Эта актуальная область ИИ включает модели, методы и
алгоритмы, ориентированные на автоматическое накопление и формирование знаний с
использованием процедур анализа и обобщения данных. К данному направлению относятся
304СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
не так давно появившиеся системы добычи данных (Data-mining) и системы поиска
закономерностей в компьютерных базах данных (KnowledgeDiscovery).
Распознавание образов. Это одно из самых ранних направлений ИИ, в котором
распознавание объектов осуществляется на основании применения специального
математического аппарата, обеспечивающего отнесение объектов к классам, а классы
описываются совокупностями определенных значений признаков.
Игры и машинное творчество. Машинное творчество охватывает сочинение
компьютерной музыки, стихов, интеллектуальные системы для изобретения новых объектов.
Создание интеллектуальных компьютерных игр является одним из самых развитых
коммерческих направлений в сфере разработки программного обеспечения. Кроме того,
компьютерные игры предоставляют мощный арсенал разнообразных средств, используемых
для обучения.
Отечественное программное обеспечение систем ИИ.
SocialDataHub. SocialDataHub разрабатывает системы искусственного интеллекта.
Основной продукт компании – платформа анализа информационного поля, которая собирает
и анализирует данные, откуда только возможно: социальные сети, блоги, ТВ, базы данных,
форумы, мобильные приложения и даже TOR. В компании занимаются не мониторингом, а
именно извлечением и анализом данных, используя технологии искусственного интеллекта и
BigData. Работает система на собственных алгоритмах и метриках. Кроме сбора и
структурирования данных, в SocialDataHub занимаются анализом связей, распознаванием
фото- и видеоконтента и построением скоринговых моделей. Один из последних проектов
SocialDataHub– «Родительская опека», который предупреждает родителей, если у ребёнка в
друзьях появляются подозрительные личности или он вступает в группы с запрещённым
контентом. Чтобы мониторить чадо, SocialDataHub не читает личные сообщения, а собирает
доступную и открытую информацию в интернете. Кроме этого, в компании могут
анализировать интересы и поведение ребёнка в социальных сетях и на основе этих данных
подсказывать родителям, в какие кружки ребёнку будет интереснее ходить, в какой вуз и на
какую специальность поступать, и какая профессия в будущем ему подойдёт больше.
Cezurity. Cezurity разработали технологию динамического обнаружения атак, которая
основана на искусственном интеллекте. Работает это на анализе изменений состояний систем,
выявлении в них аномалий, их классификации и выявлении признаков атаки. На всех
компьютерах стоит агент, раз в два часа собирающий информацию об объектах, которые
определяют работу приложений. Это более 200 характеристик каждого объекта – например,
ареал распространения, места, где они встречаются в системе, поведение файлов в случае их
исполнения и тому подобное. Эта информация формирует срез системы, который
отправляется для анализа в облачную аналитическую систему Cezurity Sensa. В Sensa данные
классифицируются и помещаются в специальную базу данных. Обработка информации и
вынесение решений о степени вредоносности объектов приводит к новой классификации,
которая происходит автоматически. Cezurity Sensa является самообучающейся системой. При
этом, если полученных данных оказалось недостаточно для вынесения точного решения об
305СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
опасности, то запрашивается дополнительная информация. Сегодня технология используется
в работе бесплатного сервиса для обнаружения и лечения заражений компьютеров – Cezurity
Scanner и является ключевой для продукта Cezurity COTA, который занимается обнаружением
целенаправленных атак на информационные системы предприятий. На сегодняшний день
компания предоставляет свои услуги в области безопасности социальным сетям «ВКонтакте»
и «Одноклассники».
Daily Work. DailyWork разработали сервис, который помогает находить исполнителей
для работы. Помимо удобных функций геолокации, скоринга и push-уведомлений, система
наделена искусственным интеллектом и способна распознать предметы на изображении,
понимать разговорную речь и общаться с пользователями. Программно-аппаратный комплекс
создан на основе платформы взаимодействия с пользователем API.ai и сервиса когнитивных
функций Microsoft. Существующий аналог в России – YouDo, но решение DailyWork
отличается от него тем, что задачи решается с помощью искусственного интеллекта. То есть
заказчику надо просто сказать голосом – «Дэйли, мне нужно заменить кран на кухне, он течет.
Вот тебе фото», после чего по значению фразеологизма «заменить кран» нейросеть
классифицирует запрос и отправит уведомления лишь тем исполнителям, которые
подписались на раздел «Сантехника».
Jane. Система искусственного интеллекта для персональной медицины, работающая на
основе нейросетей и алгоритмов на базе искусственного интеллекта. Сервис обрабатывает
данные анамнеза пациента с учётом его индивидуальных особенностей, включая генетический
и биомолекулярный уровень, справочники и истории болезни, находя закономерности и
тенденции. На основе данных выводятся вероятности того или иного заболевания в
соответствии с симптомами и подтверждаются назначенные курсы лечения. «Джейн»
помогает врачам в постановке диагноза, который верифицируется с учётом развитие
клинических состояний и проводя мониторинг состояния здоровья. Система уже полностью
работает, но для пользователей пока что доступны лишь функции первичного сбора
информации, ведения дневника здоровья и базовая аналитика. множества факторов,
собранных системой. Также она умеет контролировать корректность программы лечения и
отслеживать проявления побочных эффектов принимаемых препаратов, позволяя
прогнозировать. В дальнейшем планируется расширение способов ввода и вывода
информации при помощи мессенджеров и носимых устройств, а также запуск собственного
мобильного приложения.
Conundrum. Conundrum занимаемся консалтингом и разработкой решений на основе
машинного обучения, которые помогают управлять страховыми выплатами, умеют делать
геоанализ ДТП с пешеходами, предсказывать звонки в колл-центр, оценивать обслуживание
по видео и распознавать лица в видеопотоках. Среди клиентов Conundrum – Правительство
Москвы, «Лаборатория Касперского» и международная консалтинговая компания,
специализирующаяся на решении задач, которые связаны со стратегическим управлением.
Один из ярких кейсов компании – технология, которая делает анализ снимков кожи. Это
решение для диагностики здоровья по внешнему виду работает на макроснимках. В
306СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Conundrum научились определять биологический возраст кожи, её жирность, аллергические
реакции и области тела, с которой снимок был сделан.
Хотелось бы более подробно останавливаться на интеллектуализации информационных
систем для образования.
Пандемия показала не состоятельность утверждений, что обучать можно удаленно и без
преподавателей. Но тем не менее, было бы неправильным, если не учесть важность
использования избранных видеоматериалов по продвинутым научным дисциплинам и
технологиям. Современные инструменты позволяют создать интеллектуальные
информационные системы для образования, где можно накопить не только знания в
предметной области дисциплин, но и педагогический опыт педагогов, т.е. можно совместить
знания с экспертными знаниями преподавателя [2; 8].
Особенно интересным является создание и программирование роботов, причем
интеллектуальных роботов. Эти роботы используется как компоненты производственных
конвееров, как «служащие» в ресторанном и гостиничном бизнесе, так же в обучении [4-6].
Таким образом, будут модифицироваться не только содержание, но компетенции IT
бакалавров. Современный IT бакалавр прежде всего должен владеть системным мышлением,
технологиями интеллектуализации информационных систем и самого инструментария
разработки. Он должен быть компетентен в методах машинного зрения, слуха, речи, в
особенностях компьютерной лингвистики и машинного перевода, методами машинного
обучения.
Опять чтобы не было кривотолков о важности IT специалистов, хочу отметить, что их
количество нужно многократно увеличить, снабдить их методологией и методами ИИ. Таким
образом, изменится полностью как описание и контент компетенций, так и методология их
обучения.
Теперь отметим несколько решений для повышения компетенций в области ИИ,
принятых в Нижневартовском государственном университете:
1. Приобретено программное обеспечение для реализации технологий ИИ на
производстве в регионе.
2. На базе вуза создаются мини-лаборатории основных производственных процессов для
апробирования и внедрения методологии ИИ в производственные процессы в нефтяной
отрасли.
3. Созданы 3 лаборатории (учебные кабинеты) ИИ, соответствующий основным его
направлениям на современном этапе.
4. Следующим шагом является создание научной лаборатории ИИ, где аспиранты и
молодые ученые проведут научные исследования в области искусственного интеллекта.
Литература
1. Казиахмедов, Т.Б. Искусственный интеллект как актуальное направление научных
исследований // Информационные ресурсы в образовании: Мат-лы Международной научно-
307СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
практической конференции (г. Нижневартовск, 17-19 апреля 2013 г.). Нижневартовск, 2013. С.
5-6. EDN SWHXRH.
2. Казиахмедов Т.Б., Мосягина Т.В. Модель интеллектуальной информационной
системы для образования // Ученые записки ИУО РАО. 2016. № 4(60). С. 111-113. EDN
YIDZJZ.
3. Казиахмедов Т.Б. Интеллектуализация информационных систем в образовании //
Культура, наука, образование: проблемы и перспективы: Мат-лы II Всероссийской научно-
практической конференции (г. Нижневартовск, 08 февраля 2013 г.). Ч. V. Нижневартовск,
2013. С. 122-123. EDN SHSWHH.
4. Казиахмедов, Т.Б. Криптографические алгоритмы в .Net / Т. Б. Казиахмедов //
Современное программирование: Материалы I Международной научно-практической
конференции, Нижневартовск, 15-18 ноября 2018 года / Ответственный редактор Т.Б.
Казиахмедов. – Нижневартовск: Нижневартовский государственный университет, 2018. – С.
49-52. – EDN YUGRBJ.
5. Казиахмедов Т.Б., Шульгин И.В. Системы управления голосом для людей с
ограниченными возможностями // Современное программирование: Мат-лы II
Международной научно-практической конференции (г. Нижневартовск, 14-16 ноября 2019 г.).
Нижневартовск, 2019. С. 102-105. EDN ZEOYQC.
6. Казиахмедов Т.Б. Методические подходы обучения робототехнике бакалавров по
направлению подготовки 09.03.01 информатика и вычислительная техника // Европейский
журнал социальных наук. 2017. №9. С. 146-159. EDN XSJPNZ.
7. Казиахмедов Т.Б. Опережающее обучение в области индустрии информационных
технологий в условиях развивающейся экономики и перманентных реформ высшего
образования // Педагогическая информатика. 2014. №4. С. 62-72. EDN TJYTPX.
8. Свидетельство о государственной регистрации программы для ЭВМ №2017663400
Российская Федерация. Компьютерная программа для разработки обучающих ресурсов и
тестов для контроля знаний: №2017615003: заявл. 29.05.2017: опубл. 01.12.2017 / Т.Б.
Казиахмедов, Т.В. Мосягина; заявитель Федеральное государственное бюджетное
образовательное учреждение высшего образования «Нижневартовский государственный
университет». EDN JPWCSL.
© Казиахмедов Т.Б., 2024
308СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004
Козлов В.А.
студент
Загребин В.К.
студент
Шекихачева Н.И.
канд. пед. наук
Радиотехнический колледж
г. Санкт-Петербург, Россия
КОМБИНАТОРИКА И IT-ТЕХНОЛОГИИ
Аннотация. В статье описано изучение вопроса применения комбинаторики в задачах
по вероятности, изучение синтаксиса языков программирования Kotlin, C#, создание
приложения, исключающее вероятность ошибки по невнимательности.
Ключевые слова: комбинаторика; приложение; программа; язык программирования.
IT-технологии в современном мире имеют неимоверные темпы развития, вместе с ними
растет и актуальность комбинаторики, она все чаще появляется как в нашей
профессиональной деятельности, так и в повседневной жизни, не относящейся к рабочим
моментам, в школах данная тема уже является обязательным к изучению материалом начиная
с 7 класса. Комбинаторика может использоваться в областях, таких как криптография,
оптимизация, теория графов, статистика, инженерия и многих других:
– Криптография: Генерация и анализ различных кодов и ключей.
– Оптимизация: Решение задач оптимизации, включая задачи наилучшего выбора и
планирования.
– Статистика: Вычисление вероятностей и комбинаторных параметров в
статистических исследованиях.
– Теория графов: Работа с комбинаторными структурами в графах.
Комбинаторика часто встречается и на учебе, поняв определенную формулу или метод,
студенты встречаются с тем, что навык уже наработан, но тем не менее все также приходится
считать большие числа вручную. Встретившись с данной ситуацией, было решено подойти к
ней с точки зрения нашей профессии и запрограммировать приложение, которое в несколько
нажатий будет выдавать нужные нам значения.
Целью работы является изучение вопроса применения комбинаторики в задачах по
вероятности, изучение синтаксиса языков программирования Kotlin, C#, создание приложения
исключающее вероятность ошибки по невнимательности. Приложение покрыто тестами на
100% и исключает незапланированные сценарии работы.
Решение задач комбинаторики имеет широкий спектр применения в математики.
Существуют такие типы как:
Перечисление, перестановки, сочетания и т. д. о каждом понемногу, как различаем:
1) Перечисление:
309СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
– Подсчет количества объектов в множестве или структуре без явного перечисления
самих объектов.
2) Перестановки:
– Упорядоченная установка элементов множества.
3) Сочетания:
– Неупорядоченная выборка элементов из множества.
4) Размещения:
– Упорядоченная выборка элементов из множества.
Как различать:
– Если важен только порядок элементов, то речь идет о перестановках или
размещениях.
– Если порядок не имеет значения, и речь идет только о выборе элементов, то это
сочетания.
– Если речь идет о подсчете, но не о выборе или упорядочивании, то это перечисление.
Наше исследование будет предоставлять инструментарий для решения подобных задач
с помощью современных языков программирования.
Программа помогает в следующих задач:
1) Перестановки:
– Генерация всех возможных перестановок элементов в наборе с повторениями и без.
– Подсчет количества перестановок.
2) Сочетания:
– Расчет количества сочетаний.
3) Размещения:
– Определение числа размещений.
4) Треугольника Паскаля:
– Изображение треугольника Паскаля до 20 строки.
Программа может быть полезной для различных областей и задач, где требуется анализ
комбинаторных данных. При помощи языка Kotlin были рассчитаны первые тысяча строк
треугольника Паскаля, пользователю мы представили первые 20 строк.
Изначально было создано приложение на компьютер, с использованием языка
программирования C# и framework`ом Avalonia, который в последнее время набирает все
больше популярности среди мира IT. Данное приложение было создано и протестировано,
после чего команда пришла к выводу, что наиболее удобным устройством для использования
приложения является смартфон. В связи с этим было принято решение разделить обязанности
и работать на два направления. Отсюда появилась другая сторона нашего проекта –
приложение на платформе Android.
Приложение на Android создавалось на языке Kotlin, от компании JetBrains,
разработчики которого, при всем вышесказанном, являются выходцами из России. За
несколько лет они внедрили свою технологию в разработку приложений на Android, тем
310СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
самым вытеснив язык Java. С 2019 года Google рекомендует создавать приложения именно с
использованием языка Kotlin, к чему мы и прислушались.
Мобильное приложение имеет тот же функционал, что и компьютерная версия, но
немного отличается по визуальной составляющей. Для преподавателей, студентов и учеников
школ мы предлагаем наши программы как математическое подспорье, ниже вы можете
просканировать qr-коды, которые предоставят вам программы.
Пример кода программы:
<Window xmlns="https://github.com/avaloniaui"
xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
mc:Ignorable="d" d:DesignWidth="600" d:DesignHeight="450"
Width="600" Height="450" x:Class="AvaloniaApp1.MainWindow"
Title="Комбинаторика" Icon="/Assets/Images/AppIcon.png" Background="Gainsboro">
<TabControl>
<!-- Perestanovki view -->
<TabItem FontWeight="Bold" FontSize="12" Header="перестановка"
VerticalContentAlignment="Center">
<StackPanel Orientation="Vertical">
<StackPanel Height="20" VerticalAlignment="Top" Orientation="Horizontal"
Margin="5 10 5 5">
<TextBlock Text="Количество элементов: "
HorizontalAlignment="Left" VerticalAlignment="Top" />
<TextBox x:Name="PeresInput" Height="30"></TextBox>
<Button x:Name="PeresGetResultBtn" Height="30" Background="Silver"
Margin="20 0 0 0"
Click="PeresGetResultBtn_OnClick">Посчитать</Button>
<TextBlock x:Name="PeresResult" Margin="50 0 0 0"></TextBlock>
</StackPanel>
<StackPanel Orientation="Horizontal" Height="20" Margin="5 50 5 5">
<TextBlock Text="Элементы: " HorizontalAlignment="Left"
VerticalAlignment="Top" />
<TextBox x:Name="PeresInput2" Height="30"></TextBox>
<TextBlock Text="Длина: " Margin="20 0 0 0"
HorizontalAlignment="Left" VerticalAlignment="Top" />
<TextBox x:Name="PeresInput3" Height="30"></TextBox>
<Button x:Name="PeresGetVariants" Height="30" Background="Silver"
Margin="20 0 0 0" Click="PeresGetVariants_OnClick">Получить
варианты</Button>
</StackPanel>
311СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
<StackPanel Orientation="Horizontal" Height="20" Margin="5 50 5 5">
<TextBlock Text="С повторениями: " HorizontalAlignment="Left"
VerticalAlignment="Top"/>
<TextBox x:Name="PeresResult2" Height="30" Width="450"/>
</StackPanel>
<StackPanel Orientation="Horizontal" Height="20" Margin="5 50 5 5">
<TextBlock Text="Без повторений: " HorizontalAlignment="Left"
VerticalAlignment="Top"/>
<TextBox x:Name="PeresResult3" Height="30" Width="454"/>
</StackPanel>
</StackPanel>
</TabItem>
<!-- Razmeschenie view -->
<TabItem FontWeight="Bold" FontSize="12" Header="размещение"
VerticalContentAlignment="Center">
<StackPanel Orientation="Vertical" Margin="10 50 5 5">
<TextBox x:Name="RazmTopIndex" Margin="40 0 0 0" Width="10"
HorizontalAlignment="Left" VerticalAlignment="Top"/>
<StackPanel Orientation="Horizontal">
<TextBlock Text="A" FontSize="100" Margin="0 -20 0 -20 " Padding="0 0 0 0" />
<Button x:Name="RazmGetResult" FontSize="100" Margin="100 0 50 0 "
Height="100" VerticalAlignment="Center"
Padding="0 -20 5 30" Click="RazmGetResult_OnClick">=</Button>
<TextBlock x:Name="RazmResult" FontSize="24"
VerticalAlignment="Center"></TextBlock>
</StackPanel>
<TextBox x:Name="RazmBottomIndex" Margin="40 0 0 0" Width="10"
HorizontalAlignment="Left" VerticalAlignment="Top"/>
</StackPanel>
</TabItem>
<!-- Sochetanie view -->
<TabItem FontWeight="Bold" FontSize="12" Header="сочетание"
VerticalContentAlignment="Center">
<StackPanel Orientation="Vertical" Margin="10 50 5 5">
<TextBox x:Name="SochTopIndex" Margin="40 0 0 0" Width="10"
HorizontalAlignment="Left" VerticalAlignment="Top"/>
312СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
<StackPanel Orientation="Horizontal">
<TextBlock Text="C" FontSize="100" Margin="0 -20 0 -20 " Padding="0 0 0 0" />
<Button x:Name="SochGetResult" FontSize="100" Margin="100 0 50 0 "
Height="100" VerticalAlignment="Center"
Padding="0 -20 5 30" Click="SochGetResult_OnClick">=</Button>
<TextBlock x:Name="SochResult" FontSize="24"
VerticalAlignment="Center"></TextBlock>
</StackPanel>
<TextBox x:Name="SochBottomIndex" Margin="40 0 0 0" Width="10"
HorizontalAlignment="Left" VerticalAlignment="Top"/>
</StackPanel>
</TabItem>
<!-- Pascal view -->
<TabItem FontWeight="Bold" FontSize="12" Header="треугольник Паскаля"
VerticalContentAlignment="Center">
<Image Source="Assets/Images/pascal.png"></Image>
</TabItem>
</TabControl>
</Window>
Рис. Компьютерное приложение и мобильное приложение
© Козлов В.А., Загребин В.К., Шекихачева Н.И., 2024
313СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 378.14
Петров Д.А.
старший преподаватель
Нижневартовский государственный университет
г. Нижневартовск, Россия
ПРОЕКТИРОВАНИЕ ПРОФЕССИОНАЛЬНОЙ КОМПЕТЕНЦИИ WEB-
РАЗРАБОТЧИКА НА ОСНОВЕ ТРЕБОВАНИЙ РЫНКА ТРУДА
Аннотация. В статье рассматривается проблема формирования содержания
профессиональной компетенции (ПК) будущего web-разработчика в соответствии с
требованиями рынка труда. Приводится пример определения необходимых для
проектирования ПК знаний, умений и владений на основе анализа требований
профессионального стандарта, рынка труда и образовательных курсов в области web-
разработки ведущих представителей профессионального сообщества.
Ключевые слова: web-разработка; профессиональная компетенция; профессиональный
стандарт; трудовая функция; рынок труда.
На сегодняшний день одними из самых востребованных кадров на рынке труда являются
IT-специалисты (https://clck.ru/33NqyQ; https://clck.ru/36qvRE; https://clck.ru/36qwFy).
Информационные технологии – динамично развивающийся сектор экономики, включающий
в себя множество профессий. Особым спросом работодателей среди них пользуются web-
разработчики. Это легко объясняется тем уровнем развития и той ролью, которую играет сеть
интернет в жизни современного общества. Всемирная сеть является одним из основных
средств получения и обмена информации, коммуникации, развития экономики, социальной
сферы и государственных услуг. Интернет проник буквально во все стороны нашей жизни и
для обеспечения качества и безопасности его функционирования требуется все больше
специалистов по разработке web-приложений. Не случайно, в список наиболее
востребованных на рынке труда новых и перспективных профессий, утвержденный
Минтрудом России, включена профессия «Разработчик Web и мультимедийных приложений»
[5]. В этой связи, перед системой профессионального образования возникает важная задача
подготовки востребованного работодателями конкурентоспособного web-разработчика.
Учитывая значение IT-сферы для развития страны, государство ежегодно увеличивает
количество бюджетных мест на подготовку соответствующих специалистов [2], что позволяет
снижать проблему кадрового голода, имеющуюся на рынке труда.
Вместе с тем, в профессиональной подготовке будущих IT-специалистов существует ряд
проблем, связанных с противоречием между ожиданиями работодателей к уровню их
подготовки в вузе и реальными профессиональными компетенциями (ПК) выпускников. Так,
одним из основных замечаний со стороны работодателей является несоответствие содержания
подготовки студентов в вузе содержанию производственного процесса. Кроме того,
отмечается недостаточный уровень практической подготовки обучающихся. В силу
объективных причин, вуз не может самостоятельно, в рамках академической среды,
преодолеть указанные проблемы. Одним из путей их решения является тесное взаимодействие
314СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
образовательной организации и работодателей в рамках реализации образовательного
процесса.
Рассмотрим один из вариантов такого сотрудничества – расширенную подготовку
обучающихся в области web-разработки [3; 6]. Основной идеей данного подхода является
активное взаимодействие вуза и работодателей на всех этапах обучения молодого специалиста
– от проектирования образовательной программы до оценки профессиональных компетенций
выпускника на государственной итоговой аттестации. В работе Каракозова С.Д., Худжиной
М.В., Петрова Д.А. представлена последовательность этапов педагогического проектирования
образовательных программ IT-специальностей на основе требований профессиональных
стандартов и работодателей [6]. В данной статье продемонстрируем пример проектирования
профессиональной компетенции будущего web-разработчика на факультете информационных
технологий и математики Нижневартовского государственного университета на основе
трудовой функции профессионального стандарта (ПС) [4] и требований работодателей к
должности HTML-верстальщика.
В таблице 1 приведен фрагмент структуры ПК, сформированный на основе знаний,
умений и трудовых действий трудовой функции «A/03.4 Верстка страниц ИР»
профессионального стандарта [4].
Таблица 1
Компоненты профессиональной компетенции web-разработчика
в части освоения трудовой функции «A/03.4 Верстка страниц ИР»
Компонент
Индикаторы компетенции
компетенции
 синтаксис выбранного языка программирования, особенности
программирования на этом языке, стандартные библиотеки языка
Знать
программирования;
 …
 использовать язык разметки страниц ИР;
 применять специализированное программное обеспечение для верстки страниц
ИР;
Уметь
 определять возможности отображения web-страниц в размерах рабочего
пространства устройств для разных видов дизайн-макетов;
 …
Владеть  созданием структуры кода, размещающего элементы web-страницы ИР;
(трудовое  подключением к ИР стилей оформления web-страниц;
действие ПС)  …
Как видно из таблицы, индикаторы профессиональной компетенции (знаний и умения)
при ее проектировании на уровне образовательной программы формулируются в обобщенном
виде и требуют конкретизации – при разработке рабочих программ дисциплин (РПД).
Поскольку одна и та же компетенция может формироваться на разных дисциплинах и на
разном предметном содержании, каждому преподавателю необходимо определить
соответствующий набор знаний и умений студентов в своей РПД. Для подготовки
конкурентоспособного выпускника определение содержания индикаторов ПК необходимо
осуществлять на основе анализа требований рынка труда. Ниже представлен пример
определения знаний и умений, необходимых будущими web-разработчиками для овладения
315СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
трудовыми действиями «Создание структуры кода, размещающего элементы web-страницы
ИР» и «Подключение к ИР стилей оформления web-страниц». Для решения данной задачи
использовались следующие источники информации: анализ требований к IT-вакансиям на
сайтах поиска работы, консультации с работодателями, изучение опыта обучения web-
разработке ведущих представителей профессионального сообщества.
В таблице 2 приведен фрагмент перечня требований к вакансиям web-разработчика (в
части HTML-верстки), размещенных на сайте HeadHunter.
Таблица 2
Требования к соискателю вакансии web-разработчика (верстка web-страниц)
на сайте HeadHunter
Ссылка на вакансию Требования к соискателю вакансии
Требования:
 Отличное знание HTML5, CSS3;
 Навыки адаптивной кроссбраузерной семантичной верстки, понимание
доступности (в широком смысле);
 Понимание принципов и опыт применения BEM;
 …
https://clck.ru/36qquB
Задачи:
 Вёрстка пользовательских интерфейсов по макетам;
 Разработка веб-приложений с использованием Vue.js;
 Поддержка и рефакторинг существующей вёрстки;
 Участие в построении процессов вёрстки в команде;
 …
Чем предстоит заниматься:
 Верстка страниц, модулей для сайтов клиентов компании для cms Bitrix и
популярных PHP – CMS;
 Адаптивная, кроссбраузерная верстка макетов сайтов (с нуля), верстка
отдельных страниц сайтов, на основе существующих шаблонов;
 Работа в команде над интернет проектами различного уровня сложности
(системами электронной коммерции, интернет – порталами, корпоративными
сайтами, посадочными страницами, web-сервисами).
Что необходимо для работы:
 Уверенное владение HTML5, CCS3, навыки адаптивной верстки,
кроссбраузерной верстки;
https://clck.ru/36qqzD  Релевантный опыт работы от 1 года;
 Знание особенностей верстки под мобильные устройства, планшеты iOS,
Android;
 …
Будет здорово если:
 Верстка по методологии БЭМ (достаточно нейминга), знание подходов к
верстке через Flexbox или Grid;
 Опыт работы с сборщиком Gulp, бандлером Webpack (начальных знаний
достаточно);
 Опыт работы с графическими редакторами Figma, Sketch, Photoshop,
Avocode (хотя бы с одним из них);
 …
Проведенный анализ полученных данных позволил конкретизировать технологии,
которыми должен обладать современный web-разработчик для выполнения трудовых
действий «Создание структуры кода, размещающего элементы web-страницы ИР» и
«Подключение к ИР стилей оформления web-страниц»: HTML5, CSS3, сематическая верстка,
316СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
адаптивная верстка, кроссбраузерная верстка и др. Отметим при этом, что рассмотренные
вакансии не содержат детальных сведений к требуемым знаниям и умениям соискателя.
Оптимальным способом уточнения этой информации может быть проведение консультаций с
региональными работодателями, привлекаемыми к реализации образовательного процесса, а
также анализ программ профессиональной подготовки в области web-разработки ведущих
представителей профессионального сообщества. Для проектирования содержания
профессиональной компетенции будущего web-разработчика были проанализированы
программы курсов ряда известных образовательных платформ: «HTML Academy»
(https://clck.ru/Jb3Kq), «Специалист» (https://clck.ru/36qxX3), «Яндекс Практикум»
(https://clck.ru/34zaAf) и др.
В таблице 3 представлены результаты проведенного анализа.
Таблица 3
Знания и умения необходимые для выполнения трудовых действий по верстке web-страниц
Должен:
Технология
ЗНАТЬ УМЕТЬ
 инструментальные средства для HTML-разметки  выбирать и применять
(Visual Studio Code, Brackets, Sublime Text и др.); инструментальные средства
 структуру HTML-документа; для HTML-разметки;
 теги HTML (<!DOCTYPE>, <head>, <BODY>,  использовать изученные
<META>, и др.); теги для создания
 атрибуты тегов; семантической HTML-
 синтаксис и семантику HTML-элементов; разметки web-документа в
соответствии с графическим
 блочные и строчные элементы;
HTML  критерии валидности HTML-кода; макетом;
 осуществлять анализ и
 структуру и элементы графического макета-web-
проверку валидности
страницы;
разработанного HTML-кода,
 понятие поискового образа документа;
исправлять обнаруженные
 принципы семантической HTML-разметки
ошибки;
(выделение крупных смысловых блоков, разметка
 …
крупных разделов в смысловых блоках, выделение
смысловых заголовков и др.);
 …
 инструментальные средства для HTML-верстки  выбирать и применять
(Visual Studio Code); инструментальные средства
 правила CSS; для HTML-верстки;
 селекторы, свойства и их значения;  создавать и подключать
 варианты задания стилей на странице; CSS-правила к HTML-
 классы и идентификаторы; страницам;
 псевдоклассы и псевдоэлементы;  применять CSS для
построения сеток и
 наследование и каскадирование;
CSS  конфликты свойств; оформления web-документа
в соответствии с
 поток и блочная модель;
графическим макетом;
 позиционирование;
 …
 понятия технологий флекбокс и грид;
 принципы «отзывчивой» и адаптивной верстки
(использование относительных единиц измерения,
гибких изображений, медиазапросов, векторной
графики и др.);
 …
317СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Анализ вакансий на должность web-разработчика и содержания образовательных курсов
позволил включить в профессиональную компетенцию будущего web-разработчика перечень
конкретных знаний и умений, необходимых для выполнения трудовых действий по верстке
web-страниц.
Отметим, что разработка структуры и содержания ПК осуществлялась в тесном
взаимодействии с региональными работодателями, привлекаемыми к реализации
образовательного процесса в университете.
Рассмотренный подход к проектированию профессиональных компетенций можно
применять при реализации образовательных программ на других специальностях и
факультетах.
Литература
1. Каракозов С.Д., Худжина М.В., Петров Д.А. Проектирование содержания
профессиональных компетенций образовательного стандарта ИТ-специалиста на основе
требований профессиональных стандартов и работодателей // Информатика и образование.
2019. №7(306). С. 7-16. https://doi.org/10.32517/0234-0453-2019-34-7-7-16. EDN EDNOIX.
2. Паспорт национальной программы «Цифровая экономика Российской Федерации».
https://clck.ru/FXbYG
3. Петров Д.А. Расширенная подготовка будущих web-разработчиков на основе
требований рынка труда // Информатизация образования и методика электронного обучения:
цифровые технологии в образовании: Мат-лы VII Международной научной конференции (г.
Красноярск, 19-22 сентября 2023 г.). Красноярск, 2023. С. 447-452. EDN VLQJFG.
4. Приказ Министерства труда и социальной защиты Российской Федерации от 18 января
2017 года №44н «Об утверждении профессионального стандарта «Разработчик Web и
мультимедийных приложений». https://clck.ru/36qxNL.
5. Приказ Министерства труда и социальной защиты Российской Федерации от 26
октября 2020 г. №744 «Об утверждении списка 50 наиболее востребованных на рынке труда,
новых и перспективных профессий, требующих среднего профессионального образования».
https://clck.ru/YK757.
6. Karakozov S.D., Khudzhina M.V., Petrov D.A., Dzhambetov E.M., Butko Y.Yu., Morevs P.
Modern Approaches to Teaching Computer Programming to it Students // European Proceedings of
Educational Sciences EpES (г. Москва, 07-08 декабря 2020 г.). 2020. P. 73-81.
https://doi.org/10.15405/epes.20121.9. EDN SZJPAA.
© Петров Д.А., 2024
318СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 378.147
Казиахмедов Т.Б.
канд. пед. наук, доцент
Симурзина Е.А.
преподаватель
Саматова Л.И.
аспирант
Нижневартовский государственный университет
г. Нижневартовск, Россия
ОСОБЕННОСТИ ФОРМИРОВАНИЯ ПСИХОЛОГИИ IT БАКАЛАВРА
В КОМПЕТЕНТНОСТНО-КОНТЕКСТНОМ ОБУЧЕНИИ
Аннотация. В статье раскрыта проблема практической подготовки будущих IT
бакалавров в условиях компетентностно – контекстного обучения, которая связывает
предметную подготовку с психологическими особенностями мыслительной деятельности IT
бакалавра. Рассмотрены некоторые аспекты соотнесения предметного содержания с
подходами в развития профессионального мышления будущих IT бакалавров, а также
представлены психолого-педагогические основы подготовки бакалавров по IT направлениям
в высших учебных заведениях.
Ключевые слова: компетенция; психологические аспекты компетенции; логическое
мышление; абстрактное мышление; аналитическое мышление.
Если рассмотрим ОПК и ПК стандарта ФГОС ВО, то складывается впечатление, что IT-
бакалавров можно обучать, не учитывая ни психологические, ни дидактические особенности
формирования специалистов для IT индустрии.
Для примера рассмотрим сказанное на примере стандарта 09.03.02 – Информационные
системы и технологии.
Приведём некоторые ОПК и ПК.
Таблица 1
Содержание некоторых компетенций
Код
Компетенция Индикаторы
компетенции
Способен применять Знает: основы математики, физики,
естественнонаучные и вычислительной техники и
общеинженерные знания, методы программирования.
математического анализа и Умеет: решать стандартные
моделирования, теоретического и профессиональные задачи с применением
экспериментального исследования в естественнонаучных и общеинженерных
ОПК-1 профессиональной деятельности. знаний, методов математического анализа и
моделирования.
Владеет: навыками применения
современных информационных технологий
и программных средств, в том числе
отечественного производства, при решении
задач профессиональной деятельности.
Способен разрабатывать алгоритмы и Знает: основные языки программирования,
программы, пригодные для современные программные среды
ОПК-6
практического применения в области разработки информационных систем и
технологий.
319СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
информационных систем и Умеет: применять языки программирования,
технологий. современные программные среды
разработки информационных систем и
технологий для автоматизации бизнес-
процессов, решения прикладных задач
различных классов.
Владеет: навыками программирования,
отладки и тестирования прототипов
программно-технических комплексов задач.
Способен осуществлять выбор Знает: основные платформы, технологии и
платформ и инструментальных инструментальные программно-аппаратные
программно-аппаратных средств для средства для реализации информационных
реализации информационных систем. систем.
Умеет: применять современные технологии
ОПК-7.
для реализации информационных систем.
Владеет: технологиями применения
инструментальных программно- аппаратных
средств реализации информационных
систем.
Способен применять математические Знает: методологию и основные методы
модели, методы и средства математического моделирования,
проектирования информационных и классификацию и условия применения
автоматизированных систем. моделей, методы и средства проектирования
информационных и автоматизированных
систем, инструментальные средства
ОПК-8 моделирования и проектирования.
Умеет: моделировать процессы и системы с
применением современных
инструментальных средств.
Владеет: навыками моделирования и
проектирования информационных и
автоматизированных систем.
Способность обеспечения Знает: основы современных баз данных,
эффективной работы баз данных, серверных и промышленных СУБД.
включая развертывание, Умеет: развертывать базы данных как часть
сопровождение, оптимизацию информационной системы, выполнять
ПК-1 функционирования баз данных, параметрическую настройку ИС и
являющихся частью различных настраивать сетевые параметры.
информационных систем. Владеет: методами оптимизации
производительности БД на основе
результатов мониторинга работы с ней.
Способность создания (модификации) Знает: особенности разработки требований к
и сопровождения информационных ИС.
систем (ИС), автоматизирующих Умеет: разрабатывать прототип ИС и
задачи организационного управления адаптировать типовую ИС.
и бизнес-процессы в организациях Владеет: языками программирования и
ПК-2.
различных форм собственности с методами тестирования ИС.
целью повышения эффективности
деятельности организаций –
пользователей ИС под особенности
бизнес-процессов заказчиков.
Конечно такой подход позволяет оценить какими компетенциями овладевают бакалавры
в ходе обучения. Но как можно оценить уровни компетенций, скорость принятия тех или иных
профессиональных решений, оптимальность предлагаемых решений, если не привязать к ним
психологические особенности обучающихся?
320СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Конечно, преподаватели при разработке рабочих программ учитывают, как развить
психологические особенности в профессиональной деятельности в IT сфере. Знание
психологии будущих IT бакалавров позволило бы преподавателя и выбрать соответствующие
виды учебной деятельности для развития их профессиональных. Сами по себе компетенции и
индикаторы, рассмотренные нами, не ориентирует ни студентов, ни преподавателей на
важность развития психологических особенностей в IT-профессиях.
Рассмотрим какие психологические особенности нужно учитывать при обучении IT
бакалавров. Ну давайте начнем с психологии программирования.
При создании современных надежных и безопасных программ (программных
комплексов), отвечающих требованиям времени к их разработке, эксплуатации и
модернизации необходимо не только умело пользоваться предоставляемой вычислительной и
программной базой современных компьютеров, но и учитывать интуицию и опыт
разработчиков языков программирования и прикладных систем. Помимо этого, в процессе
разработки программ необходимо использовать экспериментальные исследования, которые
основываются на применении концепции психологии мышления при исследовании проблем
вычислительной математики и информатики. Такой союз вычислительных, информационных
систем и программирования принято называть психологией программирования.
Первое, что важно формировать у IT бакалавров-это ответственность за качество
разрабатываемого программного продукта, так как любая ошибка в программе воспроизводит
себя тысячекратно.
К целям психологии программирования наряду с улучшением использования
компьютера, основанного на глубоком знании свойств мышления человека, относится и
определение экспериментальным путем, склонностей и способностей программиста как
личности. Особенности личности играют критическую роль в определении (исследовании)
рабочего стиля отдельного программиста, а также особенностей его поведения в коллективе
разработчиков программного обеспечения. Ниже приводится список характеристик личности
владеющего психологией программирования.
 Внутренняя/внешняя управляемость. Личности с выраженной внутренней
управляемостью стараются подчинять себе обстоятельства и убеждены в способности сделать
это, а также в способности повлиять на свое окружение и управлять событиями. Личности с
внешней управляемостью (наиболее уязвимы с точки зрения обеспечения безопасности
программного обеспечения) чувствуют себя жертвами не зависящих от них обстоятельств и
легко позволяют другим доминировать над ними.
 Высокая/низкая мотивация. Личности с высокой степенью мотивации способны
разрабатывать очень сложные и сравнительно надежные программы. Руководители,
способные повысить уровень мотивации, в то же время, могут стимулировать своих
сотрудников к созданию программ с высоким уровнем их безопасности.
 Умение быть точным. Завершение разработки программы требует тщательного
разностороннего тестирования. Именно проблема в нехватке IT специалистов в большей
степени ориентирована на подготовку специалистов умеющих проверить каждую компоненту
321СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
программных комплексов, временную избыточность разработанных алгоритмов, в выборе
наиболее оптимальных алгоритмов, что несомненно скажется на качестве программного
обеспечения, так и уровне подготовки будущих IT с необходимо особое внимание уделять
подробностям и готовности проверить специалистов.
Психология программирования включает в себя и изучение разработки безопасного
программного обеспечения. Т. е. разработчик программ должен разбираться в том, в какой
степени с помощью интерфейса программ, диалоговых систем обеспечить развитие
устойчивости психики пользователей, способствовать к умению работать в коллективе,
уходить от эгоизма, обычно присущего продвинутым пользователям информационных
систем.
Теперь с особенности мышления программиста. Когда говорят о мышлении
программиста, то мы найдем, что программисту прописывают следующие виды мышления:
 Абстрактное мышление
 Аналитическое мышление
 Алгоритмическое мышление
 Логическое мышление
 Структурное мышление
 Визуальное мышление
 Стратегическое мышление
 Концептуальное мышление
Рассмотрим некоторые определения этих видов мышления и оценим каким образом их
связать с общепрофессиональными и профессиональными компетенциями IT бакалавров.
Абстрактное мышление – один из главных видов мышления программиста.
Абстракции в данном случае это не только философская концепция, но и инструменты анализа
данных, сущностей, связей между данными, объект различных стилей программирования.
Абстрактное мышление – мышление об объектах, принципах и идеях, которых нет в
физическом мире. С помощью абстрактного мышления мы связываем разные явления между
собой и выстраиваем их в общую картину, чтобы использовать полученные выводы на
практике и для разработки качественного программного обеспечения.
Наличие аналитического мышления у программиста определяется его способностью
структурировать информацию, разбивать её на логические блоки, анализировать их и
устанавливать взаимосвязи между ними. Данный тип мышления позволяет программисту
принимать максимально точные, логичные и взвешенные решения, которые впоследствии
программируются и становятся частью разрабатываемой информационной системы.
Алгоритмическое мышление понимают как систему мыслительных приёмов
направленных на поиск оптимальной последовательности действий, приводящей к решению
задач. С алгоритмическим мышлением программиста связывают как сами алгоритмы, так и
формы их представления: процедуры, функции, классы. Часто считаем, если программист
может реализовать алгоритмы и программы в функциональных, логических и объектно-
322СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
ориентированных средах, то это и есть показатель наличия у программиста аналитического
мышления.
Логическое мышление – мыслительный процесс, при котором IT специалист
использует логические понятия и конструкции как на этапе разработки и структурирования
данных, так и на этапе организации запросов, которые решают задачи из области бизнес
процессов, для чего и разрабатывается программа. Логическое мышление являясь крайне
важным для любого программиста, особенно это выражается в методах построения
алгоритмов: рекурсии, математическом программировании, динамическом
программировании.
Структурное мышление нужно рассматривать в комплексе с аналитическим
мышлением и служит для построения структур данных и связей между ними, модулей
разрабатываемого программного комплекса и иерархии данных модулей.
Визуальное мышление – использование способности нашего зрения проводить
предварительную обработку зрительной информации. Поэтому в мозг поступает не исходная
видимая картинка, как в фотоаппарате, а уже обработанная. В обработанной картинке
выявляются определенные объекты. Но применительно к программистом, особое значение
придаем формированию психологии визуализации данных, интерфейсов программ. Здесь
формируется знания и особенности мышления программиста, благодаря чему он может
использовать древовидные структуры, графы, графики, диаграммы и др.
Стратегическое мышление. Этим редким видом мышления владеют не все IT
специалисты. От этого мышления зависит как жизненный цикл программного обеспечения,
так и направленность развития создаваемого программного обеспечения. Поэтому у многих
фирм-разработчиков программного обеспечения очень высоко оплачивается должность
системного аналитика.
Стратегическое мышление это умения программиста найти построение программ с
внедрением деревьев решений, нейронных сетей и технологий, строить выигрышные
алгоритмы и ии.
Концептуальное мышление. Основной элемент концептуального мышления
называется концепцией. Концепция – это согласованный набор понятий, которые позволяют
влиять на окружающий мир. Или, иначе, концепция – это некоторая модель мира, которая
рассматривает ситуацию с определенного ракурса. Каждая концепция состоит из трех частей:
 текущее состояние;
 целевые возможности;
 приемы влияния.
Простейший пример применения концепции – потёкший кран.
 Текущее состояние – кран течет.
 Целевые возможности – временное устранение течи, замена прокладки, замена крана.
 Приемы влияния – замотать изолентой, поменять прокладку, вызвать сантехника.
В столь простой ситуации прибегать к концептуальному мышлению нет смысла, потому
что все и так очевидно.
323СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Теперь привяжем к таблице компетенций те виды мышления, которые необходимо
развивать. Рассмотрим это на основе ограниченного количества компетенций.
Таблица 2
Соотнесение компетенций к видам мышления IT-бакалавра
Код
Компетенция Индикаторы Виды мышления
компетенции
Способен разрабатывать Знает: основные языки Абстрактное
алгоритмы и программы, программирования, мышление.
пригодные для современные программные Аналитическое
практического применения среды разработки мышление.
в области информационных информационных систем и Алгоритмическое
систем и технологий. технологий. мышление.
Умеет: применять языки Логическое
программирования, мышление.
современные программные
среды разработки
ОПК-6
информационных систем и
технологий для автоматизации
бизнес-процессов, решения
прикладных задач различных
классов.
Владеет: навыками
программирования, отладки и
тестирования прототипов
программно-технических
комплексов задач.
Способен осуществлять Знает: основные платформы, Абстрактное
выбор платформ и технологии и мышление.
инструментальных инструментальные программно- Аналитическое
программно-аппаратных аппаратные средства для мышление.
средств для реализации реализации информационных Логическое
информационных систем. систем. мышление.
Умеет: применять современные Структурное
ОПК-7.
технологии для реализации мышление.
информационных систем. Стратегическое
Владеет: технологиями мышление.
применения инструментальных
программно- аппаратных
средств реализации
информационных систем.
Способность обеспечения Знает: основы современных баз Абстрактное
эффективной работы баз данных, серверных и мышление.
данных, включая промышленных СУБД. Аналитическое
развертывание, Умеет: развертывать базы мышление.
сопровождение, данных как часть Алгоритмическое
оптимизацию информационной системы, мышление.
функционирования баз выполнять параметрическую Логическое
ПК-1
данных, являющихся настройку ИС и настраивать мышление.
частью различных сетевые параметры. Структурное
информационных систем. Владеет: методами мышление.
оптимизации Стратегическое
производительности БД на мышление.
основе результатов
мониторинга работы с ней.
324СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Способность создания Знает: особенности разработки Абстрактное
(модификации) и требований к ИС. мышление.
сопровождения Умеет: разрабатывать прототип Аналитическое
информационных систем ИС и адаптировать типовую мышление.
(ИС), автоматизирующих ИС. Алгоритмическое
задачи организационного Владеет: языками мышление.
управления и бизнес- программирования и методами Логическое
процессы в организациях тестирования ИС. мышление.
ПК-2.
различных форм Структурное
собственности с целью мышление.
повышения эффективности Визуальное
деятельности организаций – мышление.
пользователей ИС Стратегическое
под особенности бизнес- мышление.
процессов заказчиков. Концептуальное
мышление.
Такое видение проблемы позволяет преподавателю выстроить наиболее оптимальную
траекторию выполнения лабораторно-практических работ, самих практик.
Например, аналитическое мышление подразумевает, что человек обладает следующими
умениями:
 Разбивать и структурировать информацию. Наш интеллект плохо справляется с
огромными массивами плохо структурированных данных. Поэтому любую задачу и любую
информацию всегда нужно разбивать на части, которые будет гораздо проще обрабатывать по
отдельности. Большие данные и программы должны быть упрощены с помощью структур
данных и схем их связей
 Собирать, анализировать и оценивать факты. Такие операции нужны при
разработке интеллектуальных информационных систем, основанных на знаниях, где цели
связаны с фактами и известными законами предметной области.
 Эффективно управлять информацией. Умение оценить актуальность информации,
представить данную информацию посредством экономных пространственных форматов
данных, передача которых также занимает оптимальное время.
 Находить и рассматривать альтернативные варианты.
Аналитическое мышление подразумевает умение быстро находить альтернативные
варианты, оценивать их, сравнивать и выбирать наилучшие.
Для развития аналитического мышления подойдут такие упражнения как:
 Математические вычисления и моделирование. Решение профессиональных задач
требует знание математических законов, правил, теорем и умения моделировать решаемые
задачи с использованием математического аппарата. Такие задания являются лучшими
упражнениями для развития аналитического мышления и когнитивных способностей вообще.
Лучше всего для этой цели подходят практикумы по программированию математических и
логических задач, конкурсы, олимпиады по программированию вычислительных и
графических задач.
 Логические задачи. Логика тесно связано с аналитическими способностями. Развитию
логического мышления я способствуют программирование специальных задач особенно при
325СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
изучении языков и сред логического программирования. Особенно важно рассматривать
задачи логического вывода, поисковые задачи с использованием как строгой, так и нечеткой
логики.
 Программирование алгоритмов со стратегией выигрыша, разгадывание возможных
результатов вычислительных алгоритмов, оценка времени выполнения алгоритмов. Такие
алгоритмы очень важны в профессии программиста. Они заставляет нас исследовать
особенности своего разума, выискивая в памяти ответы на каверзные вопросы.
 Программирование ситуаций на шахматной доске. Шахматы, шашки позволяет
поупражнять мозг, совместив приятное с полезным. В крайнем случае можно поиграть с
компьютерным соперником, настроив подходящий уровень сложности.
 Книги и электронные ресурсы. Конечно, читая литературу по профессии, можно
находить ответы на те вопросы, которые вы считаете важными. Но если при поиске
информации вы еще оцениваете время поиска и качество информации, чтение станет куда
более увлекательным и полезным.
 Поиск информации. Важно не только находить методы поиска информации, но и
задуматься над автоматизацией и систематизацией задач поиска и сортировке. Поэтому важно
находить для себя интересные темы и каждый день стараться узнавать что-то новое, отмечать
для себя хотя бы один новый факт.
 Поиск альтернатив. Благодаря тому, что наш мозг склонен экономить энергию, не
всегда мы должны соглашаться с ним, когда он ориентируется на наше подсознание. Поэтому
мы обычно прекращаем искать решения, как только находим хотя бы одно, кажущееся нам
удачным. Поэтому всегда нужно искать альтернативные решения, которые иногда могут
оказываться более эффективными, чем-то что было найдено первым. Особенно это важно в
задачах структурирования данных, их представления в динамической памяти ЭВМ.
 Исследование окружающего мира. Программист должен видеть, что много что
реализовано в компьютере, в адресации памяти взято из реальной жизни. Программист должен
быть ориентирован на, что порой хорошие решения некоторых проблем лучше искать в
окружающем. Так например, на основе философской концепции “Мир-множество объектов”
появились объектно- ориентированное программирование и объектно-ориентированная
система управления базами данных.
 Участие в спорах. Участие в конструктивных дискуссиях, в которых с обеих сторон
звучат адекватные аргументы, очень полезно. Благодаря этому человек учится чётко и
последовательно формулировать мысли, оценивать значимость и правдоподобность
аргументов, отличать важное от неважного.
 Анализ чужого стиля программирования. Одна и та же задача программирования
может быть реализована в десятках вариантах и разных стилях Не нужно сразу же делать
вывод, что все эти варианты не верны, только ваш вариант правильный. Вместо этого стоит
подумать, на чём основано его подходы, какая логическая цепочка рассуждений под ним
лежит. Очень интересным становится и анализ кода, который создается современными
нейросетями, причем варианты нейросетей порой намного лучше и эффективнеее.
326СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
 Создание ментальных карт (mind map). Для представления знаний мы в основном
используем следующие модели:
a. процедурные знания
b. продукции
c. фактологичесие знания(табличные)
Знания можно представить и фреймами, ментальными картами, и графами.
Моделирование ситуаций в том числе с использованием специальных сред
моделирования. Речь идет не только об анализе проблемных ситуаций, но и в анализе
конкретного проекта или информационной системы.
Как организовать обучение IT-бакалавров и магистров с целью развития психологии
программиста более подробно описаны в [1-3].
С методологией выбора проектов и задач, способствующих формированию
аналитического мышления можно ознакомиться в [4; 5].
Таким образом, формирование соответствующего банка лабораторно-практических
заданий исследовательского характера, проектов, реализуемых для бизнеса, носит не только
обучающий характер, но и способствует формированию психологии программирования, что,
несомненно, сказывается на качестве подготовки IT бакалавров.
Литература
1. Казиахмедов Т.Б. Проблемы и перспективы подготовки бакалавров и магистров по IT-
направлениям в вузе // Современное программирование: Мат-лы II Международной научно-
практической конференции (г. Нижневартовск, 14-16 ноября 2019 г.). Нижневартовск, 2019.
С. 7-11. EDN MTUBXV.
2. Казиахмедов Т.Б., Пащенко О.И., Яламов Г.Ю. Методические подходы обучения
парадигмам и методам программирования будущих бакалавров по IT-направлениям //
Педагогическая информатика. 2022. №3. С. 217-228. EDN OAPHOZ.
3. Казиахмедов Т.Б., Симурзина Е.А. Особенности обучения программированию
бакалавров, обучающихся по направлению «информатика и вычислительная техника» //
Педагогическая информатика. 2023. №1. С. 222-229. EDN RLCUQP.
4. Казиахмедов Т.Б., Мосягина Т.В. Моделирование в математических пакетах как
основа организации научных исследований студентов // Современное программирование: мат-
лы III Международной научно-практической конференции (г. Нижневартовск, 27-29 ноября
2020 г.). Нижневартовск, 2021. С. 55-62. https://doi.org/10.36906/AP-2020/11. EDN VPATXA.
5. Казихамедов Т.Б., Клочков С.И. UML для бизнес-моделирования: зачем нужны
диаграммы процессов // Современные вопросы устойчивого развития общества в эпоху
трансформационных процессов: сб. мат-ов IX Международной научно-практической
конференции (г. Москва, 19 мая 2023 г.). Москва, 2023. С. 152-155. EDN QPCJPV.
© Казиахмедов Т.Б., Симурзина Е.А., Саматова Л.И., 2024
327СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.451
Широков В.В.
канд. техн. наук, доцент
Щиголева М.А.
канд. техн. наук, доцент
Санкт-Петербургский государственный электротехнический
университет «ЛЭТИ» им. В.И. Ульянова (Ленина)
г. Санкт-Петербург, Россия
ФОРМИРОВАНИЕ ПРОФЕССИОНАЛЬНЫХ КОМПЕТЕНЦИЙ
ВЫПУСКНИКОВ ВУЗОВ ПО НАПРАВЛЕНИЮ
«ИНФОРМАЦИОННЫЕ СИСТЕМЫ И ТЕХНОЛОГИИ»
Аннотация. В работе рассматривается методология формирования знаний и
компетенций выпускников в профильных дисциплинах подготовки по направлению обучения
Информационные системы и технологии. Учитывается необходимость обеспечения
профессиональных стандартов и обязательной квалификации в области технологий
системного программирования. Рассмотрена область специальных ресурсов операционных
систем, выбраны пространства имен и posix-возможности, как примеры базовых знаний.
Ключевые слова: операционная система; контейнер; процесс; пространства имён;
суперпользователь.
Квалификация выпускников направления подготовки должна соответствовать
профессиональным стандартам в области «Связь, информационные и коммуникационные
технологии», которому соответствуют установленные виды профессиональной деятельности,
соответствующие им трудовые функции и базовые группы должностей. В функциональную
карту вида профессиональной деятельности стандарта «Связь, информационные и
коммуникационные технологии» входят трудовые функции, ориентированные на знания в
области информационных технологий, включая разработку, отладку, сопровождение,
эксплуатацию программного обеспечения, поддерживающих его операционных систем,
управления базами данных. Для обеспечения последующего роста квалификации выпускники
должны обладать системным подходом к своим знаниям по созданию системного
программного обеспечения, компонентов системных программных продуктов, систем
управления данными, что обеспечит им навыки освоения и работы с современными и вновь
создаваемыми программными средствами, и платформами инфраструктуры информационных
технологий.
Анализ требований к выпускникам по профессиональным компетенциям и трудовым
функциям профессиональных стандартов выделил три основных блока знаний: компоненты
программного обеспечения (1), операционные системы (2), системы обработки данных (3). По
всем трем блокам выпускники должны иметь системное представление и навыки разработки
и применения. Набор дисциплин учебного плана подготовки должен в совокупности
обеспечить требования к должности, профессии, специальности, установленные
профессиональным стандартом. Методология дисциплин подготовки должна отражать
компонентность, системность и специфичность обязательного материала в сочетании
328СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
теоретического и прикладного характера материала с практическим применением в
самостоятельной работе обучаемых. В зависимости от уровня подготовки и квалификации
выпускников обеспечивается широта и целостность рассмотрения основных блоков обучения
от разработчика до проектировщика и организатора разработки.
Для блока Операционные системы (ОС) профессиональный стандарт по трудовым
функциям устанавливает необходимые знания, умения, действия: формирование требований
к ОС, разработка архитектуры ОС, написание компонентов ОС, отладка компонентов ОС,
документирование хода разработки ОС, сопровождение созданной ОС.
Традиции высшего учебного заведения, наработки авторов учебных программ,
актуальные новые достижения, позволяют привлекать дополнительные источники знаний
вызывать интерес выпускников к поиску самостоятельных решений на базе фундаментальной
проработки основ создания и технологий применения операционных систем. Для примера
выбран раздел специальных ресурсов операционных систем – пространства имен и posix-
возможности и технология контейнеризации.
Технология контейнеризации получила широкое распространение в информационных
системах благодаря возможности выполнения приложений в изолированном от основной
среды окружении [1, с. 25].
Однако, несмотря на широкую распространенность технологии контейнеризации,
ознакомление с ее внутренними механизмами реализации требует привлечения
дополнительных образовательных ресурсов, таких как изучение специальных разделов
операционных систем (ОС) [2, с. 36].
Более детальное, чем предусмотрено учебными планами, знакомство с внутренними
механизмами контейнеризации необходимо, поскольку дает возможность специалистам IT-
индустрии использовать всю палитру возможностей ОС для построения надежных
контейнеров приложений, а также в случае необходимости быстрее и осознанней устранять
возникающие отклонения от запланированной функциональности.
Технология контейнеризации базируется на нескольких специальных ресурсах ОС, к
числу которых в первую очередь следует отнести пространства имен и posix-возможности [3,
с. 348].
Для углубленного изучения именно этих ресурсов предлагается создать набор
практических работ, выполнение которых повысит компетенции обучающихся по
направлению «Информационные системы технологии» в части внутренних механизмов ОС,
на основе которых функционирует технология контейнеризации.
В данной статье предлагается описание методических указаний для выполнения
практических работ, предназначенных для повышения компетенций обучающихся в
специальных разделах ОС, непосредственно связанных с построением контейнеров, а именно,
в пространствах имен и posix-возможностях.
Практическая работа посвящена ресурсу ОС, называемому пространства имен. Работа
содержит ряд этапов.
329СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
На первом этапе формулируется цель работы, а именно, знакомство с основными
системными вызовами, обеспечивающими выполнение дочернего процесса в изолированном
от родительского процесса пространстве имен.
На втором этапе приводятся основные сведения о пространствах имен, как о средстве,
позволяющем изолировать некоторый вид ресурса одного процесса от доступа другого
процесса. Перечисляются виды ресурсов, которые могут быть изолированы. Это следующие
виды ресурсов операционной системы: «Пространства имён» (https://clck.ru/39iWAv):
1) идентификаторы процессов, 2) имена хостов, 3) очереди сообщений, 4) сетевые ресурсы,
5) имена пользователей и групп пользователей, 6) системное время, 7) каталоги файловой
системы, 8) контрольные группы процессов.
В традиционном исполнении и родительскому и дочернему процессам доступны одни и
те же ресурсы, входящие в перечисленные пространства имен.
То есть перечисленные пространства имен являются общими для них и изменения этих
имен одним процессом затрагивают и другой процесс. Что плохо, поскольку, например, если
один процесс захватит большую долю ресурсов преднамеренно или вследствие ошибки
программирования, то второй процесс потеряет возможность выполняться.
Поэтому обеспечение устойчивого выполнения процессов тесно связано с выполнением
их в изолированных пространствах имен.
То есть изменение имен в пространстве одного процесса не должно затрагивать
аналогичные имена в пространстве другого процесса.
Такие ограничения как раз и необходимы при реализации контейнеров, как средств
изоляции процессов, основанных на механизмах пространства имен.
На третьем этапе происходит ознакомление с программным интерфейсом пространств
имен. Это набор системных функций (API–application programming interface), которые
предоставляет операционная система для формирования изолированных пространств имен:
«Глубокое погружение в Linux namespaces» (https://habr.com/ru/articles/458462/).
Первая функция имеет следующий прототип:
int unshare(int flags),
где flags – набор флагов, передаваемых дочернему процессу. Каждый флаг представляет собой
отдельный бит, показывающий, какое именно пространство имен требует изоляции.
Данную функцию необходимо использовать при порождении дочернего процесса стандартной
функцией:
pid_t fork(void),
где pid_t – тип идентификатора процесса.
Вторая функция, позволяющая создавать дочерние процессы, выполняющиеся в
отличных от родительских процессов, пространствах имен, имеет следующий прототип:
int clone(int (*fn)(void *), void *child_stack, int flags, void *arg),
где fn – функция, реализующая дочерний процесс, child_stack –указатель на начало стека
дочернего процесса, flags – набор флагов, передаваемых дочернему процессу, arg –аргументы,
передаваемые функции fn.
330СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Вторая функция позволяет за один вызов осуществить установку необходимых для
изоляции пространств имен и создание дочернего процесса. Поэтому вторую функцию
следует признать более предпочтительной для создания контейнеров, чем первую функцию.
В функцию fn() должен быть помещен запуск программы, которую требуется выполнять
внутри контейнера. Запуск производится с помощью функций семейства exec().
В заключение третьего этапа работы представлен шаблон контейнера. Для более ясного
понимания обучающимися структуры шаблона представлены только компоненты,
обеспечивающие запуск приложений.
int fn(void *) {
exec(child_path);
}
int main() {
int child_pid = clone(fn, child_stack, flags, NULL);
waitpid(child_pid, NULL, 0);
}
То есть контейнер представляет собой приложение, которое запускает внутри себя
другое приложение, имя которого child_path.
На следующем (четвертом) этапе практической работы, посвященной пространствам
имен, подробно рассматриваются доступные виды пространств имен. Для каждого
пространства имен иллюстрируются отличия в родительском и дочернем процессах.
Два способа иллюстрирования различий общего пространства имен и изолированных
пространств имен в родительском и дочернем процессах могут быть предложены. При первом
способе в качестве дочернего процесса выбирается оболочка командной строки, и все
проверки параметров выполняются путем ввода соответствующих команд операционной
системы. При втором способе в программе дочернего процесса используются функции
операционной системы (API). Первый способ ориентирован на администраторов
операционной системы, а второй – на системных программистов.
Если ранее упоминавшаяся переменная flags содержит бит CLONE_NEWPID, то
дочерний процесс создается в новом пространстве идентификаторов процессов. Это означает,
что процесс, созданный вызовом clone(), будет иметь идентификатор 1, а его родитель будет
иметь идентификатор 0. Такая ситуация будет означать, что дочерний процесс – это первый
процесс в системе. Убедиться в справедливости такого утверждения можно, выполняя перед
вызовом exec() приведенного выше шаблона следующие вызовы (получение идентификатора
процесса и получение идентификатора родительского процесса):
pid_t getpid(void);
pid_t getppid(void).
Если переменная flags содержит бит CLONE_NEWUTS, то дочерний процесс создается
в новом пространстве имен хоста. Если в дочернем процессе перед exec() изменить имя хоста
с помощью функции sethostname(), то это измененное имя будет присутствовать только в
331СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
дочернем процессе. В родительском процессе имя хоста, получаемое функцией gethostname(),
останется прежним.
Если переменная flags содержит бит CLONE_NEWIPC, то дочерний процесс создается в
новом пространстве межпроцессного взаимодействия (IPC – Inter-Process Communications –
межпроцессное взаимодействие). Объекты межпроцессного взаимодействия – это очереди
сообщений, создаваемые вызовами msgget() или mq_open(). Если в дочернем процессе создать
очередь, например, стандарта POSIX (вызов mq_open()), эта очередь будет видна только
процессам из этого пространства имен. Процессы из этого же пространства имен смогут
открыть эту очередь, посылать в нее сообщения и читать из нее сообщения. Родительский
процесс не сможет открыть эту очередь, вызов mq_open() вернет ошибку.
Если переменная flags содержит бит CLONE_NEWNET, то дочерний процесс создается
в новом сетевом пространстве. Сетевое пространство – это набор объектов, связанных с
сетями. А именно, сетевые устройства, сетевые протоколы, таблицы маршрутизации, номера
портов сокетов. В каждом сетевом пространстве могут быть одинаковые виртуальные
объекты, например, сокеты, привязанные к одному и тому же номеру порта.
Важную роль играет взаимодействие процессов, выполняющихся в разных сетевых
пространствах. Именно на этом этапе могут возникнуть существенные трудности у
обучающихся при организации взаимодействия процессов, выполняющихся в разных сетевых
пространствах. Дело в том, что организация такого взаимодействия на уровне API требует
знакомства с программным интерфейсом netlink, который позволяет программно реализовать
функциональность команды ip, традиционно обеспечивающей управление сетевыми
объектами на уровне командной оболочки. Но программный интерфейс netlink требует
глубокой подготовки в области сетевого программирования от учащихся.
Поэтому предлагается компромиссное (между netlink и ip) решение – использовать
функцию system() для программного вызова команд ip. Использование функции system() не
рекомендуется для привилегированных команд, каковыми являются создание и
конфигурирование сетевых объектов с помощью команды ip. Однако в данном учебном
проекте, когда на первый план выдвигается идея ознакомления с изоляцией одних процессов
от других, такой подход следует признать целесообразным.
Для реализации взаимодействия между процессами, выполняющимися в разных сетевых
пространствах, используются виртуальные устройства veth.
Создание пары таких устройств veth0 и veth1 осуществляется вызовом:
system("ip link add veth0 type veth peer name veth1").
Поскольку созданная пара устройств принадлежит исходному пространству имен,
принадлежащему родительскому процессу, необходимо одно устройство переместить в
дочернее пространство. Это делается вызовом:
system("ip link set veth1 netns str_child_pid"),
где str_child_pid – строковое представление идентификатора дочернего процесса.
Затем осуществляем привязку устройств к ip-адресам вызовами:
system("ip addr add 10.1.1.1/24 dev veth0") – в родительском процессе,
332СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
system("ip addr add 10.1.1.2/24 dev veth1") – вдочернем процессе.
И активизацию устройств:
system("ip link set dev veth0 up") – в родительском процессе,
system("ip link set dev veth1 up") – в дочернем процессе.
Теперь можно проверять взаимодействие процессов, выполняющихся в разных сетевых
пространствах, с помощью команды ping, например, из дочернего процесса:
system("ping -c 5 10.1.1.1").
Если переменная flags содержит бит CLONE_NEWUSER, то дочерний процесс создается
в новом пространстве пользователя и группы, отличном от пространства пользователя и
группы родительского процесса. Существуют ограничения на идентификаторы пользователей
и групп дочернего пространства в зависимости от идентификаторов пользователя и группы
родительского пространства. Эти ограничения формируются путем редактирования файлов
/proc/[pid]/uid_map и /proc/[pid]/gid_map.
Родительский процесс должен записать в файлы uid_map и gid_map допустимые
значения uid и gid, которые можно присвоить дочернему процессу. Запись осуществляется в
определенном формате. Пример записи:
0 1000 1,
где 0 – это допустимый идентификатор пользователя дочернего процесса, 1000 – это текущий
идентификатор родительского процесса, 1 означает, что отображается одно значение
идентификатора. Точно такая же запись в файл gid_map означает подобные же ограничения,
относящиеся к идентификатору группы.
Приведенные пример показывает, что если родительский процесс имеет идентификатор
пользователя (группы), равный 1000, то дочерний процесс может вызвать функцию setuid(0)
(setgid(0)) и установить идентификатор пользователя (группы), равный 0.
Если переменная flags содержит бит CLONE_NEWTIME, то дочерний процесс создается
в новом пространстве времени. Пространство времени позволяет установить время дочернего
процесса отличающимся от времени родительского процесса.
Время дочернего процесса устанавливается не произвольно, а может протекать со
смещением относительно времени родительского процесса. Величина смещения задается в
родительском процессе путем редактирования файла /proc/[pid]/timens_offsets.
Пример записи представлен ниже:
monotonic -100 0\nboottime 100 0.
Здесь таймер монотонного времени дочернего процесса получает смещение -100 с и 0 нс
относительно времени родительского процесса, а таймер времени с момента загрузки
получает смещение +100 с и 0 нс относительно времени родительского процесса.
Если переменная flags содержит бит CLONE_NEWNS, то дочерний процесс создается в
новом пространстве имен монтирования. Пространство имен монтирования позволяет создать
новую корневую файловую систему, в которой будет выполняться дочерний процесс. При
этом он не будет видеть исходную корневую файловую систему, что обеспечивает ее
изоляцию от дочернего процесса. Этот вид файловой системы создается системными
333СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
функциями mount() и umount(). При этом действия этих функций видны в рамках одного
пространства имен монтирования и не видны в других пространствах имен монтирования.
В первую очередь необходимо получить образец корневой файловой системы, в которой
будет работать дочерний процесс. Такой образец можно получить, например, на сайте
(https://alpinelinux.org/downloads/). Затем необходимо создать каталог (назовем его rootfs),
который будет корневым каталогом новой файловой системы, и переписать в него содержимое
архива, полученного на сайте. Ниже приведены вызовы функций, которые необходимо
выполнить перед вызовом exec() в дочернем процессе. После выполнения перечисленных
вызовов для дочернего процесса будет создана изолированная файловая система.
Монтируем каталог rootfs:
mount("rootfs", "rootfs", "ext4", MS_BIND, "").
Переходим в него:
chdir("rootfs").
Создаем каталог put_old для хранения старой корневой файловой системы:
mkdir("put_old", 0777).
Делаем текущий каталог корневым каталогом, а старый помещаем в put_old:
syscall(SYS_pivot_root, ".", "put_old").
Переходим в корень нового каталога:
chdir("/").
Создаем каталог proc:
mkdir("/proc", 0555).
Монтируем файловую систему proc в каталог proc:
mount("proc", "/proc", "proc", 0, "").
Отмонтируем каталог put_old, чтобы старая корневая система стала недоступной:
umount2("put_old", MNT_DETACH).
Если переменная flags содержит бит CLONE_NEWCGROUP, то дочерний процесс
создается в новом пространстве контрольных групп. При общем с родителем пространстве
контрольных групп дочерний процесс «видит» запись файла /proc/self/cgroup, что позволяет
ему обратиться к файловой системе /sys/fs/cgroup, описывающей ресурсы, выделенные
контрольным группам. В изолированном пространстве файл /proc/self/cgroup возвращает
корневой каталог «/» и дочерний процесс не может «увидеть» внешнее окружение.
Новое пространство контрольных групп создается путем создания каталога (назовем его
для определенности mygrp) и монтирования его с типом «контрольная группа»:
mount -t cgroup2 none mygrp.
Затем создается подкаталог (назовем его child) в каталоге mygrp. Чтобы поместить
дочерний процесс в данную контрольную группу, необходимо его идентификатор записать в
файл mygrp/child/cgroup.procs. В родительском процессе необходимо проделать следующие
действия:
FILE *f = fopen("mygrp/child/cgroup.procs", "w");
fwrite(str_child_pid, 1, len, f);
334СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
fclose(f);
Чтобы задать ограничения на ресурсы, для чего контрольные группы и создаются,
например, ограничить память размером 2 МБ, необходимо в файл mygrp/child/memory.max
записать указанное ограничение.
Выводы. В работе рассмотрена методика создания учебного приложения,
выполняющего функцию контейнера. Цель создания такого приложения заключается в
повышении уровня компетентности в данной предметной области учащихся, обучающихся по
направлению «Информационные системы и технологии». Рассмотренная методика входит в
раздел практических занятий дисциплины «Операционные системы».
Таким образом, на примере материала тем рабочей программы дисциплины
«Операционные системы» показана возможность сочетания знаний и формирования умений
при выполнении комплекса практических работ по специальным разделам ОС,
непосредственно связанным с построением контейнеров, с применением компонентов и
технологий инструментальных средств ОС – пространств имен и posix-возможностей. По ходу
выполнения практических работ необходимо сформулировать цель работы, установить для
себя основные параметры и компоненты выполнения задания – системные вызовы для
обеспечения выполнения дочернего процесса в изолированном от родительского процесса
пространстве имен; установить виды ресурсов, которые могут быть изолированы, – что
относится к предпроектному проектированию на этапе создания разработки. В дальнейшем
методика выполнения практического курса подводит к необходимости привлечения
дополнительных ресурсов с обучением по специальным разделам операционных систем,
внутренних механизмов реализации, что вносит компоненту модернизации на этапах
разработки нового продукта и использовать широкую линейку возможностей ОС.
Практическое освоение всего цикла разработки показывает путь построения надежных
контейнеров приложений, включаться в выявление и оперативно устранять возникающие
отклонения от запланированной функциональности своей разработки. Так выполняется
требование стандарта по сопровождению создаваемой ОС, а составление отчетов о
выполнении практических работ, выявление и фиксирование ситуаций возникающих
отклонений, соответствует этапу документирования хода разработки ОС.
Литература
1. Милл И., Сейерс Э.Х. Docker на практике / пер. с англ. Д.А. Беликов. М.: ДМК Пресс,
2020. 516 с.
2. Райс Лиз. Безопасность контейнеров. Фундаментальный подход к защите
контейнеризированных приложений. СПб.: Питер, 2021. 224 с.
3. Кетов Д.В. Внутреннее устройство Linux. 2-е изд., перераб. и доп. СПб.: БХВ-
Петербург, 2021. 400 с.
© Широков В.В., Щиголева М.А., 2024
335СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
ОБУЧЕНИЕ ПРИКЛАДНЫМ РЕШЕНИЯМ 1С
В ОРГАНИЗАЦИЯХ СПО И ВУЗАХ. ОБУЧЕНИЕ
ШКОЛЬНИКОВ 1С ПРОГРАММИРОВАНИЮ
УДК 378
Никонова Е.З.
канд. пед. наук, доцент
Бутерус М.А.
магистрант
Нижневартовский государственный университет
г. Нижневартовск, Россия
СЕРТИФИКАЦИЯ СТУДЕНТОВ В ВУЗОВСКОЙ ПОДГОТОВКЕ КАК СРЕДСТВО
ПОВЫШЕНИЯ КОНКУРЕНТОСПОСОБНОСТИ ВЫПУСКНИКОВ
Аннотация. В статье рассматриваются подходы к подготовке специалистов по работе с
программными продуктами 1С, анализируются рабочие учебные программы вузов и
учреждений СПО, соответствие их содержания квалификационным требованиям к
специалистам 1С, а также возможность сдачи студентами сертификационного экзамена 1С.
Ключевые слова: 1С:Предприятие; учебная дисциплина; сертифицированный курс 1С.
В современных политико-экономических условиях особую актуальность приобретает
вопрос подготовки IT-специалистов, в частности, специалистов по работе с системой
Причиной их высокой востребованности является лидирующая роль фирмы «1С» на
российском рынке средств автоматизации в организациях самого широкого профиля и
масштабов. Программные продукты как самой фирмы, так и её дистрибьютеров используются
для повышения эффективности производства, управления, учета и взаимоотношений с
клиентами в учреждениях различных форм собственности. Наиболее популярной разработкой
фирмы является система «1С:Предприятие», позволяющая не только использовать типовые
конфигурации, но и модифицировать их в соответствии с конкретными требованиями
заказчиков или разрабатывать собственные программные решения.
В связи с этим многие ВУЗы и учреждения СПО при разработке основных
образовательных программ IT-направлений включают в учебные планы дисциплины,
связанные с обучением различным аспектам работы с продуктами фирмы «1С» и системой
«1С:Предприятие».
Основными факторами, определяющими содержание таких дисциплин, являются,
прежде всего, актуальные возможности продуктов 1С и требования работодателей к
компетенциям сотрудников, пример которых приведен в таблице 1.
336СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Таблица 1
Примерные требования к компетенции сотрудника уровня «стажер» и “Junior”
ь
Область знаний
н
е
в Запросы и система
о Программирование в 1С Администрирование 1С
р компоновки данных
У
Программный модуль, виды Установка платформы и Источники данных
программных модулей конфигурации запросов
Выгрузка, загрузка Конструкции языка и
Переменные и константы
данных/конфигурации описание запроса
Примитивные типы данных,
Спецификации
функции преобразования Настройка поддержки
соединений таблиц
данных
Процедуры, функции. Группировка результатов
Толстый, тонкий, веб- клиенты
Передача параметров запроса
Р Операции Обновление типовой конфигурации Объединение запросов
Е Операторы и синтаксические Упорядочивание
Ж конструкции Удаление помеченных объектов результатов запроса
Функции для работы со
А
значениями типа «Строка», Условие на результат
Т
«Число», «Дата» Журнал регистрации запроса
С
Универсальные коллекции Общие сведения о
значений: массив, структура, компоновке данных
таблица значений (СКД)
Прикладные объекты:
Справочники
Прикладные объекты:
Документы
Прикладные объекты:
Регистр сведений
Переменные, константы и Обновление нетиповой
Вложенные запросы
типы данных конфигурации
Интерфейс управляемого
Выражения в языке
приложения. Отличия УФ и Установка и настройка веб-сервера
запросов
ОФ
Права доступа и RLS Установка сервера хранилища
Расчет итогов запроса
конфигураций
Особенности режимов
размещения Регистрация компонент (COM- Условия в языке
информационных баз и соединение и т.д) запросов
R запуска 1С:Предприятия
O Универсальные коллекции Способы обхода
I значений: соответствие, Ведение списка пользователей результата запроса во
N список значений встроенном языке
U Процедуры и функции
J работы: с файлами, с Блокировка установки сеансов
Работа с выборкой
информационной базой, пользователей
универсальными объектами
Прикладные объекты:
перечисления, отчеты,
регистры накопления, Тестирование и исправление
последовательности, журналы информационной базы
документов, планы видов
характеристик
Http и Web-сервисы
337СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
В таблицах 2 и 3 приведен результат анализа рабочих программ дисциплин, связанных с
программными продуктами 1С, по которым ведется преподавание в Вузах и учреждениях
СПО.
Таблица 2
Рабочие программы в учреждениях СПО
Среднее профессиональное образование (СПО)
Дисциплина Профессиональные компетенции Результат обучения
09.02.07 Информационные системы и программирование
– Выбирать способы решения задач
МДК.05.03
профессиональной деятельности Студенты научатся работать
Администрирование
применительно к различным контекстам. с информационной базой, а
информационных
– Выполнять установку и также устанавливать и
систем на
администрирование системы обновлять типовые
платформе
«1С:Предприятие» с использованием конфигурации.
1С:Предприятие
различной инфраструктуры.
– Выбирать способы решения задач
МДК.02.03 Студенты научатся решать
профессиональной деятельности
Реализация расчетные и бухгалтерские
применительно к различным контекстам.
прикладных задач задачи средствами
– Разрабатывать и модифицировать
на платформе платформы 1С:Предприятие
прикладные решения на технологической
1С:Предприятие 8.
платформе 1С:Предприятие.
– Выбирать способы решения задач Студенты изучат
ОП.13 Основы профессиональной деятельности встроенный язык
конфигурирования применительно к различным контекстам. 1С:Предприятие 8, а также
и на платформе – Разрабатывать интерфейс прикладных научатся создавать
1С:Предприятие решений на платформе 1С:Предприятие. различные объекты
конфигурации.
– Выбирать способы решения задач Студенты изучат основы
МДК 01.04
профессиональной деятельности работы с файлами TXT,
Технологии
применительно к различным контекстам. HTML, DBF, технологии
интеграции
– Производить инспектирование компонент OLE и COM, а также
прикладных
программного обеспечения на предмет научатся настраивать и
решений на
соответствия стандартам и методикам использовать планы обмена
платформе
разработки конфигураций для платформы в распределенной базе
1С:Предприятие 8
1С:Предприятие. данных.
– Выбирать способы решения задач Студенты научатся
профессиональной деятельности создавать и редактировать
ПМ.01 Разработка применительно к различным контекстам. программные модули
приложений на – Разрабатывать и модифицировать прикладного решения на
платформе 1С прикладные решения на технологической платформе 1С:Предприятие
Предприятие платформе 1С:Предприятие. 8, разрабатывать
пользовательский
интерфейс.
338СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Таблица 3
Рабочие программы в учреждениях ВО
Высшее образование (ВО)
Дисциплина Профессиональные компетенции Результат обучения
09.03.01 Информатика и вычислительная техника
– Способность выполнять работы по Студенты овладеют навыками
созданию, модификации и сопровождению использования средств
Конфигурирование
информационных систем, на платформе 1С: типовой информационной
1С:Предприятие 8
Предприятие 8. системы для создания
специальных конфигураций.
Администрирование – Выполнять установку и настройку Студенты научатся работать с
и конфигурирование платформы 1С:Предприятие. конфигурацией и
системы – Осуществлять информационную защиту использовать инструменты
1С:Предприятие прикладных решений. конфигурирования.
09.03.02 Информационные системы и технологии
– Способность применять современные Студенты научатся
методы и инструментальные средства использовать современные
прикладной информатики для решения задач методы и средства
Программирование в
цифровой экономики. прикладной информатики для
среде 1С
автоматизации решения задач
различных классов и создания
ИС.
– Способность выполнять разработку и У студентов сформируются
Отраслевые решения
интеграцию программных модулей, знания по базовым приемам и
на платформе
осуществлять оценку качества правилам администрирования
1С:Предприятие
разрабатываемого программного обеспечения. 1С.
09.03.03 Прикладная информатика
– Способность проводить обследование Студенты узнают об областях
организаций, выявлять информационные применения 1С:Предприятие,
1С:Предприятие для потребности пользователей, формировать изучат методы разработки
программистов и требования к информационной системе. прикладных систем, а также
системных – Способность настраивать, эксплуатировать научатся использовать
администраторов и сопровождать информационные системы и средства 1С:Предприятия при
сервисы. сопровождении
информационных систем.
– Способность выбирать типовые Студенты изучат встроенный
конфигурации на базе платформы 1С: объектно-ориентированный
Разработка обильных Предприятие в соответствии с требованиями язык программирования
приложений на бизнеса. системы, а также научатся
платформе – Способность выполнять работы по разрабатывать
1С:Предприятие созданию, внедрению, сопровождению и пользовательский интерфейс
модификации информационных систем в прикладных решений.
прикладных областях.
– Способность разрабатывать и адаптировать Студенты овладеют навыками
прикладное ПО. практического использования
Разработка
– Способность осуществлять ведение базы встроенного языка
приложений на
данных и поддержку информационного программирования 1С, а
платформе
обеспечения решения прикладных задач. также проектирования
1С:Предприятие
информационных структур
1С: Предприятие.
Из проведенного анализа следует, что содержание дисциплин и компетенции обучаемых
в основном совпадают с требованиями к компетенциям сотрудников уровней «стажер» и
отчасти уровня “Junior”, что является достаточным основанием для получения студентами
339СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
сертификата «1С:Профессионал». Наличие такого сертификата у выпускника существенно
повышает его конкурентоспособность на рынке специалистов и шансы на трудоустройство.
По рекомендациям фирмы «1С» для этого необходимо освоить такие
сертифицированные курсы как «Азы программирования в системе «1С:Предприятие 8.3» и
«Введение в конфигурирование в системе «1C:Предприятие 8.3». Основные объекты» [1].
Но наличие в учебных планах вуза подобных дисциплин еще не решает проблему
организации сертификационной подготовки студентов в рамках вузовского обучения. Для
этого необходимо:
1. мотивировать студентов на изучение части сертификационных материалов в рамках
самостоятельной работы и сдачу дополнительного сертификационного экзамена;
2. согласовать содержание учебных дисциплин с вопросами, входящими в
сертификационный экзамен;
3. обеспечить требуемый уровень компетентности преподавательского состава.
Фирма «1С» предлагает свой подход к решению обозначенной проблемы – программу
по встраиванию в основные образовательные программы сертифицированных курсов 1С с
возможностью использования учебно-методических материалов, переподготовки
педагогических кадров, подготовки студентов к сдаче сертификата «1С:Профессионал».
В Нижневартовском государственном университете на факультете информационных
технологий и математики накоплен достаточно большой опыт по преподаванию 1С-
ориентированных дисциплин, написанию курсовых и дипломных работ с использованием
технологической платформы «1С:Предприятие 8.3», которые направлены на разработки
собственных приложений. Многие выпускники стали успешными и востребованными
специалистами в фирмах, сопровождающих и внедряющих продукты 1С. Все это дает
основание перейти на новый уровень подготовки студентов, их сертификации, более тесное
сотрудничество с фирмами-партнерами «1С», а также распространению опыта на другие
факультеты университета.
Литература
1. «1С:Профессионал» – сертификация пользователей ПП 1С:Предприятие.
https://clck.ru/39iY7e
© Никонова Е.З., Бутерус М.А., 2024
340СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.62
Никонова Е.З.
канд. пед. наук, доцент
Нижневартовский государственный университет
г. Нижневартовск, Россия
ДАННЫЕ В СИСТЕМЕ 1С:ПРЕДПРИЯТИЕ 8.3
Аннотация. В статье рассматриваются различные аспекты данных в системе
1С:Предприятие: моделирование предметной области с помощью прикладных объектов и
разработка приложения по принципу Metadata Driven. В качестве следующих аспектов
выделяются подходы к управлению данными, принятые в системе, и схемы преобразования
данных для разных режимов работы.
Ключевые слова: 1С:Предприятие; технологическая платформа; Metadata Driven;
прикладные объекты; таблицы баз данных; встроенный язык; объектная модель; табличная
модель, кэширование.
Отличительной чертой приложений, относящихся к классу экономического
программного обеспечения, является главенствующая роль данных, обусловленная не только
тем, что именно работа с данными является основной функцией приложения. Данные, кроме
этого, служат основой для моделирования предметной области, выделения сущностей, их
свойств и взаимосвязей. Конечно, бизнес-процессы также находят отражение в
разрабатываемой модели, но умение выделить именно те данные, которые необходимы для
решения поставленных задач, во многом определяет успешность разработки приложения в
целом. При этом под данными следует понимать не только экономическую информацию, но и
данные, определяющие бизнес-процессы.
К наиболее распространенным моделям работы с данными можно отнести следующие:
 реляционная модель, согласно которой данные хранятся в виде взаимосвязанных
между собой таблиц;
 объектно-ориентированная модель, позволяющая представить сущности в виде
объектов с присущими им свойствами и методами;
 модели для работы со слабоструктурированными или неструктурированными
данными.
Разработчики 1С:Предприятия пошли по пути модифицированного объектного подхода,
который условно можно назвать «моделью типов прикладных объектов». Согласно этой
модели, платформа предлагает разработчику ограниченный набор типов прикладных
объектов, отражающих ту или иную категорию сущностей. Выбор определенных типов при
этом будет определять не только модель данных, но и частично модель приложения в целом.
Проводя аналогию с парадигмой объектно-ориентированного программирования,
прикладной тип можно рассматривать как абстрактный класс с присущими ему свойствами,
методами и событиями.
Несмотря на то, что данные в информационной базе хранятся в виде традиционных
таблиц, именно использование типов прикладных объектов дает разработчику существенные
341СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
преимущества: для каждого экземпляра прикладного объекта платформа, зная его тип,
предоставляет множество механизмов и функций для работы с этим экземпляром.
Достигается это за счет определения на уровне платформы семантики объектов
прикладных типов, которая уточняется в модели метаданных описанием свойств каждого
конкретного экземпляра объекта [2].
К механизмам платформы по работе с объектами относятся такие возможности, как:
 автоматическое создание физической структуры для хранения данных и ее
модификация при изменении модели метаданных;
 типовые процедуры обработки данных для каждого типа объектов (для документов –
автонумерация, расчет итогов для регистров и т. п.);
 актуализация тех прав работы с объектом, которые обусловлены именно его типом;
 автоматическое создание форм объекта с включением в интерфейс команд для
доступа к объекту и работы с ним;
 механизмы асинхронного обмена данными как с узлами распределенной базы 1С, так
и со сторонними информационными системами и т. д. [1].
Немаловажным моментом является также реализация платформой неких универсальных
механизмов бизнес-логики, свойственных сущностям предметной области. Например, можно
обеспечить сквозную нумерацию для разных видов документов, разбиение содержимого
справочника с помощью иерархии на различные группы и т. д.
Кроме того, платформа по типам прикладных объектов определяет не только семантику
моделируемых сущностей, но и смысловое содержание связей между ними. Так, например,
установленная связь между регистром и его документом-регистратором обеспечивает на
уровне платформы зависимость между существованием документа и сделанных им записей в
регистре.
Для детального уточнения структуры объектов, их связей, поведения и визуального
представления используются метаданные, описание которых в основном сводится к
визуальному проектированию. Программирование, как правило, требуется при решении задач,
выполняющихся по каким-либо алгоритмам, например, расчёта себестоимости, проверки
введения данных и т. п.
Преимущество использования метаданных не ограничено только этапом разработки.
При необходимости модификации приложения разработчику не требуется непосредственно
менять структуры физических баз данных, достаточно визуальным конструированием
добавить новые реквизиты или изменить уже существующие и все изменения будут
автоматически отражены в таблицах баз данных.
Таким образом, проектирование бизнес-приложения на начальном этапе представляет
собой конструирование из уже вполне «работоспособных» элементов с четко определенной
функциональностью, возможностью визуализации и заданной семантикой взаимосвязей. (см.
рис. 1). Подобный подход к разработке приложений (Metadata Driven) является на
сегодняшний день одним из самых перспективных.
342СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 1. Идеология Metadata Driven в разработке приложения в 1С:Предприятие
Следующим аспектом данных являются способы их представления. В системе
1С:Предприятие в зависимости от цели и режима экономическая информация может быть
представлена в следующих формах:
1. объекты в базе данных;
2. объекты языка программирования;
3. элемент в формате XML.
Данные хранятся в таблицах базы данных, для их изменения требуется предварительно
преобразовать их в объекты встроенного языка, для обмена с другими БД данные
представляются в формате XML (рис. 2).
Рис. 2. Схема преобразования данных
Следует отметить некоторые особенности модели данных, принятые в системе
1С:Предприятие:
 Поля объектов баз данных, переменные встроенного языка программирования и
элементы интерфейса описываются общей системой типов, что значительно упрощает
разработку приложений.
 Для одного поля можно определить несколько возможных типов данных, и
примитивных, и ссылочных, что позволяет, пользователю, например, в документе указать
либо юридическое лицо из справочника организаций, либо физическое лицо из справочника
частных лиц.
343СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
 Идеология создания прикладных решений в 1С:Предприятии предполагает, что все
файлы, имеющие отношение к данному прикладному решению, должны храниться в самой
базе данных. Для этого для полей баз данных введен специальный тип ХранилищеЗначения, а
встроенный язык содержит одноименный объект, позволяющий преобразовывать значения
других типов к специальному формату Хранилища значений. Таким образом, в базе данных
могут храниться значения, для которых нет соответствующего типа, например, текстовые
документы, графические изображения и т. п.
Немаловажным аспектом данных в 1С:Предприятии являются способы
манипулирования ими, обеспечивающие приемлемую производительность системы и
возможность обработки все возрастающих объемов данных (рис. 3).
Рис. 3 Доступ к базе данных
Для удовлетворения таких достаточно противоречивых требований к управлению
данными в системе 1С:Предприятие используется свой особый подход, суть которого
заключается в следующем:
1. Разработчик не может напрямую обратиться к записям базы данных, посредником в
таком обращении служит платформа.
2. Для работы с данными разработчик может использовать объекты встроенного языка
или язык запросов.
3. Все операции по структурированию данных, их обработке и выполнению запросов
платформа транслирует либо в команды СУБД в клиент-серверном режиме работы, либо в
команды собственной базы данных в файловом режиме.
Таким образом, в 1С:Предприятие поддерживаются две модели доступа к данным:
 Для создания, модификации и удаления данных служит объектная модель, согласно
которой доступ к данным осуществляется не на уровне отдельных записей таблицы, а на
уровне объекта целиком. Например, для изменения объекта базы данных (элемента
справочника, документа) нужно получить этот объект с помощью метода ПолучитьОбъект(),
внести необходимые изменения и сохранить. При этом объект загружается в память вместе со
344СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
всеми своими подчиненными объектами, обращаться к которым можно методами встроенного
языка как как к коллекциям записей (рис. 4).
Рис. 4 Объектная модель работы с данными
Согласно данной модели, каждый объект в составе своих полей имеет уникальную
ссылку, с помощью которой он может быть однозначно идентифицирован. Данная ссылка,
кроме того, может использоваться как значение поля другого объекта, например, ссылка
на объект справочника Номенклатура может быть использована как значение
соответствующего реквизита документа Заказ [3].
Кроме того, для повышения производительности объектная модель позволяет
кэшировать данные при их считывании из базы данных. Считанный данные сохраняются в
кэше не более 20 минут, при этом через каждые 20 секунд при очередном обращении
выполняется проверка, изменялся ли объект в БД, и, при необходимости, выполняется
обновление данных в кэше.
К особенностям объектной модели относится также сохранение целостности объектов
с помощью механизмов блокировки. Оптимистическая блокировка гарантирует, что объект не
может быть записан, если он был изменен в базе данных после считывания, т.е. изменения,
сделанные одним пользователем, не «затрут» изменений, сделанных другим пользователем в
этой же сессии. Механизм пессимистической блокировки позволяет запретить изменения
объекта с помощью специального метода Заблокировать().
Основное назначение этого метода – блокировка объектов, редактируемых в форме.
Например, расширение формы элемента справочника автоматически включает блокировку,
чтобы пользователь был уверен что, начав редактировать объект, он сможет его записать.
Помимо указанных особенностей, объектная модель позволяет использовать
обработчиков событий для осуществления проверок корректности изменения данных.
 Табличная модель используется для чтения данных из объектов какого-либо класса,
представленных связанными таблицами, с помощью SQL подобного языка запросов.
Преимуществом такого подхода является возможность обращения сразу к нескольким
таблицам для получения подробных аналитических отчетов. (рис. 5) Но так как при таком
способе могут быть выбраны не все, а только требуемые реквизиты объекта, изменение
объекта не допускается.
345СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 5. Табличная модель доступа к данным
И наконец, еще один аспект работы с данными обеспечивается механизмами обмена
данными, предназначенными для организации обмена данными между различными базами
данных в распределенных информационных системах, а также внешними базами данных и
программными системами [4].
К универсальным механизмам обмена данными относятся:
 средства чтения и записи документов XML, представленные такими объектами как
ЧтениеXML, ЗаписьXML и ПреобразованиеXSL;
 XML-сериализация, согласно которой каждому из типов данных системы
1С:Предприятие, значения которых могут быть представлены в XML, ставится в соответствие
тип данных XML, характеризующийся именем типа и пространством имен, к которому
относится тип [5];
 планы обмена с элементами в виде узлов, соответствующих участникам обмена
данными по данному плану обмена. Один из узлов соответствует данной информационной
базе, а остальные – другим участникам, с которыми данная информационная база может
обмениваться данными.
Литература
1. Катеринина С.Ю. Корпоративные информационные системы. Работа на платформе
«1С: Предприятие 8.3». М.: Волгоградский гос-ый технический ун-т, 2018. 149 с.
2. Никонова Е.З. Методология моделирования предметной области средствами
1С:Предприятие // Наука Красноярья. 2017. Т. 6. №1-2. С. 241-244.
3. Радченко М.Г., Хрусталева Е.Ю. 1С: Предприятие 8.3. Практическое пособие
разработчика. Примеры и типовые приёмы. М.: ООО «1С-Паблишинг», 2013. 965 с.
4. Хрусталева Е.Ю. Технологии интеграции «1С:Предприятия 8.3». М.: ООО
«1СПаблишинг», 2020. 503 с.
5. Руководство разработчика Платформа «1С: Предприятие 8.3.17». Глава 15.
«Механизмы обмена данными». https://clck.ru/39iZgr
© Никонова Е.З., 2024
346СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 004.4
Тагиров К.М.
аспирант, ассистент
Тагиров Т.М.
аспирант, преподаватель
Нижневартовский государственный университет,
Нижневартовский строительный колледж
г. Нижневартовск, Россия
ПРИЛОЖЕНИЕ «МОЙ ОРГАНАЙЗЕР»
С ЦЕЛЬЮ ИЗУЧЕНИЯ 1С:ПРЕДПРИЯТИЯ СТУДЕНТАМИ СПО
Аннотация. В статье описывается приложение «Мой органайзер», которое представляет
собой инновационное приложение, спроектированное с использованием платформы 1С:
Предприятия. Обладая интуитивно понятным интерфейсом, приложение обеспечивает
пользователю удобство в организации повседневной жизни и эффективной реализации задач.
В качестве автономного инструмента для планирования и управления делами, «Мой
Органайзер» является ключевым элементом современного образа жизни. Это приложение
было разработано в контексте изучения функционала 1С:Предприятия на основе современных
стандартов программного обеспечения.
Ключевые слова: Платформа 1С:Предприятие; обучение студентов СПО; разработка
приложений на платформе 1С: Предприятие.
Актуальность рассматриваемой темы основывается тем, что 1С является ведущей
платформой для автоматизации бизнес-процессов и управления предприятиями [2].
Платформа имеет широкое распространение в организациях систем профессионального
образования (СПО) и вузах, где она используется в учебных целях, подчеркивает важность
изучения и развития этой платформы в контексте современных тенденций в информационных
технологиях.
Приобретение навыков работы с прикладными решениями 1С является ключевым
элементом обучения студентов, обеспечивая им востребованные компетенции на рынке труда.
Студенты, освоившие 1С, легко могут адаптировать полученные знания и навыки к различным
проектам, что существенно повышает их конкурентоспособность при поиске работы.
Разработка приложений на платформе 1С предоставляет студентам уникальную
возможность развивать свои творческие и инженерные способности [1]. Этот процесс
способствует формированию креативного и аналитического мышления, а также развитию
навыков работы в команде. Эти аспекты играют ключевую роль в формировании карьерных
компетенций студентов и могут оказать значительное влияние на их будущий успех.
Обучения прикладным решениям 1С и разработке приложений для студентов и
акцентирует внимание на важности данных тем в образовательных учреждениях.
Управление событиями и встречами в организации представляет собой вызов для
студентов, участвующих в разнообразных мероприятиях, клубах, кружках и группах.
Приложение «Мой органайзер» облегчает этот процесс, предоставляя возможность добавлять
события и встречи, а также подробно описывать информацию о созданных контактах. В итоге,
приложение «Мой органайзер» становится надежным помощником для студентов в
347СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
систематизации своей жизни, эффективном управлении временем и задачами, а также
поддержании высокой работоспособности и организованности в учебной среде. Этот
инструмент содействует достижению успеха и эффективному управлению жизнью студентов.
Основной целью приложения: «Мой органайзер» является обеспечение эффективного
управления рабочими днями, встречами, напоминаниями и другими деловыми и личными
событиями.
Для создания программы было выбрано 1С:Предприятия, потому что, это универсальная
платформа для разработки и автоматизации бизнес-процессов [3; 4]. Выбор 1С: Предприятия
для создания приложения «Мой органайзер» обоснован следующими причинами:
1. Масштабность: «1С: Предприятие» позволяет создавать приложения любого уровня
сложности, начиная от простых документооборотов и заканчивая крутыми системными
управлением предприятием. Она подходит как для малых и средних компаний, как и для
крупных корпораций.
2. Гибкость: платформа позволяет разрабатывать с учетом потребностей и специфики
каждой отдельной компании. Её конфигурируемость позволяет настраивать функционал и
интерфейсы под требования бизнес-процессов и потребностей пользователя.
3. Интеграция: «1С:Предприятия» позволяет интегрироваться с другими системами и
сервисами, такими как ERR, CRM, банковскими платформами и др. Это позволяет создать
полноценную систему, объединяющую все необходимые бизнес-процессы и данных в одном
приложении.
4. Безопасность: платформа обеспечивает высокий уровень защиты данных, доступа и
аутентификации пользователей. Это особенно важно для приложений, который содержат
конфиденциальные или чувствительные данные.
5. Поддержка: «1С:Предприятия» обладает широкой и профессиональной поддержкой
со стороны компании-разработчика. Это значит, что при возникновении проблем или
необходимости в дополнительных функциях всегда можно обратиться за помощью и
решением [5; 6].
В целом, выбор «1С: Предприятия» для создания приложения «Мой органайзер»
обеспечивает надежность, гибкость и функциональность необходимую для эффективной
автоматизации бизнес-процессов.
Приложение «Мой органайзер» собирает все ваши контакты, расписание и задачи в
одном месте.
В современном мире, где каждый занят различными делами и обязанностями, важно
иметь эффективный инструмент, который поможет организовать жизнь индивидуального
человека. Именно поэтому заданием для студентов Нижневартовского строительного
колледжа было разработать приложение «Мой органайзер», который будет выполнять
функции персонального помощника, объединяет контакты, расписание и задачи пользователя,
в одном месте.
348СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Основные возможности приложения, методы и функции:
1. Открыть контакты. В приложении «Мой органайзер» данный метод позволяет
создавать контакты вручную и хранить всю необходимую информацию о людях, с которыми
взаимодействует пользователь. Так можно быстро находить нужные контакты, просматривать
его данные и управлять информацией, см. рисунок 1 Контакты.
Рис. 1. Контакты
2. Открыть расписание. В приложении можно создавать просматривать и редактировать
планы на день, неделю или месяц. Теперь время пользователя будет организовано и
структурировано.
3. Открыть задачи событий. В «Моем органайзере» пользователь может создавать
задачи и события, указывать дату, время и даже цвет, чтобы легче ориентироваться в своём
списке дел. Смотрите рисунки 2 и 3.
Рис. 2. Задачи событий
349СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 3. Форма заполнения
 Удобный интерфейс для всех устройств. Приложение «Мой органайзере» доступно,
как для персонального компьютера, так и для мобильного устройства на операционной
системе Android. Независимо от того где находиться пользователь, у него всегда будет доступ
к контактам, расписанию и задачам.
 Рабочий стол с двумя кнопками. На рабочем столе приложение «Мой органайзер»
представлены две основные кнопки – «Открыть контакты» и «Открыть расписание». Это
удобное и интуитивно понятное решение, которое позволяет быстро переходить к нужному
разделу приложения (рис. 4).
Рис. 4. Рабочий стол
350СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. 5. Код к кнопкам
В заключении хотелось бы отметить важность обучения прикладным решениям 1С и
применения этих знаний в реальных проектах, таких как «Мой органайзер». Приложение
«Мой органайзер», разработанное студентами строительного колледжа с целью обучения,
предоставляет пользователю удобный и интуитивно понятный интерфейс, который позволяет
организовать его повседневную жизнь и помочь справиться с задачами. Оно является
незаменимым инструментом для планирования и управления делами в современном мире, и
показало высокий результат в обучении студентов с работой на платформе 1С:Предприятие.
Данная разработка подчеркивает практическую значимость обучения и реализации
прикладных решений в учебной среде.
Литература
1. 1С: Предприятие 8.2. Версия для обучения программированию (комплект из 4 книг +
2 CD-ROM). М.: 1С, 2013. 453 c.
2. Бартеньев О.В. 1С: Предприятие: программирование для всех. М.: Диалог-Мифи, 2019.
464 c.
3. Девис Т., Шрайнер Д., Нейдер Дж. OpenGL. Руководство по программированию. М.:
СПб: Питер, 624 c.
4. Кашаев С.М. 1С: Предприятие 8.2. Программирование и визуальная разработка на
примерах (+ CD-ROM). М.: БХВ-Петербург, 2021. 320 c.
5. Кашаев С. 1С: Предприятие 8.3. Программирование и визуальная разработка на
примерах. М.: БХВ-Петербург, 2019. 336 c.
6. Постовалов С., Постовалова А. 1С: Предприятие 7.7. Уроки программирования. М.:
СПб: BHV, 2018. 320 c.
© Тагиров К.М., Тагиров Т.М., 2024
351СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
ОБУЧЕНИЕ ШКОЛЬНИКОВ ПРОГРАММИРОВАНИЮ В СОШ
И УЧРЕЖДЕНИЯХ ДОПОЛНИТЕЛЬНОГО ОБРАЗОВАНИЯ
УДК 372.862+004.438
Захарова Ю.В.
канд. физ.-мат. наук, доцент
Асаевич Н.С.
студент, преподаватель профориентационной школы
Безденежных С.Ю.
студент, ассистент профориентационной школы
Омский государственный университет им. Ф.М. Достоевского
г. Омск, Россия
ОБУЧЕНИЕ ДЕТЕЙ СРЕДНЕЙ ШКОЛЫ РАЗРАБОТКЕ ИГР
НА C# В РАМКАХ ФАКУЛЬТАТИВНЫХ ЗАНЯТИЙ ПО ИНФОРМАТИКЕ
Аннотация. В работе рассматривается проблематика преподавания программирования
в рамках курса по разработке игр. Проводится анализ существующих онлайн ресурсов и
предлагается курс на базе языка программирования C# и игрового движка Unity. Описываются
преимущества курса, тематическое планирование и формируются методические
рекомендации.
Ключевые слова: программирование; разработка игр; навыки; методика.
В современном мире программирование становится все более важным и
привлекательным навыком [3; 5-7]. Оно не только позволяет разрабатывать программы и
приложения, но и способствует развитию логического мышления, аналитических навыков и
креативности. Одним из увлекательных способов изучения программирования является
разработка компьютерных игр. Создание собственных игр с использованием языка
программирования C# и игрового движка Unity предоставляет уникальную возможность
объединить теоретические знания и практические навыки в одном процессе.
Игры являются идеальным объектом исследования в контексте программирования,
поскольку они требуют от разработчиков управления графикой, физикой, искусственным
интеллектом, анимацией и многими другими аспектами. Этот процесс позволяет школьникам,
студентам и начинающим разработчикам не только углубиться в изучение языка
программирования C#, но и освоить ключевые концепции разработки программных
продуктов, такие как объектно-ориентированное программирование, управление ресурсами,
распределение задач и этапов.
В данной статье мы рассмотрим методику обучения программированию с
использованием разработки компьютерных игр на языке C# и популярном игровом движке
Unity. Будут проанализированы преимущества предлагаемого подхода относительно других,
проведена оценка его эффективности. В данном курсе мы постарались сделать акцент на
необходимых базовых знаниях программирования, работы с графикой и дополнили это все
работой с движком Unity. В результате учащиеся будут иметь необходимые фундаментальные
352СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
навыки для дальнейшего продвижения в сфере программирования. Более того, студенты и
начинающие программисты смогут не только усвоить основные принципы
программирования, но и попробовать себя в одной из областей на практике, а также уже знать
базовые алгоритмы и работу с графикой с помощью WinForms.
Анализ онлайн курсов. При разработке материалов для занятий был изначально взят за
основу онлайн курс от GeekBrains (https://gb.ru/) по разработке игр на Unity и другие известные
курсы, например, Хабр (https://clck.ru/39vxp7), Dzen (https://clck.ru/39vxqD), Unity
(https://clck.ru/39vxqv). Основными проблемами являлись неполнота материала и краткое
описание важных ключевых аспектов. Поэтому было решено выбрать отдельные разделы
курса, изучить их в полной мере и доработать на основе литературы [2-4; 6; 7]. Что касается
бесплатных курсов по Unity, то они проблематичны в поиске, а если и есть, то по мнению
авторов являются либо слишком сложными, либо легкими и очень базовыми для изучения.
Однако необходимо отметить, что на портале YouTube есть серия хороших видеолекций по
работе с Unity, но они требуют от учеников высокого уровня самостоятельности и
эрудированности, поэтому могут использоваться только как вспомогательный инструмент
(см., например, [1]). Приведем список основных аспектов в контексте платных курсов от
разных компаний:
1. Высокая стоимость. Курсы от компаний могут быть дорогими и не каждый может
позволить себе оплатить их.
2. Фундаментальные знания. Курсы, предлагаемые компаниями по разработке игр, могут
сосредотачиваться исключительно на конкретных инструментах и технологиях без изучения
(повторения) важных базовых принципов.
3. Редкое обновление. В игровой индустрии технологии и методы постоянно меняются.
Курсы, созданные компаниями, могут устаревать быстрее, чем курсы от учебных учреждений
обновляемые ежегодно.
4. Слабое разнообразие. Курсы могут быть ориентированы на конкретные жанры игр или
платформы, что может ограничивать возможности в будущей карьере.
5. Ограниченная сеть связей. Участие только в курсах от компании может ограничить
возможность построить профессиональные связи внутри индустрии, поскольку они обычно
ограничиваются учащимися этой компании.
6. Конфликт интересов. Курсы от компании могут быть ориентированы на продвижение
их собственных продуктов или технологий, что может создавать конфликт интересов в
учебном процессе.
Описание курса. Первое, над чем стоит задуматься в начале обучения – уделить время
на изучение используемого языка программирования C# и введению в основы
программирования, такие как: изучение базовых принципов программирования, алгоритмов и
знакомство с объектно ориентированным программированием, после чего переходить к
изучению движка и его использованию вместе с языком. Это необходимо для написания
скриптов в игровых элементах, поэтому, чтобы не перескакивать из одной части учебной
программы на другую, самым сложным стоит заняться в начале.
353СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
После изучения основ языка реализуется переход к работе с графикой и написания
простых Desktop игр на WinForms Application. Это позволяет детям лучше понимать работу
кода и графики в написании игр. При работе с движком это сильно упрощает работу детей. В
завершающей части обучения идет изучение движка Unity, где дети обучаются работе с
графикой и физикой 2D уровня и написанию скриптов на языке C#. Для игр на Unity
рекомендуется использовать готовые графические макеты игр на площадке приобретения
игровых ресурсов – Unity Asset Store [4; 6].
Курс рассчитан на 72 академических часа, 30 из которых отводятся на изучение Unity
(предполагается, что учащиеся ранее уже проходили хотя бы один курс по
программированию). Занятия проводятся в формате лабораторных работ с теоретической
частью, чтобы дети от преподавателя могли узнать то, чем им предстоит пользоваться. Также
предусмотрены несколько крупных лабораторных работ, на которых дети разрабатывают
конкретные игры по согласованию с преподавателем. Это позволяет им закрепить пройденный
материал и получить важные навыки написания игр. Опишем тематический план:
Основы программирования (6 часов). Введение в среду разработки Visual Studio.
Создание консольного приложения. Ввод и вывод в консоль. Комментарии. Работа с памятью.
Базовые типы данных и литералы. Приведение типов. Хранение чисел в памяти компьютера.
Единицы измерения информации. Основные операторы.
Управляющие конструкции (6 часов). Виды условных операторов и правила их
использования. Логические операторы. Операторы сравнения. Побитовые операторы.
Особенности работы с операторами for, while и do-while. Вложенные операторы условия и
цикла. Задачи различного уровня сложности.
Массивы (6 часов). Назначение, обработка и использование массивов (одномерных и
двумерных). Специализированные операторы для обработки массивов. Символьные массивы.
Присваивание и сравнение массивов. Практические задачи по вводу, модификации и выводу
массивов.
Работа с текстом (6 часов). Правила работы со строками и символами. Методы для
работы со строками. Ввод данных пользователем, обработка и вывод информации.
Классы и объекты (6 часов). Знакомство с ООП. Классы и объекты. Инкапсуляция.
Создание классов и объектов. Статические элементы. Доступ к членам класса. Внутренние
классы. Знакомство c WindowsForms Applications.
Методы и конструкторы (6 часов). Конструкторы. Объект как аргумент и результат
метода. Способы передачи аргументов. Задачи различного уровня сложности.
Директории и основные принципы командного программирования (6 часов). Создание
пакетов, принципы их применения и предназначение. Интерфейсы и их отличие от классов.
Интерфейсные ссылки. Расширение интерфейсов.
Введение в Unity (9 часов). Основной интерфейс. Создание 2D уровня. Знакомство с Unity
Asset Store. Создание игрового мира.
Создание архитектуры игры (9 часов). Работа над 2D физикой. Анимации. Написание
скриптов на C#. Префабы. Создание основного персонажа.
354СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Проект (12 часов). Составление плана разработки игры. Создание первой версии игры.
Внесение индивидуальных изменений в игру. Тестирование игрового процесса. Поиск и
обработка «багов» игры.
Проектная часть курса рассчитана для 2D игры, так как сам Unity очень прост с точки
зрения интерфейса и на нем только с накладыванием уровня можно делать основной макет
(см. рис. 1). Содержание курса может меняться в части количества аудиторных часов,
отведенных на ту или иную тему.
Преимущества системы обучения. Данная система обучения имеет ряд
положительных качеств, такие как:
1. Последовательность – курс имеет четкий продуманный ход обучения, благодаря
которому дети сталкиваются с самыми большими трудностями в начале обучения, после чего
им легче работать с реальными движками и графикой
2. Адаптивность – курс рассчитан на 72 академических часа, но можно изменять
количество часов на усмотрение преподавателей в зависимости от уровня детей, поступивших
на курс.
3. Не требует дополнительных навыков – благодаря таким площадкам, как Unity Asset
Store детям не нужно заниматься отдельно дизайном игр и созданию музыкальных решений.
Это позволяет настроиться конкретно на работу с самими играми.
4. Простота – подобранные движок и язык программирования просты в освоении,
благодаря чему, если на курс даже поступают дети без опыта, то изучение будет менее
сложным, чем с некоторыми другими языками (C++, C и др.).
5. Проекты – написанный на Unity или winForms проект может оказаться хорошим
дополнением к портфолио детей, для возможного их дальнейшего трудоустройства.
6. Хорошая база по навыкам программирования – в дальнейшем, если учащийся поймет,
что разработка игр не его, он с меньшими усилиями сможет перейти на другой язык и другую
отрасль программирования.
7. Применение на практике – ученики не просто изучают теорию, но и знают к ней
применение на конкретных задачах, например, как написание калькулятора и других
стандартных программ помимо написания игр.
8. Практические навыки, нужные каждому программисту:
– создание абстрактных моделей для решения поставленных задач;
– развитие логического мышления;
– поиск информации из других источников, её анализ и обработка для дальнейшего
применения.
355СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Рис. Пример макета для 2D игры
Основные концепции курса.
1. Мотивация. Создание собственных игр является мощным источником мотивации для
школьников, студентов и начинающих программистов. Это позволяет им видеть результаты
своего труда в виде интерактивных приложений.
2. Практический опыт. Работа над проектами игровой индустрии обогащает
обучающихся практическим опытом в области разработки программного обеспечения.
3. Комплексный подход. Создание игр требует интеграции знаний о программировании,
математике, физике, графике и звуке, что способствует развитию многогранных навыков.
4. Поддержка сообщества. Unity имеет активное сообщество разработчиков и
обширную документацию, что облегчает процесс обучения и решение проблем.
5. Поле для исследований. Игровая индустрия постоянно развивается, предоставляя
множество возможностей для исследования новых методов и технологий.
В заключении важно отметить, что изучение программирования через разработку игр на
C# и Unity открывает перед школьниками, студентами и начинающими разработчиками не
только двери в мир программирования, но и дает возможность внести свой вклад в развитие
игровой индустрии. Этот метод обучения демонстрирует свою эффективность, а также
способствует формированию креативных и технических навыков, необходимых для успешной
карьеры в области информационных технологий. Мы надеемся, что данное исследование
позволит стимулировать дальнейшие исследования и инновации в области образования и
разработки компьютерных игр.
Изучение программирования с использованием написания игр на языке C# и игровом
движке Unity представляет собой увлекательный и эффективный метод обучения, который
сочетает в себе теоретические знания и практические навыки. В ходе нашего исследования мы
убедились в том, что этот подход способствует глубокому пониманию концепций
356СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
программирования, а также развитию креативности и способностей к решению сложных
задач.
Литература
1. Булкани Б., Сетиаван М.А., Вахида В. Модель оценки расхождений при
осуществлении онлайн-обучения (на основе восприятия родителей) // Образование и наука.
2022. Т. 24. №2. С. 116-137. https://doi.org/10.17853/1994-5639-2022-2-116-137
2. Васильев А.Н. Программирование на C# для начинающих. М.: Бомбора, 2023. 592 с.
3. Гербут С.С. Пропедевтика программирования: как подготовить учащихся к
восприятию объектно-ориентированного программирования // Информатика в школе. 2022.
№6. С. 30-36. https://doi.org/10.32517/2221-1993-2022-21-6-30-36
4. Клири С. Конкурентность в С#. Асинхронное, параллельное программирование. СПб.:
Питер, 2020. 272 с.
5. Привалов А.Н., Богатырева Ю.И., Романов В.А. Инжиниринговый центр как
инновационный компонент профессиональной подготовки бакалавров IT-направлений //
Образование и наука. 2019. Т. 21. №7. С. 90-112. https://doi.org/10.17853/1994-5639-2019-7-90-
112
6. Фероне Х. Изучаем C# через разработку игр на Unity. 5-е издание. СПб.: Питер, 2022.
400 с.
7. Шамсутдинова Т.М. Развитие навыков визуализации и визуальной аналитики в курсе
информатики // Информатика и образование. 2023. Т. 38. №3. С. 16-23.
https://doi.org/10.32517/0234-0453-2023-38-3-16-23
© Захарова Ю.В., Асаевич Н.С., Безденежных С.Ю., 2024
357СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 372.862+004.438
Захарова Ю.В.
канд. физ.-мат. наук, доцент
Ушакова Е.В.
старший преподаватель
Омский государственный университет им. Ф.М. Достоевского
г. Омск, Россия
ОСОБЕННОСТИ ПРОВЕДЕНИЯ ДОПОЛНИТЕЛЬНЫХ ЗАНЯТИЙ ПО
ИНФОРМАТИКЕ В ПРОФОРИЕНТАЦИОННОЙ ШКОЛЕ ОМГУ
Аннотация. Дополнительные занятия по узким дисциплинам играют важную роль,
поскольку стандартные школьные занятия, как правило, не позволяют на высоком уровне
изучить тему. Такого рода занятия можно разделить на два типа: изучение языков
программирования и подготовка к государственной итоговой аттестации. Каждый из типов
имеет свои особенности и требует индивидуальный подход в подготовке. В настоящем
докладе представлен опыт организации и проведения занятий по информатике в
профориентационной школе ОмГУ.
Ключевые слова: дополнительное образование; программирование; методические
рекомендации; структура курса.
Общая концепция дополнительного образования предполагает проведение различных
кружковых занятий, конференций, летних школ, олимпиад и конкурсов. Министерство
просвещения подчеркивает важность развития дополнительного образования. При этом
необходимо отметить, что задачи и направления у «столичных» и «провинциальных» Вузов в
данном контексте будут различные. Первые ввиду масштабов имеют большую возможность
для отбора и распределения детей по уровню, тематике, классам и времени, что скорее не
характерно для Вузов второго типа. Здесь, как правило, на один курс приходят дети разного
уровня, разных интересов, возраста и навыков, что задает свою специфику в работе
преподавателя. Более того необходимо отметить дефицит кадров и потребность кадрового
резерва, что требует дополнительных усилий для мотивации и обучения студентов самим быть
преподавателями, повышении квалификации и развития. Здесь на помощь приходят
наставники, которые курируют разработки молодых учителей, а также школы, конференции и
конкурсы молодого учителя (см., например, https://clck.ru/39vy2q, https://clck.ru/39vy2H).
Специфика дополнительного образования в сфере ИТ задает свои направления.
Наиболее востребованные языки программирования по данным zarplan.com и hh.ru по
количеству вакансий: 1C, Java, php, c++, python, c#, JavaScript, GoLang, Kotlin (в порядке их
ранжирования). Для того чтобы стать хорошим программистом недостаточно изучения
школьной программы или прохождения краткосрочных курсов, необходима фундаментальная
подготовка. В настоящее время доступно большое количество возможностей для обучения
программированию на различных языках. Существуют различные онлайн ресурсы (Stepic,
Яндекс, Фоксфорд и др.). Уже много лет функционируют школы олимпиадного
программирования, такие как школа олимпиадного программирования в Красноярске, кружок
олимпиадной информатики в ИТМО (Санкт-Петербург), Школа спортивного
358СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
программирования в Нижегородском государственном университете им. Н.И. Лобачевского.
Открыто множество образовательных программ в профориентационных школах при вузах, а
также в частных ИТ-школах.
С 2022 года Министерство цифрового развития, связи и массовых коммуникаций РФ
запустило проект обучения школьников и студентов СПО современным языкам
программирования “Код Будущего”. В рамках данного проекта можно изучить
программирование на Java, Python, C, C++, C#, PHP 1С, HTML, JavaScript, Lua, SQL, Scratch,
XML. Предусмотрена трехуровневая подготовка: уровень для начинающих; базовый – для тех,
кто уже знаком с основами, продвинутый уровень. Попасть на проект могут школьники с 8 по
11 классы. Продолжительность курсов – 2 года. Предусмотрены как онлайн, так и офлайн
занятия. Обучением занимаются крупнейшие университеты, ИТ компании, образовательные
площадки и онлайн школы. В настоящее время в рамках “Кода будущего” разработано около
300 программ дополнительного образования. В первом потоке уже прошли обучение более ста
тысяч школьников.
Типичная структура курсов по программированию имеет вид:
– занимательная логика и работа на компьютере (3–5 классы);
– программирование для школьников 3–6 классов (Scratch, Logo, КуМир);
– программирование для школьников 7–10 классов (Python, C/C++, C#, Java);
– Web-проектирование и web-программирование (разные уровни);
– компьютерная анимация, графика, дизайн (разные уровни);
– основы программирования игр (разные уровни);
– подготовка по работе с пакетами программ для начинающих (5–11 классы).
Статистический анализ показывает, что больше всего детей на факультативных занятиях
в группах 5–7 классов, причем, начинающего уровня. Это обусловлено тем, что решение
принимают в первую очередь родители с учетом заинтересованности детей. Далее остаются
именно те дети, которые заинтересованы в предмете.
В настоящей работе приводятся практико-ориентированные задания и методические
рекомендации для двух основных курсов обучения – программирование и подготовка к ГИА,
используемые в профориентационной школе факультета цифровых технологий и
кибербезопасности ОмГУ [1; 2; 5; 9; 10].
Общий курс по программированию. Общая структура курса по тому или иному языку
программирования, как правило, имеет вид [6]:
– структура программы, переменные, операторы, структуры данных;
– подпрограммы и работа с файлами;
– алгоритмические конструкции;
– введение в программирование высокого уровня;
– нетривиальные возможности, создание приложений с графическим интерфейсом.
Авторами предлагается использовать на занятиях такие постановки задач, которые по
приложениям и сути понятны детям современных реалий. Далее приводятся примеры таких
359СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
задач для трех типов занятий: группа начинающих, группа продолжающих и группа
подготовки к олимпиадам.
Задача из курса для начинающих (среднее звено):
Введение в объектно-ориентированное программирование на примере игры Among Us.
Члены экипажа космического корабля: товарищи и самозванцы (объекты).
Товарищ:
Ник (по умолчанию – Паша)
Число активностей
Отправить игрока в космос
Выполнить задачу (глобальная переменная и верхняя граница)
Поднять тревогу-назначить экстренную встречу (рассказать, что кто-то
подозрительный)
Самозванец:
Ник (по умолчанию – Паша)
Число активностей
Отправить игрока в космос
Поднять тревогу-назначить экстренную встречу (рассказать, что кто-то
подозрительный)
Саботаж – обратный отсчет по решению задачи (глобальная переменная и верхняя
граница)
Задание: реализовать классы с полями и методами, указанными в описании, создать
объекты классов и вызвать для них методы.
Задача из курса для продолжающих (среднее звено):
Работа над проектом. Генерирование ландшафта.
На данном занятии обучающемуся необходимо реализовать алгоритмы по размещению
префабов на сцене таким образом, чтобы их совокупность представляла собой некоторый
ландшафт. Для достижения этой цели предлагается освоить формулы некоторых примитивов
и поверхностей 2-го порядка.
Общий алгоритм генерации случайного ландшафта:
Выбрать примитив
Выбрать характеристики примитива (позиция, размер и т. д.)
Сгенерировать набор префабов, таким образом, чтобы их координаты соответствовали
характеристикам примитива
Повторять пункты 1–3 необходимое количество раз
Задание: разработать генератор ландшафта.
Задача из курса для продолжающих (олимпиадный уровень):
Представим, что вы уже работаете в ИТ-компании, которая специализируется на
разработке компьютерных игр. Пришла новая задача от заказчика по разработке
компьютерной игры “Превращение летающих квадро в зеленые кругляши”. Согласно сюжету
игры, на загадочную планету прилетают разноцветные квадро в виде квадратов произвольного
360СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
размера. Герой игры управляет лазерным лучом, который превращает квадро в круги зеленого
цвета. Для этого он указывает две точки на загадочной планете, считается плоской, через
которые по прямой будет проходить лазерный луч. Составить программу, которая по данным
о приземлившихся квадро и направлениям луча определяет какие квадро превращены в
зеленые кругляши. Дополнительно составить программу, в которой наоборот приземляются
кругляши, превращающиеся под воздействием лазера в квадро.
Дополнительно рекомендуется подкреплять задания курса задачами на логику, системы
счисления, введение в логику высказываний, шифрование и так далее. Здесь удобно
задействовать ресурсы дистанционных образовательных технологий для контроля знаний.
Также целесообразно использовать задания с учетом интересов и увлечений детей, например,
формирование запросов для нейросети от Яндекса по заданной тематике для начинающих
обучение и составление задач, на которые с первого раза ChatGPT не даст верный ответ, для
продолжающих обучение. Мотивацией для детей должно в том числе служить участие в
конференциях, конкурсах и олимпиадах, где наяву можно наблюдать за результатами и
успехами обучающихся.
Подготовка к ОГЭ и ЕГЭ. Стандартная программа и переход на более сложный
уровень:
– Информация и ее кодирование;
– Системы счисления;
– Основы математической логики;
– Моделирование;
– Алгоритмизация и программирование;
– Электронные таблицы и реляционные базы данных;
– Компьютерные сети;
– Работа с тестами.
Работа в группах подготовки к государственной итоговой аттестации сопряжена с рядом
сложностей. Часто абитуриенты только в 11 классе принимают решение о том, что хотят
сдавать информатику, а за один год при слабой начальной подготовке это достаточно сложно.
Группы практически всегда образуются разноуровневые: есть школьники без навыков
программирования и ребята с высоким уровнем подготовки. Поэтому возникает
необходимость включать в структуру курса базовые понятия программирования, и постепенно
переходить к решению типовых задач из единого государственного экзамена по информатике
и ИКТ (КЕГЭ). Необходима разработка разноуровневых задач.
Следующая проблема связана с тем, что базовый язык программирования, с которым
знакомы ребята у всех разный. Чаще всего школьники знают Паскаль, Python, реже – С, С++,
Java. Обычно в начале обучения совместно с ребятами осуществляется выбор языка
программирования для работы на курсах. С введением КЕГЭ наблюдается рост популярности
языка Python [7]. Именно его в последние годы выбирают абитуриенты.
К сожалению, уровень подготовки по данной дисциплине в школах до сих пор остается
низким, знания у школьников не носят системного характера. Поэтому, для успешной
361СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
подготовки к итоговому экзамену требуется в первую очередь не «натаскивание» на типовые
задачи, а систематизация знаний, усвоение базовых понятий, формирование понимания связи
между ними.
Большинство задач КЕГЭ решаются при помощи программного кода. В сети Интернет
на сегодняшний день существует огромное количество шаблонных решений. Здесь важно
объяснить, что важно понимать суть решения задач. Использование библиотек и декораторов
в Python значительно сокращает количество строк в коде и сокращает время на решение
задачи, но подходить к их использованию необходимо постепенно, через понимание базовых
алгоритмов, понимание процессов, которые реализованы в библиотеках.
Приведем пример:
Вася составляет 5-буквенные слова, в которых есть только буквы С, Т, О, Л, причём
буква С используется в каждом слове ровно 1 раз. Каждая из других допустимых букв может
встречаться в слове любое количество раз или не встречаться совсем. Словом считается любая
допустимая последовательность букв, не обязательно осмысленная. Сколько существует
таких слов, которые может написать Вася?
Для решения данного задания аналитически необходимо знать базовые понятия
комбинаторики. Для решения с использованием программы можно использовать простой
перебор, либо пользоваться встроенной библиотекой itertools. Пример решения вторым
способом:
from itertools import product
p=product(‘СТОЛ’, repeat=5)
n=0
for x in p:
if x.count(‘C’) ==1:
n+=1
print(n)
Следует помнить, что основная цель подготовки к экзамену – это поступление в вуз и
дальнейшее обучение в нем, приобретение специальности. Без качественных навыков
программирования обучение на первом курсе будет весьма затруднено [8]. Образовательные
программы для студентов предполагают умение решать базовые задачи (поиск минимального
элемента последовательности, сортировка элементов, работа с рекурсивной функцией и т. д.
[3; 4]) без использования библиотек. В КЕГЭ присутствуют задачи, предполагающие
использование текстового редактора и работу в электронных таблицах. Поскольку в перечень
ПО, которое может быть установлено на рабочие станции для проведения экзамена входят и
Open Office, и LibreOffice, и Мой офис, необходимо также уходить от “натаскивания” на один
из пакетов, а уделять особое внимание на общую концепцию работы, методы и принципы
работы.
В завершении приведем методические рекомендации по проведению занятий:
1) задачи должны соответствовать уровню подготовки детей, быть понятными и
интересными детям;
362СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
2) на занятиях следует поддерживать дисциплину и одновременно формат проведения,
отличный от классических школьных уроков;
3) курс необходимо строить таким образом, чтобы осуществлялось развитие навыков, а
не «натаскивание» на материал;
4) в рамках занятий необходимо акцентировать внимание на активной работе,
плодотворном отдыхе и смене деятельности.
Литература
1. Долинина И.Г., Мехоношин И.А., Шапорев А.А. Методология профессиональной
педагогики: технология развития мышления обучающихся // Вопросы методики преподавания
в вузе. Т. 12. №3. 2023. C. 8-21.
2. Жуков И.А., Костюк Ю.Л. Система контроля знаний и практических навыков по
программированию // Информатика и образование. 2023. Т. 38. №2. С. 66-74.
3. Бахта Н.С., Ушакова Е.В. Информатика: практикум: в 2 частях. Омск: Омский гос-ый
ун-т им. Ф.М. Достоевского. Часть 1. 2018. 32 с.
4. Бахта Н.С., Ушакова Е.В. Информатика: практикум: в 2 частях. Омск: Омский гос-ый
ун-т им. Ф.М. Достоевского. Часть 2. 2019. 32 с.
5. Локалов В.А., Климов И.В., Константинова Ю.О., Миронов А.С., Методические
особенности преподавания компьютерных технологий в системе дополнительного
образования детей. СПб: Университет ИТМО, 2020. 53 с.
6. Коваленко Ю.В. Подход к организации факультативного обучения школьников по
информатике // Методика преподавания математических и естественнонаучных дисциплин:
современные проблемы и тенденции развития: Мат-лы IV Всероссийской научно-
практической конференции (г. Омск, 04 июля 2017 г.). Омск, 2017. С. 192-194.
7. Маркелов В.К., Завьялова О.А. Язык программирования Python как альтернативный
инструмент для решения заданий ЕГЭ по информатике // Информатика в школе. 2023. №2. C.
63-72.
8. Пеньков И.А., Выродов С.С., Дьякова Д.М. Психолого-педагогические аспекты
онлайн обучения: проявление инфантилизма студентов в дистанционном режиме // Вопросы
методики преподавания в вузе. 2023. Т. 12. №1. С. 76-87.
9. Чудинский Р.М., Малев В.В., Малева А.А., Дубов В.М., Башарина С.О. Оценка
предметных и методических компетенций выпускников педагогического вуза – будущих
учителей информатики: дефициты и перспективы // Информатика и образование. 2023. Т. 38.
№4. С. 44-56.
10. Шакирова Е.В. Особенности использования электронных средств обучения в
дошкольных образовательных организациях // Информатика и образование. 2023. Т. 38. №4.
С. 80-91.
© Захарова Ю.В., Ушакова Е.В., 2024
363СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
УДК 371.134: 373.62
Бутенина Д.В.
канд. физ.-мат. наук, доцент
Чепель Д.В.
студент
Санкт-Петербургский государственный университет аэрокосмического приборостроения
г. Санкт-Петербург, Россия
ПОТЕНЦИАЛ ПЛАТФОРМЫ DISCORD
ДЛЯ ОБУЧЕНИЯ ПРОГРАММИРОВАНИЮ ШКОЛЬНИКОВ
Аннотация. В статье рассматривается потенциал платформы Discord для обучения
школьников программированию. Описаны основные преимущества платформы Discord для
обучения программированию, а также возможности использования ботов в рамках обучения
программированию.
Ключевые слова: Discord; обучение программированию; школьники; социализация;
боты.
Программирование – искусство написания инструкций, которые может выполнить
компьютер, и оно стало незаменимым навыком в современном мире технологий. От
смартфонов до беспилотных автомобилей – технологии играют жизненно важную роль во всех
аспектах нашей жизни, а в основе всего этого лежит программирование. Поскольку
технологии продолжают развиваться, спрос на квалифицированных программистов растет в
геометрической прогрессии. Поэтому крайне важно знакомить молодое поколение с
программированием, вооружая его навыками, необходимыми для достижения успеха в эпоху
цифровых технологий. Преподавание программирования школьникам не только имеет
решающее значение для их будущей карьеры, но и полезно для развития их навыков решения
проблем, критического и логического мышления. Более того, программирование способствует
творчеству, инновациям и сотрудничеству, которые являются важными качествами в любой
профессии. Тем не менее, традиционные классные комнаты часто не могут обеспечить
учащимся увлекательный и интерактивный опыт обучения, что приводит к отсутствию
интереса и мотивации у учащихся. Откройте для себя Discord, популярную
коммуникационную платформу, созданную для геймеров и сообществ. Discord,
насчитывающий более 150 миллионов активных пользователей, предлагает школьникам
уникальную возможность изучать программирование в увлекательной среде. Функции
платформы, такие как голосовые каналы, текстовые каналы, совместное использование экрана
и боты, делают ее идеальным местом как для преподавателей, так и для учеников.
В этой статье будут рассмотрены возможности платформы Discord для обучения
школьников программированию. Мы рассмотрим преимущества использования Discord для
социализации, его функции, улучшающие процесс обучения, а также возможности ботов в
обучении программированию. К концу этой статьи читатели поймут, почему Discord –
отличная платформа для обучения программированию нового поколения энтузиастов
технологий.
364СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Тезис. Платформа Discord имеет значительный потенциал для обучения школьников
программированию благодаря своей увлекательной и интерактивной среде, функциям
совместной работы и способности интегрировать ботов, которые облегчают
персонализированное обучение.
Преимущества платформы Discord для обучения программированию:
1. Гибкость и настраиваемость.
Платформа Discord предлагает высокую степень гибкости и настраиваемости, что делает
ее идеальным выбором для обучения программированию. Преподаватели могут создавать
различные каналы для разных тем, заданий или проектов, позволяя учащимся получать доступ
к ресурсам и структурированно взаимодействовать со своими сверстниками. Кроме того,
преподаватели могут адаптировать свои уроки в соответствии с потребностями и уровнем
навыков своих учеников, создавая персонализированный опыт обучения. Более того, Discord
позволяет преподавателям создавать собственные роли и разрешения, гарантируя, что
учащиеся будут иметь доступ только к тем ресурсам, которые им нужны. Эта функция
помогает поддерживать организацию и структуру на сервере, предотвращая путаницу и
отвлекающие факторы, которые могут возникнуть из-за слишком большого количества опций.
Создавая индивидуальную среду обучения, преподаватели могут помочь детям оставаться
сосредоточенными и мотивированными на протяжении всего курса.
2. Коммуникация и сотрудничество.
Коммуникационные функции Discord являются одними из наиболее важных
преимуществ для обучения программированию. Голосовые каналы позволяют
преподавателям читать лекции в реальном времени, предоставляя ученикам обратную связь и
поддержку в режиме реального времени. Текстовые каналы предоставляют учащимся
возможность задавать вопросы, делиться своей работой и участвовать в дискуссиях.
Совместное использование экрана позволяет преподавателям демонстрировать концепции
кодирования и помогать учащимся в режиме реального времени, создавая среду совместного
обучения. Кроме того, Discord поощряет сотрудничество, позволяя учащимся вместе работать
над проектами и делиться своими знаниями и навыками. Ученики могут объединять усилия
для решения проблем, выполнения заданий и разработки проектов, развивая навыки
командной работы и решения проблем. Используя коммуникационные функции Discord,
преподаватели могут создать интерактивную и увлекательную среду обучения, имитирующую
реальные команды и проекты разработчиков.
3. Доступность.
Платформа Discord предлагает беспрецедентную доступность по сравнению с
традиционными классными комнатами. С Discord возможно учиться в своем темпе, в любое
время и в любом месте. Пока есть подключение к Интернету, учащиеся могут участвовать в
уроках, общаться со своими сверстниками и получать доступ к ресурсам. Эта гибкость
особенно полезна для учащихся, у которых могут быть конфликты в расписании или разные
стили обучения. Более того, Discord устраняет необходимость в дорогостоящем оборудовании
или программном обеспечении, что делает его доступным вариантом для школ. Все, что
365СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
требуется, – это компьютер или мобильное устройство с подключением к Интернету, и дети
могут сразу же начать изучать программирование. Такая доступность гарантирует, что никто
не останется позади из-за финансовых ограничений, предоставляя каждому ребёнку равные
возможности для приобретения навыков программирования.
Социализация школьников в рамках обучения программированию:
1. Важность социализации для школьников.
Социализация является важнейшим аспектом развития детей и играет значительную
роль в формировании личности, поведения и взаимодействия детей с другими людьми. Школы
часто рассматриваются как места, где дети не только изучают академические предметы, но и
развивают социальные навыки, такие как общение, сотрудничество, сочувствие и разрешение
конфликтов. Однако традиционная обстановка в классе не всегда может обеспечить
адекватные возможности для социализации, особенно для учащихся, которые борются с
застенчивостью или другими социальными тревогами. Уроки программирования в Discord
предлагают уникальный шанс решить эту проблему. Интегрируя социализацию в обучение
программированию, преподаватели могут создать поддерживающее сообщество, в котором
учащиеся подбадривают друг друга, делятся своей страстью к программированию и
сотрудничают в проектах. Это способствует формированию у учащихся чувства
принадлежности, что важно для формирования самооценки и уверенности в себе. Более того,
социализация помогает учащимся развивать мягкие навыки, которые высоко ценятся
работодателями, такие как работа в команде, решение проблем и общение.
2. Социальная среда, созданная на серверах Discord.
Discord предоставляет учащимся платформу для взаимодействия со своими
сверстниками и преподавателями в режиме реального времени, создавая динамичную
социальную среду. Голосовые каналы позволяют учащимся участвовать в групповых
обсуждениях, а текстовые каналы предоставляют пространство для обмена идеями,
постановки вопросов и предоставления отзывов. Совместное использование экрана позволяет
преподавателям демонстрировать концепции кодирования и помогать учащимся в режиме
реального времени, способствуя сотрудничеству и интерактивному обучению. Более того,
Discord позволяет преподавателям создавать собственные роли и разрешения, гарантируя, что
учащиеся будут иметь доступ только к тем ресурсам, которые им необходимы. Эта функция
помогает поддерживать организацию и структуру на сервере, предотвращая путаницу и
отвлекающие факторы, которые могут возникнуть из-за слишком большого количества опций.
Создавая хорошо структурированную и благоприятную среду, преподаватели могут
способствовать социализации учащихся, побуждая их работать вместе, помогать друг другу и
строить позитивные отношения.
3. Исследования положительного влияния онлайн-сообществ на социализацию.
Многочисленные исследования продемонстрировали положительное влияние онлайн-
сообществ на социализацию. Например, исследование, опубликованное в “Journal of
Educational Computing Research”, показало, что учащиеся, которые участвовали в онлайн-
сообществах, демонстрировали более высокий уровень социализации, сотрудничества и
366СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
мотивации по сравнению с теми, кто не участвовал. Другое исследование, опубликованное в
журнале “Journal of Information Technology Education”, показало, что онлайн-сообщества
способствуют развитию у учащихся чувства принадлежности, что приводит к улучшению
успеваемости и снижению показателей отсева. Эти исследования показывают, что онлайн-
сообщества, такие как Discord, могут предоставить школьникам платформу для развития
важных социальных навыков, таких как общение, работа в команде и решение проблем.
Интегрируя уроки программирования в Discord, преподаватели могут извлечь выгоду из
преимуществ онлайн-сообществ, способствуя социализации и улучшая общие результаты
учащихся.
Потенциал ботов и возможности обучения программированию. Боты в Discord –
программы, которые работают на платформе Discord и могут выполнять различные задачи,
такие как ответы на вопросы, управление ролями и публикация сообщений. Их можно
создавать с использованием различных языков программирования, таких как Python,
JavaScript или C#, и настраивать в соответствии с конкретными потребностями. В контексте
обучения школьников программированию боты могут быть невероятно полезны по
нескольким причинам:
1. Автоматизация задач.
Боты могут автоматизировать рутинные задачи, такие как выставление оценок за
задания, предоставление мгновенной обратной связи и мониторинг успеваемости учащихся.
Это может сэкономить учителям время и энергию, позволяя им сосредоточиться на более
важных аспектах преподавания. Например, бота можно запрограммировать на
автоматическую оценку тестов с несколькими вариантами ответов или задач по
программированию, предоставляя учащимся немедленную обратную связь об их
успеваемости.
2. Предоставление обратной связи.
Ботов также можно использовать для предоставления учащимся персонализированной
обратной связи на основе их успеваемости. Анализируя данные учащихся, боты могут
определить области, в которых учащийся нуждается в улучшении, и предложить
индивидуальные предложения по улучшению.
Использование Discord для обучения программированию во внеклассных
мероприятиях. В дополнение к традиционной обстановке класса, Discord также можно
использовать для обучения программированию во внеклассных мероприятиях, таких как
клубы программирования, хакатоны и собрания. Мероприятия такого типа дают учащимся
возможность изучать программирование в более непринужденной и совместной среде,
сохраняя при этом выгоду от структуры и поддержки, предоставляемой Discord. Один из
способов использования Discord для внеклассной деятельности по программированию –
создать сервер для клуба или группы, где участники могут присоединяться и участвовать в
обсуждениях, делиться проектами и совместно решать задачи по программированию.
Преподаватели или наставники могут создавать каналы по различным темам, например,
367СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
программированию для начинающих, продвинутому программированию или конкретным
языкам программирования, чтобы помочь организовать беседы и ресурсы.
Еще одним преимуществом использования Discord для внеклассных программных
мероприятий является возможность общаться с приглашенными докладчиками или
профессионалами отрасли, которые могут поделиться с группой своим опытом и идеями.
Функции голосового и видеочата Discord позволяют проводить сеансы вопросов и ответов в
режиме реального времени, дискуссии и семинары, давая детям возможность учиться у
экспертов в этой области. Кроме того, функция совместного использования экрана Discord
позволяет гостям делиться своим кодом и демонстрировать концепции программирования, что
упрощает понимание. Эта функция также позволяет учащимся демонстрировать свои
собственные проекты и получать отзывы от коллег и наставников, укрепляя чувство общности
и сотрудничества. В целом, использование Discord для внеклассной деятельности по
программированию обеспечивает гибкий и увлекательный способ изучения
программирования за пределами традиционных занятий в классе. Это позволяет общаться с
единомышленниками, учиться у экспертов области и развивать ценные навыки, которые могут
подготовить их к будущей карьере в сфере технологий.
Использование Discord для обучения программированию детей с ограниченными
возможностями. Discord также может быть мощным инструментом для обучения
программированию детей с ограниченными возможностями. Функции доступности
платформы, такие как преобразование текста в речь и речь в текст, могут помочь детям, у
которых могут возникнуть трудности с набором текста или чтением. Кроме того, функции
аудио- и видеоконференций Discord могут предоставить возможности дистанционного
обучения для детей, которые могут столкнуться с физическими препятствиями при посещении
традиционных занятий. Чтобы эффективно использовать Discord для обучения
программированию детей с ограниченными возможностями, важно учитывать их
индивидуальные потребности и приспосабливаться к ним соответствующим образом.
В заключении отметим, что платформа Discord предлагает широкий спектр функций и
возможностей, которые делают её идеальным инструментом для обучения школьников
программированию. Интуитивно понятный интерфейс, система обмена сообщениями в
реальном времени и поддержка мультимедийного контента делают его привлекательной и
интерактивной платформой для обучения. Кроме того, использование ботов и возможность
создавать собственные роли и каналы позволяют учителям создавать структурированную и
организованную среду обучения. Мы изучили различные способы использования Discord для
обучения концепциям программирования, включая сеансы программирования в реальном
времени, экспертную оценку и управление проектами. Мы также обсудили, как можно
использовать ботов для автоматизации задач, предоставления обратной связи и организации
обучения. В целом платформа Discord имеет значительный потенциал для обучения
школьников программированию. Универсальность, простота использования и возможности
настройки делают его отличным инструментом как для учителей, так и для учащихся.
368СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Поскольку технологии продолжают развиваться, вполне вероятно, что Discord будет играть
все более важную роль в образовании, особенно в области информатики.
Также, согласно статьям:
1. Scrutinizing the potential use of Discord application as a digital platform amidst emergency
remote learning [4].
2. Promoting “Discord” as a Platform for Learning Engagement during Covid-19 Pandemic [1,
с. 9].
3. Teachers’ Feedback on Using Discord as an Online Learning Platform [3, с. 84].
4. Teaching web development courses using flipped classroom and Discord: a two-year
experience in the Peruvian context during the COVID-19 pandemic [2, с. 665-6664].
Можно подвести совокупный итог, что Discord имеет большой потенциал в качестве
платформы для обучения школьников программированию. Wahyuningsih в 2021 обнаружил,
что Discord оказался альтернативной платформой цифрового обучения во время экстренного
дистанционного обучения, создавая приятную среду обучения. Ayob в 2022 обнаружил, что
Discord удобен и эффективен для обучения взаимодействию студентов высших учебных
заведений. Uong в 2022 подтвердил Discord как эффективную и доступную платформу онлайн-
обучения для учителей и учеников. Lucho в 2023 подчеркнул успех использования Discord и
методологии «перевернутого класса» для преподавания курсов веб-разработки, что позволяет
студентам активно участвовать в собственном обучении.
Литература
1. Ayob M.A., Hadi N., Pahroraji M.E. H.M., Ismail B., Saaid M.N.F. Promoting “Discord” as
a Platform for Learning Engagement during Covid-19 Pandemic // Asian Journal of University
Education. 2022. Т. 18. № 3. P. 663-673.
2. Lucho S., Gardini G.B., Bueno J.E. Teaching web development courses using flipped
classroom and Discord: a two-year experience in the Peruvian context during the COVID-19
pandemic // 2023 IEEE World Engineering Education Conference (EDUNINE). 2023.
3. Uong T.G.T., Nguyen D.K., Nguyen H.N. Teachers’ Feedback on Using Discord as an
Online Learning Platform // International Journal of TESOL & Education. 2022. Т. 2. № 4. P 84-104.
4. Wahyuningsih E., Baidi B. Scrutinizing the potential use of Discord application as a digital
platform amidst emergency remote learning // Journal of Educational Management and Instruction
(JEMIN). 2021. Т. 1. №1. P. 9-18.
© Бутенина Д.В., Чепель Д.В., 2024
369ОРГАНИЗАЦИОННЫЙ КОМИТЕТ
Председатель
Горлов Сергей Иванович, доктор физико-математических наук, профессор, ректор
Нижневартовского государственного университета.
Члены оргкомитета
1. Абрамян Геннадий Владимирович, доктор педагогических наук, профессор,
Российский государственный педагогический университет им. А.И. Герцена, г. Санкт-
Петербург.
2. Богаченко Надежда Федоровна, кандидат физико-математических наук, доцент,
заведующий кафедрой компьютерных технологий и сетей, Омский государственный
университет им. Ф.М. Достоевского, г. Омск.
3. Казиахмедов Туфик Багаутдинович, кандидат педагогических наук, доцент,
заведующий кафедрой информатики и методики преподавания информатики,
Нижневартовский государственный университет, г. Нижневартовск.
4. Катермина Татьяна Сергеевна, кандидат технических наук, доцент, Нижневартовский
государственный университет, г. Нижневартовск.
5. Козлова Екатерина Владимировна, старший специалист направления «Бизнес-
Информатика 1С», Особая экономическая зона «Алабуга».
6. Копыльцов Александр Васильевич, доктор технических наук, профессор, Санкт-
Петербургский государственный электротехнический университет «ЛЭТИ» им.
В.И. Ульянова (Ленина), г. Санкт-Петербург.
7. Лавров Дмитрий Николаевич, кандидат физико-математических наук, доцент,
Нижневартовский государственный университет, г. Нижневартовск.
8. Лозицкий Андрей Вячеславович, директор ООО «Тюмень-Софт», ООО «Дист Айти»,
ООО «1С-Медицина-Регион», г. Тюмень.
9. Мамедли Рамиль Эльман оглы, кандидат физико-математических наук, доцент,
Нижневартовский государственный университет, г. Нижневартовск.
10. Масюра Римма Мансуровна, руководитель отдела по работе с учебными заведениями
ООО «Дист АйТи» - Региональный дистрибьютор фирмы «1С» по Тюменской области, ХМАО
и ЯНАО; доцент, Тюменский государственный университет, г. Тюмень.
11. Матющенко Игорь Алексеевич, старший преподаватель, Нижневартовский
государственный университет, г. Нижневартовск.
12. Никонова Елена Захаровна, кандидат педагогических наук, доцент,
Нижневартовский государственный университет, г. Нижневартовск.
13. Пащенко Оксана Ивановна, кандидат педагогических наук, доцент, декан факультета
информационных технологий и математики, Нижневартовский государственный университет,
г. Нижневартовск.
37014. Погонышев Денис Александрович, кандидат биологических наук, доцент, первый
проректор, проректор по научной работе, Нижневартовский государственный университет,
г. Нижневартовск.
15. Русаков Александр Александрович, доктор педагогических наук, профессор,
Академия информатизации образования.
16. Серик Меруерт Сериковна, доктор педагогических наук, профессор, Евразийский
национальный университет им. Л.Н. Гумилева, г. Астана, Казахстан.
17. Слива Максим Владимирович, кандидат педагогических наук, доцент,
Нижневартовский государственный университет, г. Нижневартовск.
18. Сулейменова Саламат Темирбековна, доктор философии PhD по специальности
«Автоматизация и управление», Кызылординский университет имени Коркыт Ата,
г. Кызылорда, Казахстан.
19. Худойбердиев Хуршед Атохонович, кандидат физико-математических наук, доцент,
Худжандский политехнический институт Таджикского технического университета имени
академика М.С. Осими, г. Худжанд, Таджикистан.
20. Цехановский Владислав Владимирович, кандидат технических наук, доцент,
заведующий кафедрой информационных систем, Санкт-Петербургский государственный
электротехнический университет «ЛЭТИ» им. В.И. Ульянова (Ленина), г. Санкт-Петербург.
21. Шульгин Олег Валерьевич, кандидат экономических наук, доцент, начальник
управления научных исследований, Нижневартовский государственный университет,
г. Нижневартовск.
22. Яламов Георгий Юрьевич, кандидат физико-математических наук, ведущий научный
сотрудник, Институт управления образованием Российской академии образования.
371Содержание
РЕЗОЛЮЦИЯ ................................................................................................................................................................ 4
СРЕДЫ, ИНСТРУМЕНТЫ, МЕТОДЫ ПРОГРАММИРОВАНИЯ
Тарасов В.Г., Газизулин М.Р.
РАЗРАБОТКА ВЕБ-ПРИЛОЖЕНИЯ ДЛЯ СОЗДАНИЯ И ПРОСМОТРА ВИРТУАЛЬНОГО МУЗЕЯ ..... 6
Гибадуллин А.А.
ДЕМОНСТРАЦИЯ ВОЗМОЖНОСТЕЙ КОМАНДНОЙ ОБОЛОЧКИ BASH В КАЧЕСТВЕ СРЕДЫ
ПРОГРАММИРОВАНИЯ .......................................................................................................................................... 15
Копытов П.Г., Лещенко К.Д., Савинская Д.Н.
ИСПОЛЬЗОВАНИЕ DOCKER В КОНТЕЙНЕРИЗАЦИИ: ОСНОВЫ И ПРЕИМУЩЕСТВА .................... 21
Лавров Д.Н., Лаврова Д.Д.
ПРОБЛЕМЫ ЗАЩИЩЕННОСТИ ПРОТОКОЛОВ ЭЛЕКТРОННОГО ТАЙНОГО ГОЛОСОВАНИЯ ... 27
Лемиш Д.В.
ПРАКТИЧЕСКОЕ ПРИМЕНЕНИЕ РАСШИРЕННОЙ ФОРМЫ БЭКУСА-НАУРА НА ПРИМЕРЕ
ОПИСАНИЯ БАЗОВЫХ ВОЗМОЖНОСТЕЙ ЯЗЫКА ОПИСАНИЯ ВЫЧИСЛИТЕЛЬНЫХ
АЛГОРИТМОВ «ОВАЛ» ........................................................................................................................................... 33
Катермина Т.С., Севастьянов М.А.
РАЗРАБОТКА ПОЛЬЗОВАТЕЛЬСКОГО ИНТЕРФЕЙСА НА ЯЗЫКЕ XAML
(НА ОСНОВЕ WINDOWS PRESENTATION FOUNDATION) ............................................................................ 41
Тагиров К.М., Тагиров Т.М., Алаяров Г.А.
ОПИСАНИЕ РАЗРАБОТКИ ВЕБ-ПРИЛОЖЕНИЯ «РАСПИСАНИЕ
СТРОИТЕЛЬНОГО КОЛЛЕДЖА» ......................................................................................................................... 48
Катермина Т.С., Ферберт И.И.
РАЗРАБОТКА ПРОГРАММ ДЛЯ РАЗМЕТКИ И ПРОСМОТРА МЕТОК НА ИЗОБРАЖЕНИИ
ДЛЯ СОЗДАНИЯ НАБОРА ДАННЫХ ................................................................................................................... 54
МАТЕМАТИЧЕСКОЕ МОДЕЛИРОВАНИЕ В СЛОЖНЫХ СИСТЕМАХ
Зейналов Р.М.
ПОЛУЧЕНИЕ НЕОБХОДИМЫХ УСЛОВИЙ ГРАНИЧНЫХ ЗАДАЧ ДЛЯ УРАВНЕНИЯ КОШИ-
РИМАНА, КОГДА УСЛОВИЯ КАРЛЕМАНА НЕ ИМЕЕТ МЕСТО ................................................................ 60
Казымов Б.З., Зейналов Р.М., Дамиров A.A.
РАСЧЕТНАЯ СХЕМА ОПРЕДЕЛЕНИЯ ПОКАЗАТЕЛЕЙ РАЗРАБОТКИ НЕФТЯНЫХ
МЕСТОРОЖДЕНИЙ, ПОДВЕРГАЕМЫХ РЕЛАКСАЦИОННОЙ ДЕФОРМАЦИИ,
С УЧЕТОМ ВНЕДРЕНИЯ ВОДЫ В НЕФТЯНУЮ ОБЛАСТЬ ......................................................................... 64
Мамедли Р.Э., Коваленко П.И.
РАЗРАБОТКА ШАБЛОНА ДЛЯ УПРОЩЕНИЯ ПОСТРОЕНИЯ ПЕРЕКРЕСТКОВ
В СРЕДЕ ANYLOGIC ................................................................................................................................................. 69
Соловьев А.А.
ОСОБЕННОСТИ ИСПОЛЬЗОВАНИЯ ЦИФРОВЫХ ДВОЙНИКОВ ПРИ РАЗРАБОТКЕ CAE-
ПРОГРАММЫ ДЛЯ НЕФТЕГАЗОВОГО ПРОИЗВОДСТВА ............................................................................ 75
372КОМПЬЮТЕРНОЕ МОДЕЛИРОВАНИЕ В ПРИКЛАДНЫХ НАУКАХ
(ФИЗИКА, ХИМИЯ, БИОЛОГИЯ И ДР.)
Копыльцов А.В., Дюжикова Н.А.
КОМПЬЮТЕРНОЕ МОДЕЛИРОВАНИЕ МАГНИТНОГО ПОЛЯ
В ОКРЕСТНОСТИ КАПИЛЛЯРОВ ........................................................................................................................ 80
Красняков И.В., Костарев К.В., Брацун Д.А.
ВЕРШИННАЯ МАТЕМАТИЧЕСКАЯ МОДЕЛЬ МОРФОГЕНЕЗА ЭПИТЕЛИАЛЬНОЙ ТКАНИ .......... 87
Ситкевич А.Л., Крот В.В.
ПРОГРАММНЫЙ КОМПЛЕКС ДЛЯ ОПРЕДЕЛЕНИЯ ФУНКЦИИ ПАТТЕРСОНА
КРИСТАЛЛИЧЕСКИХ ОБРАЗЦОВ ....................................................................................................................... 98
Бездидько С.Н., Откупман Д.Г.
РАЗРАБОТКА ПРОГРАММЫ ДЛЯ РАСЧЁТА ОПТИЧЕСКИХ СИСТЕМ ................................................. 108
Созонов М.В., Зажигалов С.В., Сибаа М., Елышев А.В.
ОПРЕДЕЛЕНИЕ КИНЕТИЧЕСКИХ КОЭФФИЦИЕНТОВ РЕАКЦИИ ГИДРОГЕНОЛИЗА
ПРОПАНА С ПОМОЩЬЮ CFD МОДЕЛИРОВАНИЯ И ИНСТРУМЕНТОВ ОПТИМИЗАЦИИ ........... 115
УПРАВЛЕНИЕ РАЗРАБОТКОЙ ПРОГРАММНЫХ КОМПЛЕКСОВ
И ВЫЧИСЛИТЕЛЬНЫМИ ПРОЦЕССАМИ
Фомин Н.И., Летавин Д.А., Миронова Л.И.
СЕРВИС ДЛЯ УПРАВЛЕНИЯ ИЗОБРЕТАТЕЛЬСКОЙ ДЕЯТЕЛЬНОСТЬЮ СТУДЕНТОВ
УНИВЕРСИТЕТА ...................................................................................................................................................... 123
Салимов Ф., Бобоев С.
ОПЕРАЦИОННЫЕ СИСТЕМЫ В СТРАНАХ СНГ – ТОЧКА ОТСЧЁТА ................................................... 136
Катермина Т.С., Шаров В.А.
РАЗРАБОТКА ПЛАТФОРМЫ ДЛЯ ДИСТАНЦИОННОГО ОБУЧЕНИЯ СТУДЕНТОВ ......................... 138
РОБОТОТЕХНИКА И ПРОГРАММИРОВАНИЕ
Титова Л.Н., Мацилеева А.С.
РАЗВИТИЕ БЕСПИЛОТНИКОВ В РОССИИ КАК АКТУАЛЬНАЯ ПРОБЛЕМА
СОВРЕМЕННОСТИ ОБУЧАЕМЫХ ..................................................................................................................... 144
Пащенко О.И.
ОБРАЗОВАТЕЛЬНАЯ РОБОТОТЕХНИКА В СОВРЕМЕННОЙ ШКОЛЕ – ПОДХОДЫ,
ПРОБЛЕМЫ, ПЕРСПЕКТИВЫ ............................................................................................................................. 150
Слива М.В.
ПРОГРАММНО-АППАРАТНЫЙ КОМПЛЕКС ДЛЯ ИЗУЧЕНИЯ ОСОБЕННОСТЕЙ
ШАГАЮЩИХ РОБОТОВ ....................................................................................................................................... 157
НЕЙРОННЫЕ СЕТИ. ИНТЕЛЛЕКТУАЛЬНЫЕ ИНФОРМАЦИОННЫЕ СИСТЕМЫ
Абрамян Г.В.
ОСОБЕННОСТИ, СТРУКТУРА И ФУНКЦИИ ИНТЕЛЛЕКТУАЛЬНОЙ СИСТЕМЫ
ГОРМОНАЛЬНОГО ПРОКТОРИНГА КАЧЕСТВА ПРАКТИЧЕСКОЙ ПОДГОТОВКИ
СПЕЦИАЛИСТОВ НА ОСНОВЕ НЕЙРОТРАНСМИТТЕРЫХ ИНТЕРФЕЙСОВ БИОЦИФРОВЫХ
ПЛАТФОРМ ............................................................................................................................................................... 162
Правиков Д.И., Лазорин Д.С.
О ПОДХОДАХ К ОБЕСПЕЧЕНИЮ ИНФОРМАЦИОННОЙ БЕЗОПАСНОСТИ ЦИФРОВЫХ
ДВОЙНИКОВ ............................................................................................................................................................. 171
373Катермина Т.С., Макамбеджан А.А.
ОПЫТ ИСПОЛЬЗОВАНИЯ НЕЙРОННЫХ СЕТЕЙ В ПРЕДСКАЗАНИИ ВРЕМЕННЫХ РЯДОВ ........ 177
Татарникова Т.М., Мокрецов Н.С.
МЕТА-ОБУЧЕНИЕ И САМООБУЧЕНИЕ В МОДЕЛЯХ НЕЙРОННЫХ СЕТЕЙ ...................................... 184
Артемьев В.С., Панков Д.В.
ПРОБЛЕМЫ МАСШТАБИРУЕМОСТИ АЛГОРИТМОВ ОБУЧЕНИЯ ПРИ РАБОТЕ
С ЗАДАННЫМИ НАБОРАМИ ДАННЫХ ........................................................................................................... 193
Рзаева С.С., Мамедли Р.Э., Зейналов Р.М.
МОДЕЛИРОВАНИЕ ДИНАМИКИ НЕЙРОНОВ НА ОСНОВЕ МОДЕЛЕЙ НЕЙРОНОВ
С ПОМОЩЬЮ MATLAB ........................................................................................................................................ 200
Терин Д.В., Форостин М.Л.
ИСПОЛЬЗОВАНИЕ КВАНТОВОЙ СВЁРТОЧНОЙ НЕЙРОННОЙ СЕТИ ДЛЯ ВЫДЕЛЕНИЯ И
ОПОЗНАВАНИЯ ОБЪЕКТОВ ................................................................................................................................ 204
Казиахмедов Т.Б., Шишкин М.А.
МЕТОДЫ ИЗВЛЕЧЕНИЯ СМЫСЛА ТЕКСТОВ (КАК НАУЧИТЬ ЭВМ
ПОНИМАТЬ СМЫСЛ СЛОВ) ................................................................................................................................ 209
Шопанова Г.Е., Султанов Н.З.
ПРИМЕНЕНИЕ МЕТОДОВ НЕЧЕТКОГО МОДЕЛИРОВАНИЯ ДЛЯ РЕШЕНИЯ ЗАДАЧ
АВТОМАТИЗАЦИИ ПРОЦЕССОВ ПОДОГРЕВА ГАЗА
НА ГАЗОРАСПРЕДЕЛИТЕЛЬНОЙ СТАНЦИИ ................................................................................................ 215
Юрченко С.А.
ОПРЕДЕЛЕНИЕ АРХИТЕКТУРЫ ДЛЯ ОБНАРУЖЕНИЯ И КЛАССИФИКАЦИИ АРИТМИИ ........... 224
МОДЕЛИРОВАНИЕ БАЗ ДАННЫХ. БОЛЬШИЕ ДАННЫЕ
Татарникова Т.М., Архипцев Е.Д.
ОПТИМИЗАЦИЯ ХРАНЕНИЯ ДАННЫХ ИНФОРМАЦИОННОЙ СИСТЕМЫ ОБМЕНА
СООБЩЕНИЯМИ ..................................................................................................................................................... 227
Мамедли Р.Э.
ПРИМЕНЕНИЕ ГОРИЗОНТНЫХ ЗАПРОСОВ ДЛЯ БОЛЬШИХ ДАННЫХ .............................................. 232
Мамедли Р.Э.
ГИБКИЕ ЗАПРОСЫ К РЕЛЯЦИОННЫМ БАЗАМ ДАННЫХ: МЕТОД, ОСНОВАННЫЙ НА
НЕЧЕТКОМ МНОЖЕСТВЕ ................................................................................................................................... 241
Нурматова Е.В., Завгородний Н.И.
ГЕНЕРАЦИЯ ЗАПРОСОВ ДЛЯ НАГРУЗОЧНОГО ТЕСТИРОВАНИЯ СЕРВЕРА БАЗ ДАННЫХ ........ 249
Уртенов М.Х., Пекишев Д.В.
МОДЕЛИРОВАНИЕ БАЗ ДАННЫХ, БОЛЬШИЕ ДАННЫЕ В ПРОЕКТЕ «ПРИЛОЖЕНИЕ ПО
ЗАЩИТЕ АККАУНТОВ ОТ ВЗЛОМА» ............................................................................................................... 255
Худойбердиев Х.А., Музафаров М.П.
ИНФОРМАЦИОННАЯ СИСТЕМА ЭЛЕКТРОННОЙ БИБЛИОТЕКИ ........................................................ 260
Худойбердиев Х.А., Нарзиева Д.С.
ПРИМЕНЕНИЕ АРХИТЕКТУРЫ «КЛИЕНТ-СЕРВЕР» ДЛЯ СИСТЕМ УПРАВЛЕНИЯ
ПЕРСОНАЛА ............................................................................................................................................................. 264
374ИНТЕРНЕТ ВЕЩЕЙ
Ивашнев К.Р., Корзун Д.Ж.
МЕТОДЫ ОРГАНИЗАЦИИ МОБИЛЬНОЙ СВЯЗИ ДЛЯ ТРУДНОДОСТУПНОЙ МЕСТНОСТИ ....... 268
Каверина И.С., Стасевский В.И., Шиманская Е.А.
СОЗДАНИЕ ЧАТ-БОТА ДЛЯ ПОЛЬЗОВАТЕЛЕЙ ПРОЕКТА ПРОФИЛАКТИКИ ХРОНИЧЕСКИХ
НЕИНФЕКЦИОННЫХ ЗАБОЛЕВАНИЙ «ПРЕВЕНТОРИУМ» ..................................................................... 278
Костеннов Т.В.
О НЕКОТОРЫХ ПРОБЛЕМАХ БЕЗОПАСНОСТИ В РАЗРАБОТКЕ И ЭКСПЛУАТАЦИИ СИСТЕМ
ИНТЕРНЕТА ВЕЩЕЙ И ВОЗМОЖНЫХ ПОДХОДАХ К ИХ РЕШЕНИЮ .................................................. 284
ВОПРОСЫ МЕТОДОЛОГИИ ФОРМИРОВАНИЯ ПРОФЕССИОНАЛЬНЫХ
КОМПЕТЕНЦИЙ ВЫПУСКНИКОВ ВУЗОВ ПО IT-НАПРАВЛЕНИЯМ
И ВЗАИМОДЕЙСТВИЯ С ОБЩЕОБРАЗОВАТЕЛЬНЫМИ ШКОЛАМИ
Абрамян Г.В.
МЕТОДОЛОГИЯ ЦИФРОВОЙ ТРАНСФОРМАЦИИ: ОСОБЕННОСТИ КАПСУЛИРОВАННОГО
ОБРАЗОВАНИЯ СТУДЕНТОВ И ШКОЛЬНИКОВ В ИНТЕЛЛЕКТУАЛЬНЫХ СРЕДАХ
МУЛЬТИМОДАЛЬНЫХ ТРАНСФОРМЕРОВ И ВИРТУАЛЬНЫХ АССИСТЕНТОВ В УСЛОВИЯХ
БИОЦИФРОВОЙ КОНВЕРГЕНЦИИ ................................................................................................................... 290
Казиахмедов Т.Б.
ОСОБЕННОСТИ ПОДГОТОВКИ IT БАКАЛАВРОВ В УСЛОВИЯХ ИСЧЕЗНОВЕНИЯ
СУЩЕСТВУЮЩИХ И ПОЯВЛЕНИЯ НОВЫХ ПРОФЕССИЙ ..................................................................... 298
Козлов В.А., Загребин В.К., Шекихачева Н.И.
КОМБИНАТОРИКА И IT-ТЕХНОЛОГИИ ......................................................................................................... 309
Петров Д.А.
ПРОЕКТИРОВАНИЕ ПРОФЕССИОНАЛЬНОЙ КОМПЕТЕНЦИИ WEB-РАЗРАБОТЧИКА
НА ОСНОВЕ ТРЕБОВАНИЙ РЫНКА ТРУДА ................................................................................................... 314
Казиахмедов Т.Б., Симурзина Е.А., Саматова Л.И.
ОСОБЕННОСТИ ФОРМИРОВАНИЯ ПСИХОЛОГИИ IT БАКАЛАВРА
В КОМПЕТЕНТНОСТНО-КОНТЕКСТНОМ ОБУЧЕНИИ ............................................................................. 319
Широков В.В., Щиголева М.А.
ФОРМИРОВАНИЕ ПРОФЕССИОНАЛЬНЫХ КОМПЕТЕНЦИЙ ВЫПУСКНИКОВ ВУЗОВ
ПО НАПРАВЛЕНИЮ «ИНФОРМАЦИОННЫЕ СИСТЕМЫ И ТЕХНОЛОГИИ» ..................................... 328
ОБУЧЕНИЕ ПРИКЛАДНЫМ РЕШЕНИЯМ 1С В ОРГАНИЗАЦИЯХ СПО И ВУЗАХ.
ОБУЧЕНИЕ ШКОЛЬНИКОВ 1С ПРОГРАММИРОВАНИЮ
Никонова Е.З., Бутерус М.А.
СЕРТИФИКАЦИЯ СТУДЕНТОВ В ВУЗОВСКОЙ ПОДГОТОВКЕ КАК СРЕДСТВО
ПОВЫШЕНИЯ КОНКУРЕНТОСПОСОБНОСТИ ВЫПУСКНИКОВ .......................................................... 336
Никонова Е.З.
ДАННЫЕ В СИСТЕМЕ 1С:ПРЕДПРИЯТИЕ 8.3 ................................................................................................ 341
Тагиров К.М., Тагиров Т.М.
ПРИЛОЖЕНИЕ «МОЙ ОРГАНАЙЗЕР» С ЦЕЛЬЮ ИЗУЧЕНИЯ 1С:ПРЕДПРИЯТИЯ
СТУДЕНТАМИ СПО ................................................................................................................................................ 347
375ОБУЧЕНИЕ ШКОЛЬНИКОВ ПРОГРАММИРОВАНИЮ В СОШ
И УЧРЕЖДЕНИЯХ ДОПОЛНИТЕЛЬНОГО ОБРАЗОВАНИЯ
Захарова Ю.В., Асаевич Н.С., Безденежных С.Ю.
ОБУЧЕНИЕ ДЕТЕЙ СРЕДНЕЙ ШКОЛЫ РАЗРАБОТКЕ ИГР НА C# В РАМКАХ
ФАКУЛЬТАТИВНЫХ ЗАНЯТИЙ ПО ИНФОРМАТИКЕ ................................................................................ 352
Захарова Ю.В., Ушакова Е.В.
ОСОБЕННОСТИ ПРОВЕДЕНИЯ ДОПОЛНИТЕЛЬНЫХ ЗАНЯТИЙ ПО ИНФОРМАТИКЕ
В ПРОФОРИЕНТАЦИОННОЙ ШКОЛЕ ОМГУ ................................................................................................ 358
Бутенина Д.В., Чепель Д.В.
ПОТЕНЦИАЛ ПЛАТФОРМЫ DISCORD ДЛЯ ОБУЧЕНИЯ ПРОГРАММИРОВАНИЮ
ШКОЛЬНИКОВ ........................................................................................................................................................ 364
ОРГАНИЗАЦИОННЫЙ КОМИТЕТ ..................................................................................................................... 370
376Научное издание
СОВРЕМЕННОЕ ПРОГРАММИРОВАНИЕ
Материалы V Международной
научно-практической конференции
Нижневартовск, 7–8 декабря 2023 года
Под общей редакцией Т.Б. Казиахмедова
Подписано в печать 09.04.2024
Формат 60×84/8
Гарнитура Times New Roman. Усл. печ. листов 20,26
Электронное издание. Объем 17,97 МБ. Заказ 2305
Издательство НВГУ
628615, Тюменская область, г.Нижневартовск, ул. Маршала Жукова, 4
Тел./факс: (3466) 24-50-51, Е-mail: red@nvsu.ru, izdatelstvo@nggu.ru